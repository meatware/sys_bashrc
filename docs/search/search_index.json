{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"sys bashrc Premise Slimmed down sysadmin .bashrc that should hopefully have minimal system dependencies. Installation Clone repo, activate via symlink and backup your pre-existing .bashrc cd git clone https://github.com/meatware/sys_bashrc.git mv .bashrc .your_old_bashrc ln -fs ~/sys_bashrc/_bashrc ~/.bashrc source ~/.bashrc","title":"Home"},{"location":"#sys-bashrc","text":"","title":"sys bashrc"},{"location":"#premise","text":"Slimmed down sysadmin .bashrc that should hopefully have minimal system dependencies.","title":"Premise"},{"location":"#installation","text":"","title":"Installation"},{"location":"#clone-repo-activate-via-symlink-and-backup-your-pre-existing-bashrc","text":"cd git clone https://github.com/meatware/sys_bashrc.git mv .bashrc .your_old_bashrc ln -fs ~/sys_bashrc/_bashrc ~/.bashrc source ~/.bashrc","title":"Clone repo, activate via symlink and backup your pre-existing .bashrc"},{"location":"aliases/_core-bash_aliases/","text":"Core BASH Aliases (in /home/bsgt/sys_bashrc/aliases/_core-bash_aliases.sh) Function Index 01 - check_alias_clashes 02 - mkcd 03 - up >> check_alias_clashes(): about : Check alias clashes group : aliases example : $ check_alias_clashes function check_alias_clashes() { alias | sed 's/^[^ ]* *\\|=.*$//g' | while read a; do printf \"%20.20s : %s\\n\" $a \"$(type -ta $a | tr '\\n' ' ')\" done | awk -F: '$2 ~ /file/' } Function Calls: \u2514\u2500 check_alias_clashes \u2514\u2500 up >> mkcd(): about : Make a folder and go into it group : aliases param : 1: Name of the directory to create & enter example : mkcd my_new_dir function mkcd() { mkdir -p $1; cd $1 } Function Calls: \u2514\u2500 mkcd \u2514\u2500 up >> up(): about : Go up N directories in the file path group : aliases param : 1: Integer corresponding to number of directories to go up. example : $ up 3 function up() { local d=\"\" limit=$1 for ((i=1 ; i <= limit ; i++)) do d=$d/.. done d=$(echo $d | sed 's/^\\///') if [ -z \"$d\" ]; then d=.. fi cd $d } Aliases Alias Name Code Notes mkdir mkdir -p ls ls -ah --color=always' ls always has --color switched on & shows all files qs /bin/ls' fast ls with no options (many files in a directory) la ls -Alh' show hidden files lao ls -ld .?*' show ONLY hidden files lx ls -lXBh' sort by extension lk ls -lSrh' sort by size lc ls -lcrh' sort by change time lu ls -lurh' sort by access time lr ls -lRh' recursive ls lt ls -ltrh' sort by date lm ls -alh | less' pipe through 'less' lw ls -xAh' wide listing format ll ls -lth' long listing format labc ls -lap' alphabetical sort lf ls -l | egrep -v '^d'\" files only ldir ls -l | egrep '^d'\" directories only cd.. cd .. .. cd .. ... cd ../.. .... cd ../../.. ..... cd ../../../.. bashrc cd ${HOME}/sys_bashrc; ll' Switch to sys_bashrc directory in home and ls grep grep --color=auto egrep egrep --color=auto fgrep fgrep --color=auto edbash gedit ~/.bashrc ~/sys_bashrc/internal/*.sh & F5 source ~/.bashrc df df -x \"squashfs\"' Stop showing mounted snap in file system dfraw df' raw df with all options disabled","title":"_core-bash_aliases"},{"location":"aliases/_core-bash_aliases/#core-bash-aliases","text":"(in /home/bsgt/sys_bashrc/aliases/_core-bash_aliases.sh)","title":"Core BASH Aliases"},{"location":"aliases/_core-bash_aliases/#function-index","text":"01 - check_alias_clashes 02 - mkcd 03 - up","title":"Function Index"},{"location":"aliases/_core-bash_aliases/#check_alias_clashes","text":"about : Check alias clashes group : aliases example : $ check_alias_clashes function check_alias_clashes() { alias | sed 's/^[^ ]* *\\|=.*$//g' | while read a; do printf \"%20.20s : %s\\n\" $a \"$(type -ta $a | tr '\\n' ' ')\" done | awk -F: '$2 ~ /file/' }","title":"&gt;&gt; check_alias_clashes():"},{"location":"aliases/_core-bash_aliases/#function-calls","text":"\u2514\u2500 check_alias_clashes \u2514\u2500 up","title":"Function Calls:"},{"location":"aliases/_core-bash_aliases/#mkcd","text":"about : Make a folder and go into it group : aliases param : 1: Name of the directory to create & enter example : mkcd my_new_dir function mkcd() { mkdir -p $1; cd $1 }","title":"&gt;&gt; mkcd():"},{"location":"aliases/_core-bash_aliases/#function-calls_1","text":"\u2514\u2500 mkcd \u2514\u2500 up","title":"Function Calls:"},{"location":"aliases/_core-bash_aliases/#up","text":"about : Go up N directories in the file path group : aliases param : 1: Integer corresponding to number of directories to go up. example : $ up 3 function up() { local d=\"\" limit=$1 for ((i=1 ; i <= limit ; i++)) do d=$d/.. done d=$(echo $d | sed 's/^\\///') if [ -z \"$d\" ]; then d=.. fi cd $d }","title":"&gt;&gt; up():"},{"location":"aliases/_core-bash_aliases/#aliases","text":"Alias Name Code Notes mkdir mkdir -p ls ls -ah --color=always' ls always has --color switched on & shows all files qs /bin/ls' fast ls with no options (many files in a directory) la ls -Alh' show hidden files lao ls -ld .?*' show ONLY hidden files lx ls -lXBh' sort by extension lk ls -lSrh' sort by size lc ls -lcrh' sort by change time lu ls -lurh' sort by access time lr ls -lRh' recursive ls lt ls -ltrh' sort by date lm ls -alh | less' pipe through 'less' lw ls -xAh' wide listing format ll ls -lth' long listing format labc ls -lap' alphabetical sort lf ls -l | egrep -v '^d'\" files only ldir ls -l | egrep '^d'\" directories only cd.. cd .. .. cd .. ... cd ../.. .... cd ../../.. ..... cd ../../../.. bashrc cd ${HOME}/sys_bashrc; ll' Switch to sys_bashrc directory in home and ls grep grep --color=auto egrep egrep --color=auto fgrep fgrep --color=auto edbash gedit ~/.bashrc ~/sys_bashrc/internal/*.sh & F5 source ~/.bashrc df df -x \"squashfs\"' Stop showing mounted snap in file system dfraw df' raw df with all options disabled","title":"Aliases"},{"location":"aliases/apt_aliases/","text":"Apt & dpkg aliases for Ubuntu and Debian distros. (in /home/bsgt/sys_bashrc/aliases/apt_aliases.sh) Function Index 01 - ubupdate >> ubupdate(): about : Ubdate & upgrade ubuntu via apt. Then run apt auto-remove group : base example : ubupdate function ubupdate() { sudo apt update sudo apt upgrade -y sudo apt auto-remove } Aliases Alias Name Code Notes apts apt-cache search aptshow apt-cache show aptinst sudo apt-get install -V aptupd sudo apt-get update aptupg sudo apt-get dist-upgrade -V && sudo apt-get autoremove aptupgd sudo apt-get update && sudo apt-get dist-upgrade -V && sudo apt-get autoremove aptrm sudo apt-get remove aptpurge sudo apt-get remove --purge chkup /usr/lib/update-notifier/apt-check -p --human-readable chkboot cat /var/run/reboot-required pkgfiles dpkg --listfiles","title":"apt_aliases"},{"location":"aliases/apt_aliases/#apt-dpkg-aliases-for-ubuntu-and-debian-distros","text":"(in /home/bsgt/sys_bashrc/aliases/apt_aliases.sh)","title":"Apt &amp; dpkg aliases for Ubuntu and Debian distros."},{"location":"aliases/apt_aliases/#function-index","text":"01 - ubupdate","title":"Function Index"},{"location":"aliases/apt_aliases/#ubupdate","text":"about : Ubdate & upgrade ubuntu via apt. Then run apt auto-remove group : base example : ubupdate function ubupdate() { sudo apt update sudo apt upgrade -y sudo apt auto-remove }","title":"&gt;&gt; ubupdate():"},{"location":"aliases/apt_aliases/#aliases","text":"Alias Name Code Notes apts apt-cache search aptshow apt-cache show aptinst sudo apt-get install -V aptupd sudo apt-get update aptupg sudo apt-get dist-upgrade -V && sudo apt-get autoremove aptupgd sudo apt-get update && sudo apt-get dist-upgrade -V && sudo apt-get autoremove aptrm sudo apt-get remove aptpurge sudo apt-get remove --purge chkup /usr/lib/update-notifier/apt-check -p --human-readable chkboot cat /var/run/reboot-required pkgfiles dpkg --listfiles","title":"Aliases"},{"location":"aliases/docker-compose_aliases/","text":"docker-compose abbreviations (in /home/bsgt/sys_bashrc/aliases/docker-compose_aliases.sh) Aliases Alias Name Code Notes dco docker-compose dcofresh docker-compose-fresh dcol docker-compose logs -f --tail 100 dcou docker-compose up dcod docker-compose down","title":"docker-compose_aliases"},{"location":"aliases/docker-compose_aliases/#docker-compose-abbreviations","text":"(in /home/bsgt/sys_bashrc/aliases/docker-compose_aliases.sh)","title":"docker-compose abbreviations"},{"location":"aliases/docker-compose_aliases/#aliases","text":"Alias Name Code Notes dco docker-compose dcofresh docker-compose-fresh dcol docker-compose logs -f --tail 100 dcou docker-compose up dcod docker-compose down","title":"Aliases"},{"location":"aliases/docker_aliases/","text":"Docker aliases (in /home/bsgt/sys_bashrc/aliases/docker_aliases.sh) Function Index 01 - dkln 02 - dkclean 03 - dktop 04 - dkstats 05 - dke 06 - dkrun 07 - dkexe 08 - dkstate 09 - dksb 10 - mongo 11 - redis 12 - dkp 13 - dkpnc 14 - dkpl >> dkln(): about : Gets docker logs from running container group : docker param : container-id or name example : dkln 1411494fa3db function dkln() { docker logs -f $(docker ps | grep $1 | awk '{print $1}') } >> dkclean(): about : Remove all exited containers and dangling volumes group : docker example : dkclean function dkclean() { docker rm $(docker ps --all -q -f status=exited) docker volume rm $(docker volume ls -qf dangling=true) } >> dktop(): about : Docker Top - Formatted group : docker example : dktop function dktop() { docker stats --format \"table {{.Container}}\\t{{.Name}}\\t{{.CPUPerc}} {{.MemPerc}}\\t{{.NetIO}}\\t{{.BlockIO}}\" } >> dkstats(): about : Docker stats - All or named container group : docker param : optional: container-id or name example : dkstats example : dkstats a2234c1bc7ea function dkstats() { if [ $# -eq 0 ] then docker stats --no-stream; else docker stats --no-stream | grep $1; fi } >> dke(): about : Docker exec into container to get /bin/sh prompt group : docker param : container-id or name example : dke a2234c1bc7ea function dke() { docker exec -it $1 /bin/sh } >> dkrun(): about : Docker run into image to get /bin/sh prompt group : docker param : image-id or image repository example : dkrun nginx example : dkrun 992e3b7be046 function dkrun() { docker run -it $1 /bin/sh } >> dkexe(): about : Docker exec to run arbitary command on running container. group : docker param : 1. container-id or name param : 2. arbitary nix command example : dkexe 992e3b7be046 ls /workspace/ function dkexe() { docker exec -it $1 $2 } >> dkstate(): about : Read docker state of running container via docker inspect group : docker param : container-id or name example : dkstate a2234c1bc7ea function dkstate() { docker inspect $1 | jq .[0].State } >> dksb(): function dksb() { docker service scale $1=0 sleep 2 docker service scale $1=$2 } >> mongo(): function mongo() { mongoLabel=$(docker ps | grep mongo | awk '{print $NF}') docker exec -it $mongoLabel mongo \"$@\" } >> redis(): function redis() { redisLabel=$(docker ps | grep redis | awk '{print $NF}') docker exec -it $redisLabel redis-cli } >> dkp(): about : Build & push npm container package with $NPM_TOKEN as build arg. Requires package.json group : docker param : container name example : dkp mynpm-conatiner function dkp() { if [ ! -f .dockerignore ]; then echo \"Warning, .dockerignore file is missing.\" read -p \"Proceed anyway?\" fi if [ ! -f package.json ]; then echo \"Warning, package.json file is missing.\" read -p \"Are you in the right directory?\" fi VERSION=$(cat package.json | jq .version | sed 's/\\\"//g') NAME=$(cat package.json | jq .name | sed 's/\\\"//g') LABEL=\"$1/$NAME:$VERSION\" docker build --build-arg NPM_TOKEN=${NPM_TOKEN} -t $LABEL . read -p \"Press enter to publish\" docker push $LABEL } >> dkpnc(): about : Build (without cache) & push npm container with $NPM_TOKEN as build arg. Requires package.json group : docker param : container name example : dkpnc mynpm-conatiner function dkpnc() { if [ ! -f .dockerignore ]; then echo \"Warning, .dockerignore file is missing.\" read -p \"Proceed anyway?\" fi if [ ! -f package.json ]; then echo \"Warning, package.json file is missing.\" read -p \"Are you in the right directory?\" fi VERSION=$(cat package.json | jq .version | sed 's/\\\"//g') NAME=$(cat package.json | jq .name | sed 's/\\\"//g') LABEL=\"$1/$NAME:$VERSION\" docker build --build-arg NPM_TOKEN=${NPM_TOKEN} --no-cache=true -t $LABEL . read -p \"Press enter to publish\" docker push $LABEL } >> dkpl(): about : Build (without cache) & push npm container (with latest tag) and with $NPM_TOKEN as build arg. Requires package.json group : docker param : container name example : dkpl mynpm-conatiner function dkpl() { if [ ! -f .dockerignore ]; then echo \"Warning, .dockerignore file is missing.\" read -p \"Proceed anyway?\" fi if [ ! -f package.json ]; then echo \"Warning, package.json file is missing.\" read -p \"Are you in the right directory?\" fi VERSION=$(cat package.json | jq .version | sed 's/\\\"//g') NAME=$(cat package.json | jq .name | sed 's/\\\"//g') LATEST=\"$1/$NAME:latest\" docker build --build-arg NPM_TOKEN=${NPM_TOKEN} --no-cache=true -t $LATEST . read -p \"Press enter to publish\" docker push $LATEST } Aliases Alias Name Code Notes dk docker dklc docker ps -l' List last Docker container dklcid docker ps -l -q' List last Docker container ID dklcip docker inspect -f \"{{.NetworkSettings.IPAddress}}\" $(docker ps -l -q)' Get IP of last Docker container dkps docker ps' List running Docker containers dkpsa docker ps -a' List all Docker containers dki docker images' List Docker images dkrmac docker rm $(docker ps -a -q)' Delete all Docker containers dkelc docker exec -it $(dklcid) bash --login' Enter last container (works with Docker 1.3 and above) dkrmflast docker rm -f $(dklcid) dkbash dkelc dkex docker exec -it ' Useful to run any commands into container without leaving host dkri docker run --rm -i dkrit docker run --rm -it dkip docker image prune -a -f dkvp docker volume prune -f dksp docker system prune -a -f dkpruneall docker system prune -a -f --all --volumes dm docker-machine dmx docker-machine ssh dks docker service dkrm docker rm dkl docker logs dklf docker logs -f dkflush docker rm $(docker ps --no-trunc -aq) dkflush2 docker rmi $(docker images --filter \"dangling=true\" -q --no-trunc) dkt docker stats --format \"table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.NetIO}}\" dkps docker ps","title":"docker_aliases"},{"location":"aliases/docker_aliases/#docker-aliases","text":"(in /home/bsgt/sys_bashrc/aliases/docker_aliases.sh)","title":"Docker aliases"},{"location":"aliases/docker_aliases/#function-index","text":"01 - dkln 02 - dkclean 03 - dktop 04 - dkstats 05 - dke 06 - dkrun 07 - dkexe 08 - dkstate 09 - dksb 10 - mongo 11 - redis 12 - dkp 13 - dkpnc 14 - dkpl","title":"Function Index"},{"location":"aliases/docker_aliases/#dkln","text":"about : Gets docker logs from running container group : docker param : container-id or name example : dkln 1411494fa3db function dkln() { docker logs -f $(docker ps | grep $1 | awk '{print $1}') }","title":"&gt;&gt; dkln():"},{"location":"aliases/docker_aliases/#dkclean","text":"about : Remove all exited containers and dangling volumes group : docker example : dkclean function dkclean() { docker rm $(docker ps --all -q -f status=exited) docker volume rm $(docker volume ls -qf dangling=true) }","title":"&gt;&gt; dkclean():"},{"location":"aliases/docker_aliases/#dktop","text":"about : Docker Top - Formatted group : docker example : dktop function dktop() { docker stats --format \"table {{.Container}}\\t{{.Name}}\\t{{.CPUPerc}} {{.MemPerc}}\\t{{.NetIO}}\\t{{.BlockIO}}\" }","title":"&gt;&gt; dktop():"},{"location":"aliases/docker_aliases/#dkstats","text":"about : Docker stats - All or named container group : docker param : optional: container-id or name example : dkstats example : dkstats a2234c1bc7ea function dkstats() { if [ $# -eq 0 ] then docker stats --no-stream; else docker stats --no-stream | grep $1; fi }","title":"&gt;&gt; dkstats():"},{"location":"aliases/docker_aliases/#dke","text":"about : Docker exec into container to get /bin/sh prompt group : docker param : container-id or name example : dke a2234c1bc7ea function dke() { docker exec -it $1 /bin/sh }","title":"&gt;&gt; dke():"},{"location":"aliases/docker_aliases/#dkrun","text":"about : Docker run into image to get /bin/sh prompt group : docker param : image-id or image repository example : dkrun nginx example : dkrun 992e3b7be046 function dkrun() { docker run -it $1 /bin/sh }","title":"&gt;&gt; dkrun():"},{"location":"aliases/docker_aliases/#dkexe","text":"about : Docker exec to run arbitary command on running container. group : docker param : 1. container-id or name param : 2. arbitary nix command example : dkexe 992e3b7be046 ls /workspace/ function dkexe() { docker exec -it $1 $2 }","title":"&gt;&gt; dkexe():"},{"location":"aliases/docker_aliases/#dkstate","text":"about : Read docker state of running container via docker inspect group : docker param : container-id or name example : dkstate a2234c1bc7ea function dkstate() { docker inspect $1 | jq .[0].State }","title":"&gt;&gt; dkstate():"},{"location":"aliases/docker_aliases/#dksb","text":"function dksb() { docker service scale $1=0 sleep 2 docker service scale $1=$2 }","title":"&gt;&gt; dksb():"},{"location":"aliases/docker_aliases/#mongo","text":"function mongo() { mongoLabel=$(docker ps | grep mongo | awk '{print $NF}') docker exec -it $mongoLabel mongo \"$@\" }","title":"&gt;&gt; mongo():"},{"location":"aliases/docker_aliases/#redis","text":"function redis() { redisLabel=$(docker ps | grep redis | awk '{print $NF}') docker exec -it $redisLabel redis-cli }","title":"&gt;&gt; redis():"},{"location":"aliases/docker_aliases/#dkp","text":"about : Build & push npm container package with $NPM_TOKEN as build arg. Requires package.json group : docker param : container name example : dkp mynpm-conatiner function dkp() { if [ ! -f .dockerignore ]; then echo \"Warning, .dockerignore file is missing.\" read -p \"Proceed anyway?\" fi if [ ! -f package.json ]; then echo \"Warning, package.json file is missing.\" read -p \"Are you in the right directory?\" fi VERSION=$(cat package.json | jq .version | sed 's/\\\"//g') NAME=$(cat package.json | jq .name | sed 's/\\\"//g') LABEL=\"$1/$NAME:$VERSION\" docker build --build-arg NPM_TOKEN=${NPM_TOKEN} -t $LABEL . read -p \"Press enter to publish\" docker push $LABEL }","title":"&gt;&gt; dkp():"},{"location":"aliases/docker_aliases/#dkpnc","text":"about : Build (without cache) & push npm container with $NPM_TOKEN as build arg. Requires package.json group : docker param : container name example : dkpnc mynpm-conatiner function dkpnc() { if [ ! -f .dockerignore ]; then echo \"Warning, .dockerignore file is missing.\" read -p \"Proceed anyway?\" fi if [ ! -f package.json ]; then echo \"Warning, package.json file is missing.\" read -p \"Are you in the right directory?\" fi VERSION=$(cat package.json | jq .version | sed 's/\\\"//g') NAME=$(cat package.json | jq .name | sed 's/\\\"//g') LABEL=\"$1/$NAME:$VERSION\" docker build --build-arg NPM_TOKEN=${NPM_TOKEN} --no-cache=true -t $LABEL . read -p \"Press enter to publish\" docker push $LABEL }","title":"&gt;&gt; dkpnc():"},{"location":"aliases/docker_aliases/#dkpl","text":"about : Build (without cache) & push npm container (with latest tag) and with $NPM_TOKEN as build arg. Requires package.json group : docker param : container name example : dkpl mynpm-conatiner function dkpl() { if [ ! -f .dockerignore ]; then echo \"Warning, .dockerignore file is missing.\" read -p \"Proceed anyway?\" fi if [ ! -f package.json ]; then echo \"Warning, package.json file is missing.\" read -p \"Are you in the right directory?\" fi VERSION=$(cat package.json | jq .version | sed 's/\\\"//g') NAME=$(cat package.json | jq .name | sed 's/\\\"//g') LATEST=\"$1/$NAME:latest\" docker build --build-arg NPM_TOKEN=${NPM_TOKEN} --no-cache=true -t $LATEST . read -p \"Press enter to publish\" docker push $LATEST }","title":"&gt;&gt; dkpl():"},{"location":"aliases/docker_aliases/#aliases","text":"Alias Name Code Notes dk docker dklc docker ps -l' List last Docker container dklcid docker ps -l -q' List last Docker container ID dklcip docker inspect -f \"{{.NetworkSettings.IPAddress}}\" $(docker ps -l -q)' Get IP of last Docker container dkps docker ps' List running Docker containers dkpsa docker ps -a' List all Docker containers dki docker images' List Docker images dkrmac docker rm $(docker ps -a -q)' Delete all Docker containers dkelc docker exec -it $(dklcid) bash --login' Enter last container (works with Docker 1.3 and above) dkrmflast docker rm -f $(dklcid) dkbash dkelc dkex docker exec -it ' Useful to run any commands into container without leaving host dkri docker run --rm -i dkrit docker run --rm -it dkip docker image prune -a -f dkvp docker volume prune -f dksp docker system prune -a -f dkpruneall docker system prune -a -f --all --volumes dm docker-machine dmx docker-machine ssh dks docker service dkrm docker rm dkl docker logs dklf docker logs -f dkflush docker rm $(docker ps --no-trunc -aq) dkflush2 docker rmi $(docker images --filter \"dangling=true\" -q --no-trunc) dkt docker stats --format \"table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.NetIO}}\" dkps docker ps","title":"Aliases"},{"location":"aliases/git_aliases/","text":"common git abbreviations (in /home/bsgt/sys_bashrc/aliases/git_aliases.sh) Aliases Alias Name Code Notes gdiffh git diff HEAD gpllo git pull origin gpllocb git pull origin $(git rev-parse --abbrev-ref HEAD)' git pull origin current branch gp git push gpo git push origin gpocb git push origin $(git rev-parse --abbrev-ref HEAD)' git push origin current branch gcl git clone ga git add grm git rm gap git add -p gall git add -A gf git fetch --all --prune gft git fetch --all --prune --tags gfv git fetch --all --prune --verbose gftv git fetch --all --prune --tags --verbose gus git reset HEAD gpristine git reset --hard && git clean -dfx gclean git clean -fd gm git merge gmv git mv g git get git gs git status gss git status -s gsu git submodule update --init --recursive gl git pull glum git pull upstream master gpr git pull --rebase gpp git pull && git push gup git fetch && git rebase gp git push gpo git push origin gpu git push --set-upstream gpuo git push --set-upstream origin gpuoc git push --set-upstream origin $(git symbolic-ref --short HEAD) gpom git push origin master gr git remote grv git remote -v gra git remote add gd git diff gds git diff --staged gdv git diff -w \"$@\" | vim -R - gc git commit -v gca git commit -v -a gcm git commit -v -m gcam git commit -v -am gci git commit --interactive gb git branch gba git branch -a gbt git branch --track gbm git branch -m gbd git branch -d gbD git branch -D gcount git shortlog -sn gcp git cherry-pick gcpx git cherry-pick -x gco git checkout gcom git checkout master gcb git checkout -b gcob git checkout -b gct git checkout --track gcpd git checkout master; git pull; git branch -D gexport git archive --format zip --output gdel git branch -D gmu git fetch origin -v; git fetch upstream -v; git merge upstream/master gll git log --graph --pretty=oneline --abbrev-commit gg git log --graph --pretty=format:'%C(bold)%h%Creset%C(magenta)%d%Creset %s %C(yellow)<%an> %C(cyan)(%cr)%Creset' --abbrev-commit --date=relative ggs gg --stat gsl git shortlog -sn gwc git whatchanged gt git tag gta git tag -a gtd git tag -d gtl git tag -l gpatch git format-patch -1 gnew git log HEAD@{1}..HEAD@{0} gcaa git commit -a --amend -C HEAD ggui git gui gcsam git commit -S -am gst git stash gstb git stash branch gstd git stash drop gstl git stash list gstp git stash pop ght cd \"$(git rev-parse --show-toplevel)\" gu git ls-files . --exclude-standard --others","title":"git_aliases"},{"location":"aliases/git_aliases/#common-git-abbreviations","text":"(in /home/bsgt/sys_bashrc/aliases/git_aliases.sh)","title":"common git abbreviations"},{"location":"aliases/git_aliases/#aliases","text":"Alias Name Code Notes gdiffh git diff HEAD gpllo git pull origin gpllocb git pull origin $(git rev-parse --abbrev-ref HEAD)' git pull origin current branch gp git push gpo git push origin gpocb git push origin $(git rev-parse --abbrev-ref HEAD)' git push origin current branch gcl git clone ga git add grm git rm gap git add -p gall git add -A gf git fetch --all --prune gft git fetch --all --prune --tags gfv git fetch --all --prune --verbose gftv git fetch --all --prune --tags --verbose gus git reset HEAD gpristine git reset --hard && git clean -dfx gclean git clean -fd gm git merge gmv git mv g git get git gs git status gss git status -s gsu git submodule update --init --recursive gl git pull glum git pull upstream master gpr git pull --rebase gpp git pull && git push gup git fetch && git rebase gp git push gpo git push origin gpu git push --set-upstream gpuo git push --set-upstream origin gpuoc git push --set-upstream origin $(git symbolic-ref --short HEAD) gpom git push origin master gr git remote grv git remote -v gra git remote add gd git diff gds git diff --staged gdv git diff -w \"$@\" | vim -R - gc git commit -v gca git commit -v -a gcm git commit -v -m gcam git commit -v -am gci git commit --interactive gb git branch gba git branch -a gbt git branch --track gbm git branch -m gbd git branch -d gbD git branch -D gcount git shortlog -sn gcp git cherry-pick gcpx git cherry-pick -x gco git checkout gcom git checkout master gcb git checkout -b gcob git checkout -b gct git checkout --track gcpd git checkout master; git pull; git branch -D gexport git archive --format zip --output gdel git branch -D gmu git fetch origin -v; git fetch upstream -v; git merge upstream/master gll git log --graph --pretty=oneline --abbrev-commit gg git log --graph --pretty=format:'%C(bold)%h%Creset%C(magenta)%d%Creset %s %C(yellow)<%an> %C(cyan)(%cr)%Creset' --abbrev-commit --date=relative ggs gg --stat gsl git shortlog -sn gwc git whatchanged gt git tag gta git tag -a gtd git tag -d gtl git tag -l gpatch git format-patch -1 gnew git log HEAD@{1}..HEAD@{0} gcaa git commit -a --amend -C HEAD ggui git gui gcsam git commit -S -am gst git stash gstb git stash branch gstd git stash drop gstl git stash list gstp git stash pop ght cd \"$(git rev-parse --show-toplevel)\" gu git ls-files . --exclude-standard --others","title":"Aliases"},{"location":"aliases/kubectl_aliases/","text":"kubectl aliases (in /home/bsgt/sys_bashrc/aliases/kubectl_aliases.sh) Aliases Alias Name Code Notes kc kubectl kcgp kubectl get pods kcgd kubectl get deployments kcgn kubectl get nodes kcdp kubectl describe pod kcdd kubectl describe deployment kcdn kubectl describe node kcgpan kubectl get pods --all-namespaces kcgdan kubectl get deployments --all-namespaces kcnetshoot kubectl run --generator=run-pod/v1 netshoot-$(date +%s) --rm -i --tty --image nicolaka/netshoot -- /bin/bash","title":"kubectl_aliases"},{"location":"aliases/kubectl_aliases/#kubectl-aliases","text":"(in /home/bsgt/sys_bashrc/aliases/kubectl_aliases.sh)","title":"kubectl aliases"},{"location":"aliases/kubectl_aliases/#aliases","text":"Alias Name Code Notes kc kubectl kcgp kubectl get pods kcgd kubectl get deployments kcgn kubectl get nodes kcdp kubectl describe pod kcdd kubectl describe deployment kcdn kubectl describe node kcgpan kubectl get pods --all-namespaces kcgdan kubectl get deployments --all-namespaces kcnetshoot kubectl run --generator=run-pod/v1 netshoot-$(date +%s) --rm -i --tty --image nicolaka/netshoot -- /bin/bash","title":"Aliases"},{"location":"aliases/terraform_aliases/","text":"Terraform abbreviations (in /home/bsgt/sys_bashrc/aliases/terraform_aliases.sh) Aliases Alias Name Code Notes tf terraform tfv terraform validate tfp terraform plan tfa terraform apply tfd terraform destory","title":"terraform_aliases"},{"location":"aliases/terraform_aliases/#terraform-abbreviations","text":"(in /home/bsgt/sys_bashrc/aliases/terraform_aliases.sh)","title":"Terraform abbreviations"},{"location":"aliases/terraform_aliases/#aliases","text":"Alias Name Code Notes tf terraform tfv terraform validate tfp terraform plan tfa terraform apply tfd terraform destory","title":"Aliases"},{"location":"completion/awscli_completion/","text":"AWS CLI Completions (in /home/bsgt/sys_bashrc/completions/awscli_completion.sh) Aliases Alias Name Code Notes awsc aws configure","title":"awscli_completion"},{"location":"completion/awscli_completion/#aws-cli-completions","text":"(in /home/bsgt/sys_bashrc/completions/awscli_completion.sh)","title":"AWS CLI Completions"},{"location":"completion/awscli_completion/#aliases","text":"Alias Name Code Notes awsc aws configure","title":"Aliases"},{"location":"completion/completion/","text":"Undefined. Add composure cite-about to shell script file (in /home/bsgt/sys_bashrc/venv/lib/python3.6/site-packages/tqdm/completion.sh)","title":"completion"},{"location":"completion/completion/#undefined-add-composure-cite-about-to-shell-script-file","text":"(in /home/bsgt/sys_bashrc/venv/lib/python3.6/site-packages/tqdm/completion.sh)","title":"Undefined. Add composure cite-about to shell script file"},{"location":"completion/docker-compose_completion/","text":"docker-compose Completions (in /home/bsgt/sys_bashrc/completions/docker-compose_completion.sh) Function Index 01 - __docker_compose_q 02 - __docker_compose_to_alternatives 03 - __docker_compose_to_extglob 04 - __docker_compose_has_option 05 - __docker_compose_map_key_of_current_option 06 - __docker_compose_nospace 07 - __docker_compose_services 08 - __docker_compose_complete_services 09 - __docker_compose_complete_running_services 10 - _docker_compose_build 11 - _docker_compose_bundle 12 - _docker_compose_config 13 - _docker_compose_create 14 - _docker_compose_docker_compose 15 - _docker_compose_down 16 - _docker_compose_events 17 - _docker_compose_exec 18 - _docker_compose_help 19 - _docker_compose_images 20 - _docker_compose_kill 21 - _docker_compose_logs 22 - _docker_compose_pause 23 - _docker_compose_port 24 - _docker_compose_ps 25 - _docker_compose_pull 26 - _docker_compose_push 27 - _docker_compose_restart 28 - _docker_compose_rm 29 - _docker_compose_run 30 - _docker_compose_scale 31 - _docker_compose_start 32 - _docker_compose_stop 33 - _docker_compose_top 34 - _docker_compose_unpause 35 - _docker_compose_up 36 - _docker_compose_version 37 - _docker_compose >> __docker_compose_q(): function __docker_compose_q() { docker-compose 2>/dev/null \"${top_level_options[@]}\" \"$@\" } >> __docker_compose_to_alternatives(): function __docker_compose_to_alternatives() { local parts=( $1 ) local IFS='|' echo \"${parts[*]}\" } >> __docker_compose_to_extglob(): function __docker_compose_to_extglob() { local extglob=$( __docker_compose_to_alternatives \"$1\" ) echo \"@($extglob)\" } Function Calls: \u2514\u2500 __docker_compose_to_extglob \u2514\u2500 __docker_compose_to_alternatives >> __docker_compose_has_option(): function __docker_compose_has_option() { local pattern=\"$1\" for (( i=2; i < $cword; ++i)); do if [[ ${words[$i]} =~ ^($pattern)$ ]] ; then return 0 fi done return 1 } >> __docker_compose_map_key_of_current_option(): function __docker_compose_map_key_of_current_option() { local glob=\"$1\" local key glob_pos if [ \"$cur\" = \"=\" ] ; then # key= case key=\"$prev\" glob_pos=$((cword - 2)) elif [[ $cur == *=* ]] ; then # key=value case (OSX) key=${cur%=*} glob_pos=$((cword - 1)) elif [ \"$prev\" = \"=\" ] ; then key=${words[$cword - 2]} # key=value case glob_pos=$((cword - 3)) else return fi [ \"${words[$glob_pos]}\" = \"=\" ] && ((glob_pos--)) # --option=key=value syntax [[ ${words[$glob_pos]} == @($glob) ]] && echo \"$key\" } >> __docker_compose_nospace(): function __docker_compose_nospace() { type compopt &>/dev/null && compopt -o nospace } >> __docker_compose_services(): function __docker_compose_services() { __docker_compose_q ps --services \"$@\" } Function Calls: \u2514\u2500 __docker_compose_services \u2514\u2500 __docker_compose_q >> __docker_compose_complete_services(): function __docker_compose_complete_services() { COMPREPLY=( $(compgen -W \"$(__docker_compose_services \"$@\")\" -- \"$cur\") ) } Function Calls: \u2514\u2500 __docker_compose_complete_services \u2514\u2500 __docker_compose_services \u2514\u2500 __docker_compose_q >> __docker_compose_complete_running_services(): function __docker_compose_complete_running_services() { local names=$(__docker_compose_services --filter status=running) COMPREPLY=( $(compgen -W \"$names\" -- \"$cur\") ) } Function Calls: \u2514\u2500 __docker_compose_complete_running_services \u2514\u2500 __docker_compose_services \u2514\u2500 __docker_compose_q >> _docker_compose_build(): function _docker_compose_build() { case \"$prev\" in --build-arg) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) __docker_compose_nospace return ;; --memory|-m) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--build-arg --compress --force-rm --help --memory -m --no-cache --no-rm --pull --parallel -q --quiet\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services --filter source=build ;; esac } Function Calls: \u2514\u2500 _docker_compose_build \u2514\u2500 __docker_compose_complete_services \u2514\u2500 __docker_compose_services >> _docker_compose_bundle(): function _docker_compose_bundle() { case \"$prev\" in --output|-o) _filedir return ;; esac COMPREPLY=( $( compgen -W \"--push-images --help --output -o\" -- \"$cur\" ) ) } >> _docker_compose_config(): function _docker_compose_config() { case \"$prev\" in --hash) if [[ $cur == \\\\* ]] ; then COMPREPLY=( '\\*' ) else COMPREPLY=( $(compgen -W \"$(__docker_compose_services) \\\\\\* \" -- \"$cur\") ) fi return ;; esac COMPREPLY=( $( compgen -W \"--hash --help --quiet -q --resolve-image-digests --services --volumes\" -- \"$cur\" ) ) } Function Calls: \u2514\u2500 _docker_compose_config \u2514\u2500 __docker_compose_services \u2514\u2500 __docker_compose_q >> _docker_compose_create(): function _docker_compose_create() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--build --force-recreate --help --no-build --no-recreate\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac } >> _docker_compose_docker_compose(): function _docker_compose_docker_compose() { case \"$prev\" in --tlscacert|--tlscert|--tlskey) _filedir return ;; --file|-f) _filedir \"y?(a)ml\" return ;; --log-level) COMPREPLY=( $( compgen -W \"debug info warning error critical\" -- \"$cur\" ) ) return ;; --project-directory) _filedir -d return ;; $(__docker_compose_to_extglob \"$daemon_options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$daemon_boolean_options $daemon_options_with_args $top_level_options_with_args --help -h --no-ansi --verbose --version -v\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"${commands[*]}\" -- \"$cur\" ) ) ;; esac } Function Calls: \u2514\u2500 _docker_compose_docker_compose \u2514\u2500 __docker_compose_to_extglob \u2514\u2500 __docker_compose_to_alternatives >> _docker_compose_down(): function _docker_compose_down() { case \"$prev\" in --rmi) COMPREPLY=( $( compgen -W \"all local\" -- \"$cur\" ) ) return ;; --timeout|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --rmi --timeout -t --volumes -v --remove-orphans\" -- \"$cur\" ) ) ;; esac } >> _docker_compose_events(): function _docker_compose_events() { case \"$prev\" in --json) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --json\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac } >> _docker_compose_exec(): function _docker_compose_exec() { case \"$prev\" in --index|--user|-u|--workdir|-w) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"-d --detach --help --index --privileged -T --user -u --workdir -w\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_running_services ;; esac } >> _docker_compose_help(): function _docker_compose_help() { COMPREPLY=( $( compgen -W \"${commands[*]}\" -- \"$cur\" ) ) } >> _docker_compose_images(): function _docker_compose_images() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --quiet -q\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac } >> _docker_compose_kill(): function _docker_compose_kill() { case \"$prev\" in -s) COMPREPLY=( $( compgen -W \"SIGHUP SIGINT SIGKILL SIGUSR1 SIGUSR2\" -- \"$(echo $cur | tr '[:lower:]' '[:upper:]')\" ) ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help -s\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_running_services ;; esac } >> _docker_compose_logs(): function _docker_compose_logs() { case \"$prev\" in --tail) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--follow -f --help --no-color --tail --timestamps -t\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac } >> _docker_compose_pause(): function _docker_compose_pause() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_running_services ;; esac } >> _docker_compose_port(): function _docker_compose_port() { case \"$prev\" in --protocol) COMPREPLY=( $( compgen -W \"tcp udp\" -- \"$cur\" ) ) return; ;; --index) return; ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --index --protocol\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac } >> _docker_compose_ps(): function _docker_compose_ps() { local key=$(__docker_compose_map_key_of_current_option '--filter') case \"$key\" in source) COMPREPLY=( $( compgen -W \"build image\" -- \"${cur##*=}\" ) ) return ;; status) COMPREPLY=( $( compgen -W \"paused restarting running stopped\" -- \"${cur##*=}\" ) ) return ;; esac case \"$prev\" in --filter) COMPREPLY=( $( compgen -W \"source status\" -S \"=\" -- \"$cur\" ) ) __docker_compose_nospace return; ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --filter --help --quiet -q --services\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac } Function Calls: \u2514\u2500 _docker_compose_ps \u2514\u2500 __docker_compose_map_key_of_current_option >> _docker_compose_pull(): function _docker_compose_pull() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --ignore-pull-failures --include-deps --no-parallel --quiet -q\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services --filter source=image ;; esac } Function Calls: \u2514\u2500 _docker_compose_pull \u2514\u2500 __docker_compose_complete_services \u2514\u2500 __docker_compose_services >> _docker_compose_push(): function _docker_compose_push() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --ignore-push-failures\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac } >> _docker_compose_restart(): function _docker_compose_restart() { case \"$prev\" in --timeout|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --timeout -t\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_running_services ;; esac } >> _docker_compose_rm(): function _docker_compose_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help --stop -s -v\" -- \"$cur\" ) ) ;; *) if __docker_compose_has_option \"--stop|-s\" ; then __docker_compose_complete_services else __docker_compose_complete_services --filter status=stopped fi ;; esac } Function Calls: \u2514\u2500 _docker_compose_rm \u251c\u2500 __docker_compose_has_option \u2514\u2500 __docker_compose_complete_services \u2514\u2500 __docker_compose_services >> _docker_compose_run(): function _docker_compose_run() { case \"$prev\" in -e) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) __docker_compose_nospace return ;; --entrypoint|--label|-l|--name|--user|-u|--volume|-v|--workdir|-w) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--detach -d --entrypoint -e --help --label -l --name --no-deps --publish -p --rm --service-ports -T --use-aliases --user -u --volume -v --workdir -w\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac } >> _docker_compose_scale(): function _docker_compose_scale() { case \"$prev\" in =) COMPREPLY=(\"$cur\") return ;; --timeout|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --timeout -t\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $(compgen -S \"=\" -W \"$(__docker_compose_services)\" -- \"$cur\") ) __docker_compose_nospace ;; esac } Function Calls: \u2514\u2500 _docker_compose_scale \u2514\u2500 __docker_compose_services \u2514\u2500 __docker_compose_q >> _docker_compose_start(): function _docker_compose_start() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services --filter status=stopped ;; esac } Function Calls: \u2514\u2500 _docker_compose_start \u2514\u2500 __docker_compose_complete_services \u2514\u2500 __docker_compose_services >> _docker_compose_stop(): function _docker_compose_stop() { case \"$prev\" in --timeout|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --timeout -t\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_running_services ;; esac } >> _docker_compose_top(): function _docker_compose_top() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_running_services ;; esac } >> _docker_compose_unpause(): function _docker_compose_unpause() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services --filter status=paused ;; esac } Function Calls: \u2514\u2500 _docker_compose_unpause \u2514\u2500 __docker_compose_complete_services \u2514\u2500 __docker_compose_services >> _docker_compose_up(): function _docker_compose_up() { case \"$prev\" in =) COMPREPLY=(\"$cur\") return ;; --exit-code-from) __docker_compose_complete_services return ;; --scale) COMPREPLY=( $(compgen -S \"=\" -W \"$(__docker_compose_services)\" -- \"$cur\") ) __docker_compose_nospace return ;; --timeout|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--abort-on-container-exit --always-recreate-deps --build -d --detach --exit-code-from --force-recreate --help --no-build --no-color --no-deps --no-recreate --no-start --renew-anon-volumes -V --remove-orphans --scale --timeout -t\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac } Function Calls: \u2514\u2500 _docker_compose_up \u2514\u2500 __docker_compose_services \u2514\u2500 __docker_compose_q >> _docker_compose_version(): function _docker_compose_version() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--short\" -- \"$cur\" ) ) ;; esac } >> _docker_compose(): function _docker_compose() { local previous_extglob_setting=$(shopt -p extglob) shopt -s extglob local commands=( build bundle config create down events exec help images kill logs pause port ps pull push restart rm run scale start stop top unpause up version ) local daemon_boolean_options=\" --skip-hostname-check --tls --tlsverify \" local daemon_options_with_args=\" --file -f --host -H --project-directory --project-name -p --tlscacert --tlscert --tlskey \" local top_level_options_with_args=\" --log-level \" COMPREPLY=() local cur prev words cword _get_comp_words_by_ref -n : cur prev words cword local command='docker_compose' local top_level_options=() local counter=1 while [ $counter -lt $cword ]; do case \"${words[$counter]}\" in $(__docker_compose_to_extglob \"$daemon_boolean_options\") ) local opt=${words[counter]} top_level_options+=($opt) ;; $(__docker_compose_to_extglob \"$daemon_options_with_args\") ) local opt=${words[counter]} local arg=${words[++counter]} top_level_options+=($opt $arg) ;; $(__docker_compose_to_extglob \"$top_level_options_with_args\") ) (( counter++ )) ;; -*) ;; *) command=\"${words[$counter]}\" break ;; esac (( counter++ )) done local completions_func=_docker_compose_${command//-/_} declare -F $completions_func >/dev/null && $completions_func eval \"$previous_extglob_setting\" return 0 } eval \"$__docker_compose_previous_extglob_setting\" unset __docker_compose_previous_extglob_setting complete -F _docker_compose docker-compose docker-compose.exe Function Calls: \u2514\u2500 _docker_compose \u2514\u2500 __docker_compose_to_extglob \u2514\u2500 __docker_compose_to_alternatives","title":"docker-compose_completion"},{"location":"completion/docker-compose_completion/#docker-compose-completions","text":"(in /home/bsgt/sys_bashrc/completions/docker-compose_completion.sh)","title":"docker-compose Completions"},{"location":"completion/docker-compose_completion/#function-index","text":"01 - __docker_compose_q 02 - __docker_compose_to_alternatives 03 - __docker_compose_to_extglob 04 - __docker_compose_has_option 05 - __docker_compose_map_key_of_current_option 06 - __docker_compose_nospace 07 - __docker_compose_services 08 - __docker_compose_complete_services 09 - __docker_compose_complete_running_services 10 - _docker_compose_build 11 - _docker_compose_bundle 12 - _docker_compose_config 13 - _docker_compose_create 14 - _docker_compose_docker_compose 15 - _docker_compose_down 16 - _docker_compose_events 17 - _docker_compose_exec 18 - _docker_compose_help 19 - _docker_compose_images 20 - _docker_compose_kill 21 - _docker_compose_logs 22 - _docker_compose_pause 23 - _docker_compose_port 24 - _docker_compose_ps 25 - _docker_compose_pull 26 - _docker_compose_push 27 - _docker_compose_restart 28 - _docker_compose_rm 29 - _docker_compose_run 30 - _docker_compose_scale 31 - _docker_compose_start 32 - _docker_compose_stop 33 - _docker_compose_top 34 - _docker_compose_unpause 35 - _docker_compose_up 36 - _docker_compose_version 37 - _docker_compose","title":"Function Index"},{"location":"completion/docker-compose_completion/#__docker_compose_q","text":"function __docker_compose_q() { docker-compose 2>/dev/null \"${top_level_options[@]}\" \"$@\" }","title":"&gt;&gt; __docker_compose_q():"},{"location":"completion/docker-compose_completion/#__docker_compose_to_alternatives","text":"function __docker_compose_to_alternatives() { local parts=( $1 ) local IFS='|' echo \"${parts[*]}\" }","title":"&gt;&gt; __docker_compose_to_alternatives():"},{"location":"completion/docker-compose_completion/#__docker_compose_to_extglob","text":"function __docker_compose_to_extglob() { local extglob=$( __docker_compose_to_alternatives \"$1\" ) echo \"@($extglob)\" }","title":"&gt;&gt; __docker_compose_to_extglob():"},{"location":"completion/docker-compose_completion/#function-calls","text":"\u2514\u2500 __docker_compose_to_extglob \u2514\u2500 __docker_compose_to_alternatives","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#__docker_compose_has_option","text":"function __docker_compose_has_option() { local pattern=\"$1\" for (( i=2; i < $cword; ++i)); do if [[ ${words[$i]} =~ ^($pattern)$ ]] ; then return 0 fi done return 1 }","title":"&gt;&gt; __docker_compose_has_option():"},{"location":"completion/docker-compose_completion/#__docker_compose_map_key_of_current_option","text":"function __docker_compose_map_key_of_current_option() { local glob=\"$1\" local key glob_pos if [ \"$cur\" = \"=\" ] ; then # key= case key=\"$prev\" glob_pos=$((cword - 2)) elif [[ $cur == *=* ]] ; then # key=value case (OSX) key=${cur%=*} glob_pos=$((cword - 1)) elif [ \"$prev\" = \"=\" ] ; then key=${words[$cword - 2]} # key=value case glob_pos=$((cword - 3)) else return fi [ \"${words[$glob_pos]}\" = \"=\" ] && ((glob_pos--)) # --option=key=value syntax [[ ${words[$glob_pos]} == @($glob) ]] && echo \"$key\" }","title":"&gt;&gt; __docker_compose_map_key_of_current_option():"},{"location":"completion/docker-compose_completion/#__docker_compose_nospace","text":"function __docker_compose_nospace() { type compopt &>/dev/null && compopt -o nospace }","title":"&gt;&gt; __docker_compose_nospace():"},{"location":"completion/docker-compose_completion/#__docker_compose_services","text":"function __docker_compose_services() { __docker_compose_q ps --services \"$@\" }","title":"&gt;&gt; __docker_compose_services():"},{"location":"completion/docker-compose_completion/#function-calls_1","text":"\u2514\u2500 __docker_compose_services \u2514\u2500 __docker_compose_q","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#__docker_compose_complete_services","text":"function __docker_compose_complete_services() { COMPREPLY=( $(compgen -W \"$(__docker_compose_services \"$@\")\" -- \"$cur\") ) }","title":"&gt;&gt; __docker_compose_complete_services():"},{"location":"completion/docker-compose_completion/#function-calls_2","text":"\u2514\u2500 __docker_compose_complete_services \u2514\u2500 __docker_compose_services \u2514\u2500 __docker_compose_q","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#__docker_compose_complete_running_services","text":"function __docker_compose_complete_running_services() { local names=$(__docker_compose_services --filter status=running) COMPREPLY=( $(compgen -W \"$names\" -- \"$cur\") ) }","title":"&gt;&gt; __docker_compose_complete_running_services():"},{"location":"completion/docker-compose_completion/#function-calls_3","text":"\u2514\u2500 __docker_compose_complete_running_services \u2514\u2500 __docker_compose_services \u2514\u2500 __docker_compose_q","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#_docker_compose_build","text":"function _docker_compose_build() { case \"$prev\" in --build-arg) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) __docker_compose_nospace return ;; --memory|-m) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--build-arg --compress --force-rm --help --memory -m --no-cache --no-rm --pull --parallel -q --quiet\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services --filter source=build ;; esac }","title":"&gt;&gt; _docker_compose_build():"},{"location":"completion/docker-compose_completion/#function-calls_4","text":"\u2514\u2500 _docker_compose_build \u2514\u2500 __docker_compose_complete_services \u2514\u2500 __docker_compose_services","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#_docker_compose_bundle","text":"function _docker_compose_bundle() { case \"$prev\" in --output|-o) _filedir return ;; esac COMPREPLY=( $( compgen -W \"--push-images --help --output -o\" -- \"$cur\" ) ) }","title":"&gt;&gt; _docker_compose_bundle():"},{"location":"completion/docker-compose_completion/#_docker_compose_config","text":"function _docker_compose_config() { case \"$prev\" in --hash) if [[ $cur == \\\\* ]] ; then COMPREPLY=( '\\*' ) else COMPREPLY=( $(compgen -W \"$(__docker_compose_services) \\\\\\* \" -- \"$cur\") ) fi return ;; esac COMPREPLY=( $( compgen -W \"--hash --help --quiet -q --resolve-image-digests --services --volumes\" -- \"$cur\" ) ) }","title":"&gt;&gt; _docker_compose_config():"},{"location":"completion/docker-compose_completion/#function-calls_5","text":"\u2514\u2500 _docker_compose_config \u2514\u2500 __docker_compose_services \u2514\u2500 __docker_compose_q","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#_docker_compose_create","text":"function _docker_compose_create() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--build --force-recreate --help --no-build --no-recreate\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac }","title":"&gt;&gt; _docker_compose_create():"},{"location":"completion/docker-compose_completion/#_docker_compose_docker_compose","text":"function _docker_compose_docker_compose() { case \"$prev\" in --tlscacert|--tlscert|--tlskey) _filedir return ;; --file|-f) _filedir \"y?(a)ml\" return ;; --log-level) COMPREPLY=( $( compgen -W \"debug info warning error critical\" -- \"$cur\" ) ) return ;; --project-directory) _filedir -d return ;; $(__docker_compose_to_extglob \"$daemon_options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$daemon_boolean_options $daemon_options_with_args $top_level_options_with_args --help -h --no-ansi --verbose --version -v\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"${commands[*]}\" -- \"$cur\" ) ) ;; esac }","title":"&gt;&gt; _docker_compose_docker_compose():"},{"location":"completion/docker-compose_completion/#function-calls_6","text":"\u2514\u2500 _docker_compose_docker_compose \u2514\u2500 __docker_compose_to_extglob \u2514\u2500 __docker_compose_to_alternatives","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#_docker_compose_down","text":"function _docker_compose_down() { case \"$prev\" in --rmi) COMPREPLY=( $( compgen -W \"all local\" -- \"$cur\" ) ) return ;; --timeout|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --rmi --timeout -t --volumes -v --remove-orphans\" -- \"$cur\" ) ) ;; esac }","title":"&gt;&gt; _docker_compose_down():"},{"location":"completion/docker-compose_completion/#_docker_compose_events","text":"function _docker_compose_events() { case \"$prev\" in --json) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --json\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac }","title":"&gt;&gt; _docker_compose_events():"},{"location":"completion/docker-compose_completion/#_docker_compose_exec","text":"function _docker_compose_exec() { case \"$prev\" in --index|--user|-u|--workdir|-w) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"-d --detach --help --index --privileged -T --user -u --workdir -w\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_running_services ;; esac }","title":"&gt;&gt; _docker_compose_exec():"},{"location":"completion/docker-compose_completion/#_docker_compose_help","text":"function _docker_compose_help() { COMPREPLY=( $( compgen -W \"${commands[*]}\" -- \"$cur\" ) ) }","title":"&gt;&gt; _docker_compose_help():"},{"location":"completion/docker-compose_completion/#_docker_compose_images","text":"function _docker_compose_images() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --quiet -q\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac }","title":"&gt;&gt; _docker_compose_images():"},{"location":"completion/docker-compose_completion/#_docker_compose_kill","text":"function _docker_compose_kill() { case \"$prev\" in -s) COMPREPLY=( $( compgen -W \"SIGHUP SIGINT SIGKILL SIGUSR1 SIGUSR2\" -- \"$(echo $cur | tr '[:lower:]' '[:upper:]')\" ) ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help -s\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_running_services ;; esac }","title":"&gt;&gt; _docker_compose_kill():"},{"location":"completion/docker-compose_completion/#_docker_compose_logs","text":"function _docker_compose_logs() { case \"$prev\" in --tail) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--follow -f --help --no-color --tail --timestamps -t\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac }","title":"&gt;&gt; _docker_compose_logs():"},{"location":"completion/docker-compose_completion/#_docker_compose_pause","text":"function _docker_compose_pause() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_running_services ;; esac }","title":"&gt;&gt; _docker_compose_pause():"},{"location":"completion/docker-compose_completion/#_docker_compose_port","text":"function _docker_compose_port() { case \"$prev\" in --protocol) COMPREPLY=( $( compgen -W \"tcp udp\" -- \"$cur\" ) ) return; ;; --index) return; ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --index --protocol\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac }","title":"&gt;&gt; _docker_compose_port():"},{"location":"completion/docker-compose_completion/#_docker_compose_ps","text":"function _docker_compose_ps() { local key=$(__docker_compose_map_key_of_current_option '--filter') case \"$key\" in source) COMPREPLY=( $( compgen -W \"build image\" -- \"${cur##*=}\" ) ) return ;; status) COMPREPLY=( $( compgen -W \"paused restarting running stopped\" -- \"${cur##*=}\" ) ) return ;; esac case \"$prev\" in --filter) COMPREPLY=( $( compgen -W \"source status\" -S \"=\" -- \"$cur\" ) ) __docker_compose_nospace return; ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --filter --help --quiet -q --services\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac }","title":"&gt;&gt; _docker_compose_ps():"},{"location":"completion/docker-compose_completion/#function-calls_7","text":"\u2514\u2500 _docker_compose_ps \u2514\u2500 __docker_compose_map_key_of_current_option","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#_docker_compose_pull","text":"function _docker_compose_pull() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --ignore-pull-failures --include-deps --no-parallel --quiet -q\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services --filter source=image ;; esac }","title":"&gt;&gt; _docker_compose_pull():"},{"location":"completion/docker-compose_completion/#function-calls_8","text":"\u2514\u2500 _docker_compose_pull \u2514\u2500 __docker_compose_complete_services \u2514\u2500 __docker_compose_services","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#_docker_compose_push","text":"function _docker_compose_push() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --ignore-push-failures\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac }","title":"&gt;&gt; _docker_compose_push():"},{"location":"completion/docker-compose_completion/#_docker_compose_restart","text":"function _docker_compose_restart() { case \"$prev\" in --timeout|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --timeout -t\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_running_services ;; esac }","title":"&gt;&gt; _docker_compose_restart():"},{"location":"completion/docker-compose_completion/#_docker_compose_rm","text":"function _docker_compose_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help --stop -s -v\" -- \"$cur\" ) ) ;; *) if __docker_compose_has_option \"--stop|-s\" ; then __docker_compose_complete_services else __docker_compose_complete_services --filter status=stopped fi ;; esac }","title":"&gt;&gt; _docker_compose_rm():"},{"location":"completion/docker-compose_completion/#function-calls_9","text":"\u2514\u2500 _docker_compose_rm \u251c\u2500 __docker_compose_has_option \u2514\u2500 __docker_compose_complete_services \u2514\u2500 __docker_compose_services","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#_docker_compose_run","text":"function _docker_compose_run() { case \"$prev\" in -e) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) __docker_compose_nospace return ;; --entrypoint|--label|-l|--name|--user|-u|--volume|-v|--workdir|-w) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--detach -d --entrypoint -e --help --label -l --name --no-deps --publish -p --rm --service-ports -T --use-aliases --user -u --volume -v --workdir -w\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac }","title":"&gt;&gt; _docker_compose_run():"},{"location":"completion/docker-compose_completion/#_docker_compose_scale","text":"function _docker_compose_scale() { case \"$prev\" in =) COMPREPLY=(\"$cur\") return ;; --timeout|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --timeout -t\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $(compgen -S \"=\" -W \"$(__docker_compose_services)\" -- \"$cur\") ) __docker_compose_nospace ;; esac }","title":"&gt;&gt; _docker_compose_scale():"},{"location":"completion/docker-compose_completion/#function-calls_10","text":"\u2514\u2500 _docker_compose_scale \u2514\u2500 __docker_compose_services \u2514\u2500 __docker_compose_q","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#_docker_compose_start","text":"function _docker_compose_start() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services --filter status=stopped ;; esac }","title":"&gt;&gt; _docker_compose_start():"},{"location":"completion/docker-compose_completion/#function-calls_11","text":"\u2514\u2500 _docker_compose_start \u2514\u2500 __docker_compose_complete_services \u2514\u2500 __docker_compose_services","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#_docker_compose_stop","text":"function _docker_compose_stop() { case \"$prev\" in --timeout|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --timeout -t\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_running_services ;; esac }","title":"&gt;&gt; _docker_compose_stop():"},{"location":"completion/docker-compose_completion/#_docker_compose_top","text":"function _docker_compose_top() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_running_services ;; esac }","title":"&gt;&gt; _docker_compose_top():"},{"location":"completion/docker-compose_completion/#_docker_compose_unpause","text":"function _docker_compose_unpause() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services --filter status=paused ;; esac }","title":"&gt;&gt; _docker_compose_unpause():"},{"location":"completion/docker-compose_completion/#function-calls_12","text":"\u2514\u2500 _docker_compose_unpause \u2514\u2500 __docker_compose_complete_services \u2514\u2500 __docker_compose_services","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#_docker_compose_up","text":"function _docker_compose_up() { case \"$prev\" in =) COMPREPLY=(\"$cur\") return ;; --exit-code-from) __docker_compose_complete_services return ;; --scale) COMPREPLY=( $(compgen -S \"=\" -W \"$(__docker_compose_services)\" -- \"$cur\") ) __docker_compose_nospace return ;; --timeout|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--abort-on-container-exit --always-recreate-deps --build -d --detach --exit-code-from --force-recreate --help --no-build --no-color --no-deps --no-recreate --no-start --renew-anon-volumes -V --remove-orphans --scale --timeout -t\" -- \"$cur\" ) ) ;; *) __docker_compose_complete_services ;; esac }","title":"&gt;&gt; _docker_compose_up():"},{"location":"completion/docker-compose_completion/#function-calls_13","text":"\u2514\u2500 _docker_compose_up \u2514\u2500 __docker_compose_services \u2514\u2500 __docker_compose_q","title":"Function Calls:"},{"location":"completion/docker-compose_completion/#_docker_compose_version","text":"function _docker_compose_version() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--short\" -- \"$cur\" ) ) ;; esac }","title":"&gt;&gt; _docker_compose_version():"},{"location":"completion/docker-compose_completion/#_docker_compose","text":"function _docker_compose() { local previous_extglob_setting=$(shopt -p extglob) shopt -s extglob local commands=( build bundle config create down events exec help images kill logs pause port ps pull push restart rm run scale start stop top unpause up version ) local daemon_boolean_options=\" --skip-hostname-check --tls --tlsverify \" local daemon_options_with_args=\" --file -f --host -H --project-directory --project-name -p --tlscacert --tlscert --tlskey \" local top_level_options_with_args=\" --log-level \" COMPREPLY=() local cur prev words cword _get_comp_words_by_ref -n : cur prev words cword local command='docker_compose' local top_level_options=() local counter=1 while [ $counter -lt $cword ]; do case \"${words[$counter]}\" in $(__docker_compose_to_extglob \"$daemon_boolean_options\") ) local opt=${words[counter]} top_level_options+=($opt) ;; $(__docker_compose_to_extglob \"$daemon_options_with_args\") ) local opt=${words[counter]} local arg=${words[++counter]} top_level_options+=($opt $arg) ;; $(__docker_compose_to_extglob \"$top_level_options_with_args\") ) (( counter++ )) ;; -*) ;; *) command=\"${words[$counter]}\" break ;; esac (( counter++ )) done local completions_func=_docker_compose_${command//-/_} declare -F $completions_func >/dev/null && $completions_func eval \"$previous_extglob_setting\" return 0 } eval \"$__docker_compose_previous_extglob_setting\" unset __docker_compose_previous_extglob_setting complete -F _docker_compose docker-compose docker-compose.exe","title":"&gt;&gt; _docker_compose():"},{"location":"completion/docker-compose_completion/#function-calls_14","text":"\u2514\u2500 _docker_compose \u2514\u2500 __docker_compose_to_extglob \u2514\u2500 __docker_compose_to_alternatives","title":"Function Calls:"},{"location":"completion/docker_completion/","text":"Docker Completions (in /home/bsgt/sys_bashrc/completions/docker_completion.sh) Function Index 01 - __docker_q 02 - __docker_configs 03 - __docker_complete_configs 04 - __docker_containers 05 - __docker_complete_containers 06 - __docker_complete_containers_all 07 - __docker_complete_containers_removable 08 - __docker_complete_containers_running 09 - __docker_complete_containers_stoppable 10 - __docker_complete_containers_stopped 11 - __docker_complete_containers_unpauseable 12 - __docker_complete_container_names 13 - __docker_complete_container_ids 14 - __docker_contexts 15 - __docker_complete_contexts >> __docker_q(): function __docker_q() { docker ${host:+--host \"$host\"} ${config:+--config \"$config\"} ${context:+--context \"$context\"} 2>/dev/null \"$@\" } >> __docker_configs(): function __docker_configs() { local format if [ \"$1\" = \"--id\" ] ; then format='{{.ID}}' shift elif [ \"$1\" = \"--name\" ] ; then format='{{.Name}}' shift elif [ \"$DOCKER_COMPLETION_SHOW_CONFIG_IDS\" = yes ] ; then format='{{.ID}} {{.Name}}' else format='{{.Name}}' fi __docker_q config ls --format \"$format\" \"$@\" } Function Calls: \u2514\u2500 __docker_configs \u2514\u2500 __docker_q >> __docker_complete_configs(): function __docker_complete_configs() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_configs \"$@\")\" -- \"$current\") ) } Function Calls: \u2514\u2500 __docker_complete_configs \u2514\u2500 __docker_configs \u2514\u2500 __docker_q >> __docker_containers(): function __docker_containers() { local format if [ \"$1\" = \"--id\" ] ; then format='{{.ID}}' shift elif [ \"$1\" = \"--name\" ] ; then format='{{.Names}}' shift elif [ \"${DOCKER_COMPLETION_SHOW_CONTAINER_IDS}\" = yes ] ; then format='{{.ID}} {{.Names}}' else format='{{.Names}}' fi __docker_q ps --format \"$format\" \"$@\" } Function Calls: \u2514\u2500 __docker_containers \u2514\u2500 __docker_q >> __docker_complete_containers(): function __docker_complete_containers() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_containers \"$@\")\" -- \"$current\") ) } Function Calls: \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers \u2514\u2500 __docker_q >> __docker_complete_containers_all(): function __docker_complete_containers_all() { __docker_complete_containers \"$@\" --all } Function Calls: \u2514\u2500 __docker_complete_containers_all \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers >> __docker_complete_containers_removable(): function __docker_complete_containers_removable() { __docker_complete_containers \"$@\" --filter status=created --filter status=exited } Function Calls: \u2514\u2500 __docker_complete_containers_removable \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers >> __docker_complete_containers_running(): function __docker_complete_containers_running() { __docker_complete_containers \"$@\" --filter status=running } Function Calls: \u2514\u2500 __docker_complete_containers_running \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers >> __docker_complete_containers_stoppable(): function __docker_complete_containers_stoppable() { __docker_complete_containers \"$@\" --filter status=running --filter status=paused } Function Calls: \u2514\u2500 __docker_complete_containers_stoppable \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers >> __docker_complete_containers_stopped(): function __docker_complete_containers_stopped() { __docker_complete_containers \"$@\" --filter status=exited } Function Calls: \u2514\u2500 __docker_complete_containers_stopped \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers >> __docker_complete_containers_unpauseable(): function __docker_complete_containers_unpauseable() { __docker_complete_containers \"$@\" --filter status=paused } Function Calls: \u2514\u2500 __docker_complete_containers_unpauseable \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers >> __docker_complete_container_names(): function __docker_complete_container_names() { local containers=( $(__docker_q ps -aq --no-trunc) ) local names=( $(__docker_q inspect --format '{{.Name}}' \"${containers[@]}\") ) names=( \"${names[@]#/}\" ) # trim off the leading \"/\" from the container names COMPREPLY=( $(compgen -W \"${names[*]}\" -- \"$cur\") ) } Function Calls: \u2514\u2500 __docker_complete_container_names \u2514\u2500 __docker_q >> __docker_complete_container_ids(): function __docker_complete_container_ids() { local containers=( $(__docker_q ps -aq) ) COMPREPLY=( $(compgen -W \"${containers[*]}\" -- \"$cur\") ) } Function Calls: \u2514\u2500 __docker_complete_container_ids \u2514\u2500 __docker_q >> __docker_contexts(): function __docker_contexts() { local add=() while true ; do case \"$1\" in --add) add+=(\"$2\") shift 2 ;; *) break ;; esac done __docker_q context ls -q echo \"${add[@]}\" } Function Calls: \u2514\u2500 __docker_contexts \u2514\u2500 __docker_q >> __docker_complete_contexts(): function __docker_complete_contexts() { local contexts=( $(__docker_contexts \"$@\") ) COMPREPLY=( $(compgen -W \"${contexts[*]}\" -- \"$cur\") ) } __docker_images() { local repo_format='{{.Repository}}' local tag_format='{{.Repository}}:{{.Tag}}' local id_format='{{.ID}}' local all local format if [ \"$DOCKER_COMPLETION_SHOW_IMAGE_IDS\" = \"all\" ] ; then all='--all' fi while true ; do case \"$1\" in --repo) format+=\"$repo_format\\n\" shift ;; --tag) if [ \"${DOCKER_COMPLETION_SHOW_TAGS:-yes}\" = \"yes\" ]; then format+=\"$tag_format\\n\" fi shift ;; --id) if [[ $DOCKER_COMPLETION_SHOW_IMAGE_IDS =~ ^(all|non-intermediate)$ ]] ; then format+=\"$id_format\\n\" fi shift ;; --force-tag) format+=\"$tag_format\\n\" shift ;; *) break ;; esac done __docker_q image ls --no-trunc --format \"${format%\\\\n}\" $all \"$@\" | grep -v '<none>$' } __docker_complete_images() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_images \"$@\")\" -- \"$current\") ) __ltrim_colon_completions \"$current\" } __docker_networks() { local format if [ \"$1\" = \"--id\" ] ; then format='{{.ID}}' shift elif [ \"$1\" = \"--name\" ] ; then format='{{.Name}}' shift elif [ \"${DOCKER_COMPLETION_SHOW_NETWORK_IDS}\" = yes ] ; then format='{{.ID}} {{.Name}}' else format='{{.Name}}' fi __docker_q network ls --format \"$format\" \"$@\" } __docker_complete_networks() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_networks \"$@\")\" -- \"$current\") ) } __docker_complete_containers_in_network() { local containers=($(__docker_q network inspect -f '{{range $i, $c := .Containers}}{{$i}} {{$c.Name}} {{end}}' \"$1\")) COMPREPLY=( $(compgen -W \"${containers[*]}\" -- \"$cur\") ) } __docker_volumes() { __docker_q volume ls -q \"$@\" } __docker_complete_volumes() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_volumes \"$@\")\" -- \"$current\") ) } __docker_plugins_bundled() { local type add=() remove=() while true ; do case \"$1\" in --type) type=\"$2\" shift 2 ;; --add) add+=(\"$2\") shift 2 ;; --remove) remove+=(\"$2\") shift 2 ;; *) break ;; esac done local plugins=($(__docker_q info --format \"{{range \\$i, \\$p := .Plugins.$type}}{{.}} {{end}}\")) for del in \"${remove[@]}\" ; do plugins=(${plugins[@]/$del/}) done echo \"${plugins[@]}\" \"${add[@]}\" } __docker_complete_plugins_bundled() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_plugins_bundled \"$@\")\" -- \"$current\") ) } __docker_plugins_installed() { local format if [ \"$DOCKER_COMPLETION_SHOW_PLUGIN_IDS\" = yes ] ; then format='{{.ID}} {{.Name}}' else format='{{.Name}}' fi __docker_q plugin ls --format \"$format\" \"$@\" } __docker_complete_plugins_installed() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_plugins_installed \"$@\")\" -- \"$current\") ) } __docker_runtimes() { __docker_q info | sed -n 's/^Runtimes: \\(.*\\)/\\1/p' } __docker_complete_runtimes() { COMPREPLY=( $(compgen -W \"$(__docker_runtimes)\" -- \"$cur\") ) } __docker_secrets() { local format if [ \"$1\" = \"--id\" ] ; then format='{{.ID}}' shift elif [ \"$1\" = \"--name\" ] ; then format='{{.Name}}' shift elif [ \"$DOCKER_COMPLETION_SHOW_SECRET_IDS\" = yes ] ; then format='{{.ID}} {{.Name}}' else format='{{.Name}}' fi __docker_q secret ls --format \"$format\" \"$@\" } __docker_complete_secrets() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_secrets \"$@\")\" -- \"$current\") ) } __docker_stacks() { __docker_q stack ls | awk 'NR>1 {print $1}' } __docker_complete_stacks() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_stacks \"$@\")\" -- \"$current\") ) } __docker_nodes() { local format if [ \"$DOCKER_COMPLETION_SHOW_NODE_IDS\" = yes ] ; then format='{{.ID}} {{.Hostname}}' else format='{{.Hostname}}' fi local add=() while true ; do case \"$1\" in --id) format='{{.ID}}' shift ;; --name) format='{{.Hostname}}' shift ;; --add) add+=(\"$2\") shift 2 ;; *) break ;; esac done echo \"$(__docker_q node ls --format \"$format\" \"$@\")\" \"${add[@]}\" } __docker_complete_nodes() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_nodes \"$@\")\" -- \"$current\") ) } __docker_services() { local fields='$2' # default: service name only [ \"${DOCKER_COMPLETION_SHOW_SERVICE_IDS}\" = yes ] && fields='$1,$2' # ID & name if [ \"$1\" = \"--id\" ] ; then fields='$1' # IDs only shift elif [ \"$1\" = \"--name\" ] ; then fields='$2' # names only shift fi __docker_q service ls \"$@\" | awk \"NR>1 {print $fields}\" } __docker_complete_services() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_services \"$@\")\" -- \"$current\") ) } __docker_tasks() { __docker_q service ps --format '{{.ID}}' \"\" } __docker_complete_services_and_tasks() { COMPREPLY=( $(compgen -W \"$(__docker_services \"$@\") $(__docker_tasks)\" -- \"$cur\") ) } __docker_append_to_completions() { COMPREPLY=( ${COMPREPLY[@]/%/\"$1\"} ) } __docker_fetch_info() { if [ -z \"$info_fetched\" ] ; then read -r client_experimental server_experimental server_os <<< \"$(__docker_q version -f '{{.Client.Experimental}} {{.Server.Experimental}} {{.Server.Os}}')\" info_fetched=true fi } __docker_client_is_experimental() { __docker_fetch_info [ \"$client_experimental\" = \"true\" ] } __docker_server_is_experimental() { __docker_fetch_info [ \"$server_experimental\" = \"true\" ] } __docker_server_os_is() { local expected_os=\"$1\" __docker_fetch_info [ \"$server_os\" = \"$expected_os\" ] } __docker_stack_orchestrator_is() { case \"$1\" in kubernetes) if [ -z \"$stack_orchestrator_is_kubernetes\" ] ; then __docker_q stack ls --help | grep -qe --namespace stack_orchestrator_is_kubernetes=$? fi return $stack_orchestrator_is_kubernetes ;; swarm) if [ -z \"$stack_orchestrator_is_swarm\" ] ; then __docker_q stack deploy --help | grep -qe \"with-registry-auth\" stack_orchestrator_is_swarm=$? fi return $stack_orchestrator_is_swarm ;; *) return 1 ;; esac } __docker_pos_first_nonflag() { local argument_flags=$1 local counter=$((${subcommand_pos:-${command_pos}} + 1)) while [ \"$counter\" -le \"$cword\" ]; do if [ -n \"$argument_flags\" ] && eval \"case '${words[$counter]}' in $argument_flags) true ;; *) false ;; esac\"; then (( counter++ )) [ \"${words[$counter]}\" = \"=\" ] && (( counter++ )) else case \"${words[$counter]}\" in -*) ;; *) break ;; esac fi while [ \"${words[$counter + 1]}\" = \"=\" ] ; do counter=$(( counter + 2)) done (( counter++ )) done echo $counter } __docker_map_key_of_current_option() { local glob=\"$1\" local key glob_pos if [ \"$cur\" = \"=\" ] ; then # key= case key=\"$prev\" glob_pos=$((cword - 2)) elif [[ $cur == *=* ]] ; then # key=value case (OSX) key=${cur%=*} glob_pos=$((cword - 1)) elif [ \"$prev\" = \"=\" ] ; then key=${words[$cword - 2]} # key=value case glob_pos=$((cword - 3)) else return fi [ \"${words[$glob_pos]}\" = \"=\" ] && ((glob_pos--)) # --option=key=value syntax [[ ${words[$glob_pos]} == @($glob) ]] && echo \"$key\" } __docker_value_of_option() { local option_extglob=$(__docker_to_extglob \"$1\") local counter=$((command_pos + 1)) while [ \"$counter\" -lt \"$cword\" ]; do case ${words[$counter]} in $option_extglob ) echo \"${words[$counter + 1]}\" break ;; esac (( counter++ )) done } __docker_to_alternatives() { local parts=( $1 ) local IFS='|' echo \"${parts[*]}\" } __docker_to_extglob() { local extglob=$( __docker_to_alternatives \"$1\" ) echo \"@($extglob)\" } __docker_subcommands() { local subcommands=\"$1\" local counter=$((command_pos + 1)) while [ \"$counter\" -lt \"$cword\" ]; do case \"${words[$counter]}\" in $(__docker_to_extglob \"$subcommands\") ) subcommand_pos=$counter local subcommand=${words[$counter]} local completions_func=_docker_${command}_${subcommand//-/_} declare -F \"$completions_func\" >/dev/null && \"$completions_func\" return 0 ;; esac (( counter++ )) done return 1 } __docker_nospace() { type compopt &>/dev/null && compopt -o nospace } __docker_complete_resolved_hostname() { command -v host >/dev/null 2>&1 || return COMPREPLY=( $(host 2>/dev/null \"${cur%:}\" | awk '/has address/ {print $4}') ) } __docker_local_interfaces() { command -v ip >/dev/null 2>&1 || return local format if [ \"$1\" = \"--ip-only\" ] ; then format='\\1' shift else format='\\1 \\2' fi ip addr show scope global 2>/dev/null | sed -n \"s| \\+inet \\([0-9.]\\+\\).* \\([^ ]\\+\\)|$format|p\" } __docker_complete_local_interfaces() { local additional_interface if [ \"$1\" = \"--add\" ] ; then additional_interface=\"$2\" shift 2 fi COMPREPLY=( $( compgen -W \"$(__docker_local_interfaces \"$@\") $additional_interface\" -- \"$cur\" ) ) } __docker_complete_local_ips() { __docker_complete_local_interfaces --ip-only } __docker_complete_capabilities_addable() { COMPREPLY=( $( compgen -W \" ALL AUDIT_CONTROL BLOCK_SUSPEND DAC_READ_SEARCH IPC_LOCK IPC_OWNER LEASE LINUX_IMMUTABLE MAC_ADMIN MAC_OVERRIDE NET_ADMIN NET_BROADCAST SYS_ADMIN SYS_BOOT SYSLOG SYS_MODULE SYS_NICE SYS_PACCT SYS_PTRACE SYS_RAWIO SYS_RESOURCE SYS_TIME SYS_TTY_CONFIG WAKE_ALARM \" -- \"$cur\" ) ) } __docker_complete_capabilities_droppable() { COMPREPLY=( $( compgen -W \" ALL AUDIT_WRITE CHOWN DAC_OVERRIDE FOWNER FSETID KILL MKNOD NET_BIND_SERVICE NET_RAW SETFCAP SETGID SETPCAP SETUID SYS_CHROOT \" -- \"$cur\" ) ) } __docker_complete_detach_keys() { case \"$prev\" in --detach-keys) case \"$cur\" in *,) COMPREPLY=( $( compgen -W \"${cur}ctrl-\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"ctrl-\" -- \"$cur\" ) ) ;; esac __docker_nospace return ;; esac return 1 } __docker_complete_isolation() { COMPREPLY=( $( compgen -W \"default hyperv process\" -- \"$cur\" ) ) } __docker_complete_log_drivers() { COMPREPLY=( $( compgen -W \" awslogs etwlogs fluentd gcplogs gelf journald json-file local logentries none splunk syslog \" -- \"$cur\" ) ) } __docker_complete_log_options() { local common_options1=\"max-buffer-size mode\" local common_options2=\"env env-regex labels\" local awslogs_options=\"$common_options1 awslogs-create-group awslogs-credentials-endpoint awslogs-datetime-format awslogs-group awslogs-multiline-pattern awslogs-region awslogs-stream tag\" local fluentd_options=\"$common_options1 $common_options2 fluentd-address fluentd-async-connect fluentd-buffer-limit fluentd-retry-wait fluentd-max-retries fluentd-sub-second-precision tag\" local gcplogs_options=\"$common_options1 $common_options2 gcp-log-cmd gcp-meta-id gcp-meta-name gcp-meta-zone gcp-project\" local gelf_options=\"$common_options1 $common_options2 gelf-address gelf-compression-level gelf-compression-type gelf-tcp-max-reconnect gelf-tcp-reconnect-delay tag\" local journald_options=\"$common_options1 $common_options2 tag\" local json_file_options=\"$common_options1 $common_options2 compress max-file max-size\" local local_options=\"$common_options1 compress max-file max-size\" local logentries_options=\"$common_options1 $common_options2 line-only logentries-token tag\" local splunk_options=\"$common_options1 $common_options2 splunk-caname splunk-capath splunk-format splunk-gzip splunk-gzip-level splunk-index splunk-insecureskipverify splunk-source splunk-sourcetype splunk-token splunk-url splunk-verify-connection tag\" local syslog_options=\"$common_options1 $common_options2 syslog-address syslog-facility syslog-format syslog-tls-ca-cert syslog-tls-cert syslog-tls-key syslog-tls-skip-verify tag\" local all_options=\"$fluentd_options $gcplogs_options $gelf_options $journald_options $logentries_options $json_file_options $syslog_options $splunk_options\" case $(__docker_value_of_option --log-driver) in '') COMPREPLY=( $( compgen -W \"$all_options\" -S = -- \"$cur\" ) ) ;; awslogs) COMPREPLY=( $( compgen -W \"$awslogs_options\" -S = -- \"$cur\" ) ) ;; fluentd) COMPREPLY=( $( compgen -W \"$fluentd_options\" -S = -- \"$cur\" ) ) ;; gcplogs) COMPREPLY=( $( compgen -W \"$gcplogs_options\" -S = -- \"$cur\" ) ) ;; gelf) COMPREPLY=( $( compgen -W \"$gelf_options\" -S = -- \"$cur\" ) ) ;; journald) COMPREPLY=( $( compgen -W \"$journald_options\" -S = -- \"$cur\" ) ) ;; json-file) COMPREPLY=( $( compgen -W \"$json_file_options\" -S = -- \"$cur\" ) ) ;; local) COMPREPLY=( $( compgen -W \"$local_options\" -S = -- \"$cur\" ) ) ;; logentries) COMPREPLY=( $( compgen -W \"$logentries_options\" -S = -- \"$cur\" ) ) ;; syslog) COMPREPLY=( $( compgen -W \"$syslog_options\" -S = -- \"$cur\" ) ) ;; splunk) COMPREPLY=( $( compgen -W \"$splunk_options\" -S = -- \"$cur\" ) ) ;; *) return ;; esac __docker_nospace } __docker_complete_log_driver_options() { local key=$(__docker_map_key_of_current_option '--log-opt') case \"$key\" in awslogs-create-group) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; awslogs-credentials-endpoint) COMPREPLY=( $( compgen -W \"/\" -- \"${cur##*=}\" ) ) __docker_nospace return ;; compress|fluentd-async-connect) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; fluentd-sub-second-precision) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; gelf-address) COMPREPLY=( $( compgen -W \"tcp udp\" -S \"://\" -- \"${cur##*=}\" ) ) __docker_nospace return ;; gelf-compression-level) COMPREPLY=( $( compgen -W \"1 2 3 4 5 6 7 8 9\" -- \"${cur##*=}\" ) ) return ;; gelf-compression-type) COMPREPLY=( $( compgen -W \"gzip none zlib\" -- \"${cur##*=}\" ) ) return ;; line-only) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; mode) COMPREPLY=( $( compgen -W \"blocking non-blocking\" -- \"${cur##*=}\" ) ) return ;; syslog-address) COMPREPLY=( $( compgen -W \"tcp:// tcp+tls:// udp:// unix://\" -- \"${cur##*=}\" ) ) __docker_nospace __ltrim_colon_completions \"${cur}\" return ;; syslog-facility) COMPREPLY=( $( compgen -W \" auth authpriv cron daemon ftp kern local0 local1 local2 local3 local4 local5 local6 local7 lpr mail news syslog user uucp \" -- \"${cur##*=}\" ) ) return ;; syslog-format) COMPREPLY=( $( compgen -W \"rfc3164 rfc5424 rfc5424micro\" -- \"${cur##*=}\" ) ) return ;; syslog-tls-ca-cert|syslog-tls-cert|syslog-tls-key) _filedir return ;; syslog-tls-skip-verify) COMPREPLY=( $( compgen -W \"true\" -- \"${cur##*=}\" ) ) return ;; splunk-url) COMPREPLY=( $( compgen -W \"http:// https://\" -- \"${cur##*=}\" ) ) __docker_nospace __ltrim_colon_completions \"${cur}\" return ;; splunk-gzip|splunk-insecureskipverify|splunk-verify-connection) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; splunk-format) COMPREPLY=( $( compgen -W \"inline json raw\" -- \"${cur##*=}\" ) ) return ;; esac return 1 } __docker_complete_log_levels() { COMPREPLY=( $( compgen -W \"debug info warn error fatal\" -- \"$cur\" ) ) } __docker_complete_restart() { case \"$prev\" in --restart) case \"$cur\" in on-failure:*) ;; *) COMPREPLY=( $( compgen -W \"always no on-failure on-failure: unless-stopped\" -- \"$cur\") ) ;; esac return ;; esac return 1 } __docker_complete_signals() { local signals=( SIGCONT SIGHUP SIGINT SIGKILL SIGQUIT SIGSTOP SIGTERM SIGUSR1 SIGUSR2 ) COMPREPLY=( $( compgen -W \"${signals[*]} ${signals[*]#SIG}\" -- \"$( echo \"$cur\" | tr '[:lower:]' '[:upper:]')\" ) ) } __docker_complete_stack_orchestrator_options() { case \"$prev\" in --kubeconfig) _filedir return 0 ;; --namespace) return 0 ;; --orchestrator) COMPREPLY=( $( compgen -W \"all kubernetes swarm\" -- \"$cur\") ) return 0 ;; esac return 1 } __docker_complete_user_group() { if [[ $cur == *:* ]] ; then COMPREPLY=( $(compgen -g -- \"${cur#*:}\") ) else COMPREPLY=( $(compgen -u -S : -- \"$cur\") ) __docker_nospace fi } _docker_docker() { local boolean_options=\" $global_boolean_options --help --version -v \" case \"$prev\" in --config) _filedir -d return ;; --context|-c) __docker_complete_contexts return ;; --log-level|-l) __docker_complete_log_levels return ;; $(__docker_to_extglob \"$global_options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$boolean_options $global_options_with_args\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag \"$(__docker_to_extglob \"$global_options_with_args\")\" ) if [ \"$cword\" -eq \"$counter\" ]; then __docker_client_is_experimental && commands+=(${experimental_client_commands[*]}) __docker_server_is_experimental && commands+=(${experimental_server_commands[*]}) COMPREPLY=( $( compgen -W \"${commands[*]} help\" -- \"$cur\" ) ) fi ;; esac } _docker_attach() { _docker_container_attach } _docker_build() { _docker_image_build } _docker_builder() { local subcommands=\" prune \" __docker_subcommands \"$subcommands\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_builder_prune() { case \"$prev\" in --filter) COMPREPLY=( $( compgen -S = -W \"description id inuse parent private shared type until unused-for\" -- \"$cur\" ) ) __docker_nospace return ;; --keep-storage) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --filter --force -f --help --keep-storage\" -- \"$cur\" ) ) ;; esac } _docker_checkpoint() { local subcommands=\" create ls rm \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_checkpoint_create() { case \"$prev\" in --checkpoint-dir) _filedir -d return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--checkpoint-dir --help --leave-running\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--checkpoint-dir') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_running fi ;; esac } _docker_checkpoint_ls() { case \"$prev\" in --checkpoint-dir) _filedir -d return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--checkpoint-dir --help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--checkpoint-dir') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all fi ;; esac } _docker_checkpoint_rm() { case \"$prev\" in --checkpoint-dir) _filedir -d return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--checkpoint-dir --help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--checkpoint-dir') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then COMPREPLY=( $( compgen -W \"$(__docker_q checkpoint ls \"$prev\" | sed 1d)\" -- \"$cur\" ) ) fi ;; esac } _docker_config() { local subcommands=\" create inspect ls rm \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_config_create() { case \"$prev\" in --label|-l) return ;; --template-driver) COMPREPLY=( $( compgen -W \"golang\" -- \"$cur\" ) ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --label -l --template-driver\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--label|-l|--template-driver') if [ \"$cword\" -eq \"$((counter + 1))\" ]; then _filedir fi ;; esac } _docker_config_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help --pretty\" -- \"$cur\" ) ) ;; *) __docker_complete_configs ;; esac } _docker_config_list() { _docker_config_ls } _docker_config_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in id) __docker_complete_configs --cur \"${cur##*=}\" --id return ;; name) __docker_complete_configs --cur \"${cur##*=}\" --name return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"id label name\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format --filter -f --help --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_config_remove() { _docker_config_rm } _docker_config_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_configs ;; esac } _docker_container() { local subcommands=\" attach commit cp create diff exec export inspect kill logs ls pause port prune rename restart rm run start stats stop top unpause update wait \" local aliases=\" list ps \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_container_attach() { __docker_complete_detach_keys && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--detach-keys --help --no-stdin --sig-proxy=false\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--detach-keys') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_running fi ;; esac } _docker_container_commit() { case \"$prev\" in --author|-a|--change|-c|--message|-m) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--author -a --change -c --help --message -m --pause=false -p=false\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--author|-a|--change|-c|--message|-m') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all return elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_images --repo --tag return fi ;; esac } _docker_container_cp() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--archive -a --follow-link -L --help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then case \"$cur\" in *:) return ;; *) _filedir local files=( ${COMPREPLY[@]} ) __docker_complete_containers_all COMPREPLY=( $( compgen -W \"${COMPREPLY[*]}\" -S ':' ) ) local containers=( ${COMPREPLY[@]} ) COMPREPLY=( $( compgen -W \"${files[*]} ${containers[*]}\" -- \"$cur\" ) ) if [[ \"${COMPREPLY[*]}\" = *: ]]; then __docker_nospace fi return ;; esac fi (( counter++ )) if [ \"$cword\" -eq \"$counter\" ]; then if [ -e \"$prev\" ]; then __docker_complete_containers_all COMPREPLY=( $( compgen -W \"${COMPREPLY[*]}\" -S ':' ) ) __docker_nospace else _filedir fi return fi ;; esac } _docker_container_create() { _docker_container_run_and_create } _docker_container_diff() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all fi ;; esac } _docker_container_exec() { __docker_complete_detach_keys && return case \"$prev\" in --env|-e) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) __docker_nospace return ;; --user|-u) __docker_complete_user_group return ;; --workdir|-w) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--detach -d --detach-keys --env -e --help --interactive -i --privileged -t --tty -u --user --workdir -w\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_running ;; esac } _docker_container_export() { case \"$prev\" in --output|-o) _filedir return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --output -o\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all fi ;; esac } _docker_container_inspect() { _docker_inspect --type container } _docker_container_kill() { case \"$prev\" in --signal|-s) __docker_complete_signals return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --signal -s\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_running ;; esac } _docker_container_logs() { case \"$prev\" in --since|--tail|--until) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--details --follow -f --help --since --tail --timestamps -t --until\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--since|--tail|--until') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all fi ;; esac } _docker_container_list() { _docker_container_ls } _docker_container_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in ancestor) __docker_complete_images --cur \"${cur##*=}\" --repo --tag --id return ;; before) __docker_complete_containers_all --cur \"${cur##*=}\" return ;; expose|publish) return ;; id) __docker_complete_containers_all --cur \"${cur##*=}\" --id return ;; health) COMPREPLY=( $( compgen -W \"healthy starting none unhealthy\" -- \"${cur##*=}\" ) ) return ;; is-task) COMPREPLY=( $( compgen -W \"true false\" -- \"${cur##*=}\" ) ) return ;; name) __docker_complete_containers_all --cur \"${cur##*=}\" --name return ;; network) __docker_complete_networks --cur \"${cur##*=}\" return ;; since) __docker_complete_containers_all --cur \"${cur##*=}\" return ;; status) COMPREPLY=( $( compgen -W \"created dead exited paused restarting running removing\" -- \"${cur##*=}\" ) ) return ;; volume) __docker_complete_volumes --cur \"${cur##*=}\" return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"ancestor before exited expose health id is-task label name network publish since status volume\" -- \"$cur\" ) ) __docker_nospace return ;; --format|--last|-n) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --filter -f --format --help --last -n --latest -l --no-trunc --quiet -q --size -s\" -- \"$cur\" ) ) ;; esac } _docker_container_pause() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_running ;; esac } _docker_container_port() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all fi ;; esac } _docker_container_prune() { case \"$prev\" in --filter) COMPREPLY=( $( compgen -W \"label label! until\" -S = -- \"$cur\" ) ) __docker_nospace return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --filter --help\" -- \"$cur\" ) ) ;; esac } _docker_container_ps() { _docker_container_ls } _docker_container_rename() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all fi ;; esac } _docker_container_restart() { case \"$prev\" in --time|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --time -t\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_all ;; esac } _docker_container_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help --link -l --volumes -v\" -- \"$cur\" ) ) ;; *) for arg in \"${COMP_WORDS[@]}\"; do case \"$arg\" in --force|-f) __docker_complete_containers_all return ;; esac done __docker_complete_containers_removable ;; esac } _docker_container_run() { _docker_container_run_and_create } _docker_container_run_and_create() { local options_with_args=\" --add-host --attach -a --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-parent --cidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime --cpuset-cpus --cpus --cpuset-mems --cpu-shares -c --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --dns --dns-option --dns-search --domainname --entrypoint --env -e --env-file --expose --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout --hostname -h --ip --ip6 --ipc --kernel-memory --label-file --label -l --link --link-local-ip --log-driver --log-opt --mac-address --memory -m --memory-swap --memory-swappiness --memory-reservation --mount --name --network --network-alias --oom-score-adj --pid --pids-limit --publish -p --restart --runtime --security-opt --shm-size --stop-signal --stop-timeout --storage-opt --tmpfs --sysctl --ulimit --user -u --userns --uts --volume-driver --volumes-from --volume -v --workdir -w \" __docker_server_os_is windows && options_with_args+=\" --cpu-count --cpu-percent --io-maxbandwidth --io-maxiops --isolation \" __docker_server_is_experimental && options_with_args+=\" --platform \" local boolean_options=\" --disable-content-trust=false --help --init --interactive -i --no-healthcheck --oom-kill-disable --privileged --publish-all -P --read-only --tty -t \" if [ \"$command\" = \"run\" ] || [ \"$subcommand\" = \"run\" ] ; then options_with_args=\"$options_with_args --detach-keys \" boolean_options=\"$boolean_options --detach -d --rm --sig-proxy=false \" __docker_complete_detach_keys && return fi local all_options=\"$options_with_args $boolean_options\" __docker_complete_log_driver_options && return __docker_complete_restart && return local key=$(__docker_map_key_of_current_option '--security-opt') case \"$key\" in label) [[ $cur == *: ]] && return COMPREPLY=( $( compgen -W \"user: role: type: level: disable\" -- \"${cur##*=}\") ) if [ \"${COMPREPLY[*]}\" != \"disable\" ] ; then __docker_nospace fi return ;; seccomp) local cur=${cur##*=} _filedir COMPREPLY+=( $( compgen -W \"unconfined\" -- \"$cur\" ) ) return ;; esac case \"$prev\" in --add-host) case \"$cur\" in *:) __docker_complete_resolved_hostname return ;; esac ;; --attach|-a) COMPREPLY=( $( compgen -W 'stdin stdout stderr' -- \"$cur\" ) ) return ;; --cap-add) __docker_complete_capabilities_addable return ;; --cap-drop) __docker_complete_capabilities_droppable return ;; --cidfile|--env-file|--label-file) _filedir return ;; --device|--tmpfs|--volume|-v) case \"$cur\" in *:*) ;; '') COMPREPLY=( $( compgen -W '/' -- \"$cur\" ) ) __docker_nospace ;; /*) _filedir __docker_nospace ;; esac return ;; --env|-e) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) __docker_nospace return ;; --ipc) case \"$cur\" in *:*) cur=\"${cur#*:}\" __docker_complete_containers_running ;; *) COMPREPLY=( $( compgen -W 'none host private shareable container:' -- \"$cur\" ) ) if [ \"${COMPREPLY[*]}\" = \"container:\" ]; then __docker_nospace fi ;; esac return ;; --isolation) if __docker_server_os_is windows ; then __docker_complete_isolation return fi ;; --link) case \"$cur\" in *:*) ;; *) __docker_complete_containers_running COMPREPLY=( $( compgen -W \"${COMPREPLY[*]}\" -S ':' ) ) __docker_nospace ;; esac return ;; --log-driver) __docker_complete_log_drivers return ;; --log-opt) __docker_complete_log_options return ;; --network) case \"$cur\" in container:*) __docker_complete_containers_all --cur \"${cur#*:}\" ;; *) COMPREPLY=( $( compgen -W \"$(__docker_plugins_bundled --type Network) $(__docker_networks) container:\" -- \"$cur\") ) if [ \"${COMPREPLY[*]}\" = \"container:\" ] ; then __docker_nospace fi ;; esac return ;; --pid) case \"$cur\" in *:*) __docker_complete_containers_running --cur \"${cur#*:}\" ;; *) COMPREPLY=( $( compgen -W 'host container:' -- \"$cur\" ) ) if [ \"${COMPREPLY[*]}\" = \"container:\" ]; then __docker_nospace fi ;; esac return ;; --runtime) __docker_complete_runtimes return ;; --security-opt) COMPREPLY=( $( compgen -W \"apparmor= label= no-new-privileges seccomp=\" -- \"$cur\") ) if [ \"${COMPREPLY[*]}\" != \"no-new-privileges\" ] ; then __docker_nospace fi return ;; --stop-signal) __docker_complete_signals return ;; --storage-opt) COMPREPLY=( $( compgen -W \"size\" -S = -- \"$cur\") ) __docker_nospace return ;; --user|-u) __docker_complete_user_group return ;; --userns) COMPREPLY=( $( compgen -W \"host\" -- \"$cur\" ) ) return ;; --volume-driver) __docker_complete_plugins_bundled --type Volume return ;; --volumes-from) __docker_complete_containers_all return ;; $(__docker_to_extglob \"$options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$all_options\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag \"$( __docker_to_alternatives \"$options_with_args\" )\" ) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --repo --tag --id fi ;; esac } _docker_container_start() { __docker_complete_detach_keys && return case \"$prev\" in --checkpoint) if __docker_server_is_experimental ; then return fi ;; --checkpoint-dir) if __docker_server_is_experimental ; then _filedir -d return fi ;; esac case \"$cur\" in -*) local options=\"--attach -a --detach-keys --help --interactive -i\" __docker_server_is_experimental && options+=\" --checkpoint --checkpoint-dir\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_stopped ;; esac } _docker_container_stats() { case \"$prev\" in --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --format --help --no-stream --no-trunc\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_running ;; esac } _docker_container_stop() { case \"$prev\" in --time|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --time -t\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_stoppable ;; esac } _docker_container_top() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_running fi ;; esac } _docker_container_unpause() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_unpauseable fi ;; esac } _docker_container_update() { local options_with_args=\" --blkio-weight --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime --cpus --cpuset-cpus --cpuset-mems --cpu-shares -c --kernel-memory --memory -m --memory-reservation --memory-swap --pids-limit --restart \" local boolean_options=\" --help \" local all_options=\"$options_with_args $boolean_options\" __docker_complete_restart && return case \"$prev\" in $(__docker_to_extglob \"$options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$all_options\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_all ;; esac } _docker_container_wait() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_all ;; esac } _docker_context() { local subcommands=\" create export import inspect ls rm update use \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_context_create() { case \"$prev\" in --default-stack-orchestrator) COMPREPLY=( $( compgen -W \"all kubernetes swarm\" -- \"$cur\" ) ) return ;; --description|--docker|--kubernetes) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--default-stack-orchestrator --description --docker --help --kubernetes\" -- \"$cur\" ) ) ;; esac } _docker_context_export() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --kubeconfig\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_contexts elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then _filedir fi ;; esac } _docker_context_import() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then : elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then _filedir fi ;; esac } _docker_context_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_contexts ;; esac } _docker_context_list() { _docker_context_ls } _docker_context_ls() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_context_remove() { _docker_context_rm } _docker_context_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_contexts ;; esac } _docker_context_update() { case \"$prev\" in --default-stack-orchestrator) COMPREPLY=( $( compgen -W \"all kubernetes swarm\" -- \"$cur\" ) ) return ;; --description|--docker|--kubernetes) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--default-stack-orchestrator --description --docker --help --kubernetes\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_contexts fi ;; esac } _docker_context_use() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_contexts --add default fi ;; esac } _docker_commit() { _docker_container_commit } _docker_cp() { _docker_container_cp } _docker_create() { _docker_container_create } _docker_daemon() { local boolean_options=\" $global_boolean_options --experimental --help --icc=false --init --ip-forward=false --ip-masq=false --iptables=false --ipv6 --live-restore --no-new-privileges --raw-logs --selinux-enabled --userland-proxy=false --version -v \" local options_with_args=\" $global_options_with_args --add-runtime --allow-nondistributable-artifacts --api-cors-header --authorization-plugin --bip --bridge -b --cgroup-parent --cluster-advertise --cluster-store --cluster-store-opt --config-file --containerd --cpu-rt-period --cpu-rt-runtime --data-root --default-address-pool --default-gateway --default-gateway-v6 --default-runtime --default-shm-size --default-ulimit --dns --dns-search --dns-opt --exec-opt --exec-root --fixed-cidr --fixed-cidr-v6 --group -G --init-path --insecure-registry --ip --label --log-driver --log-opt --max-concurrent-downloads --max-concurrent-uploads --metrics-addr --mtu --network-control-plane-mtu --node-generic-resource --oom-score-adjust --pidfile -p --registry-mirror --seccomp-profile --shutdown-timeout --storage-driver -s --storage-opt --swarm-default-advertise-addr --userland-proxy-path --userns-remap \" __docker_complete_log_driver_options && return key=$(__docker_map_key_of_current_option '--cluster-store-opt') case \"$key\" in kv.*file) cur=${cur##*=} _filedir return ;; esac local key=$(__docker_map_key_of_current_option '--storage-opt') case \"$key\" in dm.blkdiscard|dm.override_udev_sync_check|dm.use_deferred_removal|dm.use_deferred_deletion) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; dm.directlvm_device|dm.thinpooldev) cur=${cur##*=} _filedir return ;; dm.fs) COMPREPLY=( $( compgen -W \"ext4 xfs\" -- \"${cur##*=}\" ) ) return ;; dm.libdm_log_level) COMPREPLY=( $( compgen -W \"2 3 4 5 6 7\" -- \"${cur##*=}\" ) ) return ;; esac case \"$prev\" in --authorization-plugin) __docker_complete_plugins_bundled --type Authorization return ;; --cluster-store) COMPREPLY=( $( compgen -W \"consul etcd zk\" -S \"://\" -- \"$cur\" ) ) __docker_nospace return ;; --cluster-store-opt) COMPREPLY=( $( compgen -W \"discovery.heartbeat discovery.ttl kv.cacertfile kv.certfile kv.keyfile kv.path\" -S = -- \"$cur\" ) ) __docker_nospace return ;; --config-file|--containerd|--init-path|--pidfile|-p|--tlscacert|--tlscert|--tlskey|--userland-proxy-path) _filedir return ;; --exec-root|--data-root) _filedir -d return ;; --log-driver) __docker_complete_log_drivers return ;; --storage-driver|-s) COMPREPLY=( $( compgen -W \"aufs btrfs devicemapper overlay overlay2 vfs zfs\" -- \"$(echo \"$cur\" | tr '[:upper:]' '[:lower:]')\" ) ) return ;; --storage-opt) local btrfs_options=\"btrfs.min_space\" local devicemapper_options=\" dm.basesize dm.blkdiscard dm.blocksize dm.directlvm_device dm.fs dm.libdm_log_level dm.loopdatasize dm.loopmetadatasize dm.min_free_space dm.mkfsarg dm.mountopt dm.override_udev_sync_check dm.thinpooldev dm.thinp_autoextend_percent dm.thinp_autoextend_threshold dm.thinp_metapercent dm.thinp_percent dm.use_deferred_deletion dm.use_deferred_removal \" local overlay2_options=\"overlay2.size\" local zfs_options=\"zfs.fsname\" local all_options=\"$btrfs_options $devicemapper_options $overlay2_options $zfs_options\" case $(__docker_value_of_option '--storage-driver|-s') in '') COMPREPLY=( $( compgen -W \"$all_options\" -S = -- \"$cur\" ) ) ;; btrfs) COMPREPLY=( $( compgen -W \"$btrfs_options\" -S = -- \"$cur\" ) ) ;; devicemapper) COMPREPLY=( $( compgen -W \"$devicemapper_options\" -S = -- \"$cur\" ) ) ;; overlay2) COMPREPLY=( $( compgen -W \"$overlay2_options\" -S = -- \"$cur\" ) ) ;; zfs) COMPREPLY=( $( compgen -W \"$zfs_options\" -S = -- \"$cur\" ) ) ;; *) return ;; esac __docker_nospace return ;; --log-level|-l) __docker_complete_log_levels return ;; --log-opt) __docker_complete_log_options return ;; --metrics-addr) __docker_complete_local_ips __docker_append_to_completions \":\" __docker_nospace return ;; --seccomp-profile) _filedir json return ;; --swarm-default-advertise-addr) __docker_complete_local_interfaces return ;; --userns-remap) __docker_complete_user_group return ;; $(__docker_to_extglob \"$options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$boolean_options $options_with_args\" -- \"$cur\" ) ) ;; esac } _docker_deploy() { __docker_server_is_experimental && _docker_stack_deploy } _docker_diff() { _docker_container_diff } _docker_engine() { local subcommands=\" activate check update \" __docker_subcommands \"$subcommands\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_engine_activate() { case \"$prev\" in --containerd|--engine-image|--format|--license|--registry-prefix|--version) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--containerd --display-only --engine-image --format --help --license --quiet --registry-prefix --version\" -- \"$cur\" ) ) ;; esac } _docker_engine_check() { case \"$prev\" in --containerd|--engine-image|--format|--registry-prefix) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--containerd --downgrades --engine-image --format --help --pre-releases --quiet -q --registry-prefix --upgrades\" -- \"$cur\" ) ) ;; esac } _docker_engine_update() { case \"$prev\" in --containerd|--engine-image|--registry-prefix|--version) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--containerd --engine-image --help --registry-prefix --version\" -- \"$cur\" ) ) ;; esac } _docker_events() { _docker_system_events } _docker_exec() { _docker_container_exec } _docker_export() { _docker_container_export } _docker_help() { local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then COMPREPLY=( $( compgen -W \"${commands[*]}\" -- \"$cur\" ) ) fi } _docker_history() { _docker_image_history } _docker_image() { local subcommands=\" build history import inspect load ls prune pull push rm save tag \" local aliases=\" images list remove rmi \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_image_build() { local options_with_args=\" --add-host --build-arg --cache-from --cgroup-parent --cpuset-cpus --cpuset-mems --cpu-shares -c --cpu-period --cpu-quota --file -f --iidfile --label --memory -m --memory-swap --network --shm-size --tag -t --target --ulimit \" __docker_server_os_is windows && options_with_args+=\" --isolation \" local boolean_options=\" --compress --disable-content-trust=false --force-rm --help --no-cache --pull --quiet -q --rm \" if __docker_server_is_experimental ; then options_with_args+=\" --platform \" boolean_options+=\" --squash --stream \" fi local all_options=\"$options_with_args $boolean_options\" case \"$prev\" in --add-host) case \"$cur\" in *:) __docker_complete_resolved_hostname return ;; esac ;; --build-arg) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) __docker_nospace return ;; --cache-from) __docker_complete_images --repo --tag --id return ;; --file|-f|--iidfile) _filedir return ;; --isolation) if __docker_server_os_is windows ; then __docker_complete_isolation return fi ;; --network) case \"$cur\" in container:*) __docker_complete_containers_all --cur \"${cur#*:}\" ;; *) COMPREPLY=( $( compgen -W \"$(__docker_plugins_bundled --type Network) $(__docker_networks) container:\" -- \"$cur\") ) if [ \"${COMPREPLY[*]}\" = \"container:\" ] ; then __docker_nospace fi ;; esac return ;; --tag|-t) __docker_complete_images --repo --tag return ;; --target) local context_pos=$( __docker_pos_first_nonflag \"$( __docker_to_alternatives \"$options_with_args\" )\" ) local context=\"${words[$context_pos]}\" context=\"${context:-.}\" local file=\"$( __docker_value_of_option '--file|f' )\" local default_file=\"${context%/}/Dockerfile\" local dockerfile=\"${file:-$default_file}\" local targets=\"$( sed -n 's/^FROM .\\+ AS \\(.\\+\\)/\\1/p' \"$dockerfile\" 2>/dev/null )\" COMPREPLY=( $( compgen -W \"$targets\" -- \"$cur\" ) ) return ;; $(__docker_to_extglob \"$options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$all_options\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag \"$( __docker_to_alternatives \"$options_with_args\" )\" ) if [ \"$cword\" -eq \"$counter\" ]; then _filedir -d fi ;; esac } _docker_image_history() { case \"$prev\" in --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format --help --human=false -H=false --no-trunc --quiet -q\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--format') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --force-tag --id fi ;; esac } _docker_image_images() { _docker_image_ls } _docker_image_import() { case \"$prev\" in --change|-c|--message|-m|--platform) return ;; esac case \"$cur\" in -*) local options=\"--change -c --help --message -m\" __docker_server_is_experimental && options+=\" --platform\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--change|-c|--message|-m') if [ \"$cword\" -eq \"$counter\" ]; then _filedir return elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_images --repo --tag return fi ;; esac } _docker_image_inspect() { _docker_inspect --type image } _docker_image_load() { case \"$prev\" in --input|-i|\"<\") _filedir return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --input -i --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_image_list() { _docker_image_ls } _docker_image_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in before|since) __docker_complete_images --cur \"${cur##*=}\" --force-tag --id return ;; dangling) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; label) return ;; reference) __docker_complete_images --cur \"${cur##*=}\" --repo --tag return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"before dangling label reference since\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --digests --filter -f --format --help --no-trunc --quiet -q\" -- \"$cur\" ) ) ;; =) return ;; *) __docker_complete_images --repo --tag ;; esac } _docker_image_prune() { case \"$prev\" in --filter) COMPREPLY=( $( compgen -W \"label label! until\" -S = -- \"$cur\" ) ) __docker_nospace return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --force -f --filter --help\" -- \"$cur\" ) ) ;; esac } _docker_image_pull() { case \"$prev\" in --platform) return ;; esac case \"$cur\" in -*) local options=\"--all-tags -a --disable-content-trust=false --help --quiet -q\" __docker_server_is_experimental && options+=\" --platform\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag --platform) if [ \"$cword\" -eq \"$counter\" ]; then for arg in \"${COMP_WORDS[@]}\"; do case \"$arg\" in --all-tags|-a) __docker_complete_images --repo return ;; esac done __docker_complete_images --repo --tag fi ;; esac } _docker_image_push() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--disable-content-trust=false --help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --repo --tag fi ;; esac } _docker_image_remove() { _docker_image_rm } _docker_image_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help --no-prune\" -- \"$cur\" ) ) ;; *) __docker_complete_images --force-tag --id ;; esac } _docker_image_rmi() { _docker_image_rm } _docker_image_save() { case \"$prev\" in --output|-o|\">\") _filedir return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --output -o\" -- \"$cur\" ) ) ;; *) __docker_complete_images --repo --tag --id ;; esac } _docker_image_tag() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --force-tag --id return elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_images --repo --tag return fi ;; esac } _docker_images() { _docker_image_ls } _docker_import() { _docker_image_import } _docker_info() { _docker_system_info } _docker_inspect() { local preselected_type local type if [ \"$1\" = \"--type\" ] ; then preselected_type=yes type=\"$2\" else type=$(__docker_value_of_option --type) fi case \"$prev\" in --format|-f) return ;; --type) if [ -z \"$preselected_type\" ] ; then COMPREPLY=( $( compgen -W \"container image network node plugin secret service volume\" -- \"$cur\" ) ) return fi ;; esac case \"$cur\" in -*) local options=\"--format -f --help --size -s\" if [ -z \"$preselected_type\" ] ; then options+=\" --type\" fi COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) case \"$type\" in '') COMPREPLY=( $( compgen -W \" $(__docker_containers --all) $(__docker_images --force-tag --id) $(__docker_networks) $(__docker_nodes) $(__docker_plugins_installed) $(__docker_secrets) $(__docker_services) $(__docker_volumes) \" -- \"$cur\" ) ) __ltrim_colon_completions \"$cur\" ;; container) __docker_complete_containers_all ;; image) __docker_complete_images --force-tag --id ;; network) __docker_complete_networks ;; node) __docker_complete_nodes ;; plugin) __docker_complete_plugins_installed ;; secret) __docker_complete_secrets ;; service) __docker_complete_services ;; volume) __docker_complete_volumes ;; esac esac } _docker_kill() { _docker_container_kill } _docker_load() { _docker_image_load } _docker_login() { case \"$prev\" in --password|-p|--username|-u) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --password -p --password-stdin --username -u\" -- \"$cur\" ) ) ;; esac } _docker_logout() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; esac } _docker_logs() { _docker_container_logs } _docker_network_connect() { local options_with_args=\" --alias --ip --ip6 --link --link-local-ip \" local boolean_options=\" --help \" case \"$prev\" in --link) case \"$cur\" in *:*) ;; *) __docker_complete_containers_running COMPREPLY=( $( compgen -W \"${COMPREPLY[*]}\" -S ':' ) ) __docker_nospace ;; esac return ;; $(__docker_to_extglob \"$options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$boolean_options $options_with_args\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag \"$( __docker_to_alternatives \"$options_with_args\" )\" ) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_networks elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_containers_all fi ;; esac } _docker_network_create() { case \"$prev\" in --aux-address|--gateway|--ip-range|--ipam-opt|--ipv6|--opt|-o|--subnet) return ;; --config-from) __docker_complete_networks return ;; --driver|-d) __docker_complete_plugins_bundled --type Network --remove host --remove null --add macvlan return ;; --ipam-driver) COMPREPLY=( $( compgen -W \"default\" -- \"$cur\" ) ) return ;; --label) return ;; --scope) COMPREPLY=( $( compgen -W \"local swarm\" -- \"$cur\" ) ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--attachable --aux-address --config-from --config-only --driver -d --gateway --help --ingress --internal --ip-range --ipam-driver --ipam-opt --ipv6 --label --opt -o --scope --subnet\" -- \"$cur\" ) ) ;; esac } _docker_network_disconnect() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_networks elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_containers_in_network \"$prev\" fi ;; esac } _docker_network_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help --verbose\" -- \"$cur\" ) ) ;; *) __docker_complete_networks esac } _docker_network_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in dangling) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; driver) __docker_complete_plugins_bundled --cur \"${cur##*=}\" --type Network --add macvlan return ;; id) __docker_complete_networks --cur \"${cur##*=}\" --id return ;; name) __docker_complete_networks --cur \"${cur##*=}\" --name return ;; scope) COMPREPLY=( $( compgen -W \"global local swarm\" -- \"${cur##*=}\" ) ) return ;; type) COMPREPLY=( $( compgen -W \"builtin custom\" -- \"${cur##*=}\" ) ) return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"dangling driver id label name scope type\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --no-trunc --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_network_prune() { case \"$prev\" in --filter) COMPREPLY=( $( compgen -W \"label label! until\" -S = -- \"$cur\" ) ) __docker_nospace return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --filter --help\" -- \"$cur\" ) ) ;; esac } _docker_network_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_networks --filter type=custom esac } _docker_network() { local subcommands=\" connect create disconnect inspect ls prune rm \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_service() { local subcommands=\" create inspect logs ls rm rollback scale ps update \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_service_create() { _docker_service_update_and_create } _docker_service_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help --pretty\" -- \"$cur\" ) ) ;; *) __docker_complete_services esac } _docker_service_logs() { case \"$prev\" in --since|--tail) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--details --follow -f --help --no-resolve --no-task-ids --no-trunc --raw --since --tail --timestamps -t\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--since|--tail') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_services_and_tasks fi ;; esac } _docker_service_list() { _docker_service_ls } _docker_service_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in id) __docker_complete_services --cur \"${cur##*=}\" --id return ;; mode) COMPREPLY=( $( compgen -W \"global replicated\" -- \"${cur##*=}\" ) ) return ;; name) __docker_complete_services --cur \"${cur##*=}\" --name return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -W \"id label mode name\" -S = -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_service_remove() { _docker_service_rm } _docker_service_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_services esac } _docker_service_rollback() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--detach -d --help --quit -q\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag ) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_services fi ;; esac } _docker_service_scale() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--detach -d --help\" -- \"$cur\" ) ) ;; *) __docker_complete_services __docker_append_to_completions \"=\" __docker_nospace ;; esac } _docker_service_ps() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in desired-state) COMPREPLY=( $( compgen -W \"accepted running shutdown\" -- \"${cur##*=}\" ) ) return ;; name) __docker_complete_services --cur \"${cur##*=}\" --name return ;; node) __docker_complete_nodes --cur \"${cur##*=}\" --add self return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -W \"desired-state id name node\" -S = -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --no-resolve --no-trunc --quiet -q\" -- \"$cur\" ) ) ;; *) __docker_complete_services ;; esac } _docker_service_update() { _docker_service_update_and_create } _docker_service_update_and_create() { local options_with_args=\" --endpoint-mode --entrypoint --health-cmd --health-interval --health-retries --health-start-period --health-timeout --hostname --isolation --limit-cpu --limit-memory --log-driver --log-opt --replicas --replicas-max-per-node --reserve-cpu --reserve-memory --restart-condition --restart-delay --restart-max-attempts --restart-window --rollback-delay --rollback-failure-action --rollback-max-failure-ratio --rollback-monitor --rollback-order --rollback-parallelism --stop-grace-period --stop-signal --update-delay --update-failure-action --update-max-failure-ratio --update-monitor --update-order --update-parallelism --user -u --workdir -w \" __docker_server_os_is windows && options_with_args+=\" --credential-spec \" local boolean_options=\" --detach -d --help --init --no-healthcheck --no-resolve-image --read-only --tty -t --with-registry-auth \" __docker_complete_log_driver_options && return if [ \"$subcommand\" = \"create\" ] ; then options_with_args=\"$options_with_args --config --constraint --container-label --dns --dns-option --dns-search --env -e --env-file --generic-resource --group --host --label -l --mode --mount --name --network --placement-pref --publish -p --secret --sysctl \" case \"$prev\" in --env-file) _filedir return ;; --mode) COMPREPLY=( $( compgen -W \"global replicated\" -- \"$cur\" ) ) return ;; esac fi if [ \"$subcommand\" = \"update\" ] ; then options_with_args=\"$options_with_args --args --config-add --config-rm --constraint-add --constraint-rm --container-label-add --container-label-rm --dns-add --dns-option-add --dns-option-rm --dns-rm --dns-search-add --dns-search-rm --env-add --env-rm --generic-resource-add --generic-resource-rm --group-add --group-rm --host-add --host-rm --image --label-add --label-rm --mount-add --mount-rm --network-add --network-rm --placement-pref-add --placement-pref-rm --publish-add --publish-rm --rollback --secret-add --secret-rm --sysctl-add --sysctl-rm \" boolean_options=\"$boolean_options --force \" case \"$prev\" in --env-rm) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) return ;; --image) __docker_complete_images --repo --tag --id return ;; esac fi local strategy=$(__docker_map_key_of_current_option '--placement-pref|--placement-pref-add|--placement-pref-rm') case \"$strategy\" in spread) COMPREPLY=( $( compgen -W \"engine.labels node.labels\" -S . -- \"${cur##*=}\" ) ) __docker_nospace return ;; esac case \"$prev\" in --config|--config-add|--config-rm) __docker_complete_configs return ;; --endpoint-mode) COMPREPLY=( $( compgen -W \"dnsrr vip\" -- \"$cur\" ) ) return ;; --env|-e|--env-add) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) __docker_nospace return ;; --group|--group-add|--group-rm) COMPREPLY=( $(compgen -g -- \"$cur\") ) return ;; --host|--host-add|--host-rm) case \"$cur\" in *:) __docker_complete_resolved_hostname return ;; esac ;; --isolation) __docker_complete_isolation return ;; --log-driver) __docker_complete_log_drivers return ;; --log-opt) __docker_complete_log_options return ;; --network|--network-add|--network-rm) __docker_complete_networks return ;; --placement-pref|--placement-pref-add|--placement-pref-rm) COMPREPLY=( $( compgen -W \"spread\" -S = -- \"$cur\" ) ) __docker_nospace return ;; --restart-condition) COMPREPLY=( $( compgen -W \"any none on-failure\" -- \"$cur\" ) ) return ;; --rollback-failure-action) COMPREPLY=( $( compgen -W \"continue pause\" -- \"$cur\" ) ) return ;; --secret|--secret-add|--secret-rm) __docker_complete_secrets return ;; --stop-signal) __docker_complete_signals return ;; --update-failure-action) COMPREPLY=( $( compgen -W \"continue pause rollback\" -- \"$cur\" ) ) return ;; --update-order|--rollback-order) COMPREPLY=( $( compgen -W \"start-first stop-first\" -- \"$cur\" ) ) return ;; --user|-u) __docker_complete_user_group return ;; $(__docker_to_extglob \"$options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$boolean_options $options_with_args\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag \"$( __docker_to_alternatives \"$options_with_args\" )\" ) if [ \"$subcommand\" = \"update\" ] ; then if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_services fi else if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --repo --tag --id fi fi ;; esac } _docker_swarm() { local subcommands=\" ca init join join-token leave unlock unlock-key update \" __docker_subcommands \"$subcommands\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_swarm_ca() { case \"$prev\" in --ca-cert|--ca-key) _filedir return ;; --cert-expiry|--external-ca) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--ca-cert --ca-key --cert-expiry --detach -d --external-ca --help --quiet -q --rotate\" -- \"$cur\" ) ) ;; esac } _docker_swarm_init() { case \"$prev\" in --advertise-addr) if [[ $cur == *: ]] ; then COMPREPLY=( $( compgen -W \"2377\" -- \"${cur##*:}\" ) ) else __docker_complete_local_interfaces __docker_nospace fi return ;; --availability) COMPREPLY=( $( compgen -W \"active drain pause\" -- \"$cur\" ) ) return ;; --cert-expiry|--data-path-port|--default-addr-pool|--default-addr-pool-mask-length|--dispatcher-heartbeat|--external-ca|--max-snapshots|--snapshot-interval|--task-history-limit ) return ;; --data-path-addr) __docker_complete_local_interfaces return ;; --listen-addr) if [[ $cur == *: ]] ; then COMPREPLY=( $( compgen -W \"2377\" -- \"${cur##*:}\" ) ) else __docker_complete_local_interfaces --add 0.0.0.0 __docker_nospace fi return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--advertise-addr --autolock --availability --cert-expiry --data-path-addr --data-path-port --default-addr-pool --default-addr-pool-mask-length --dispatcher-heartbeat --external-ca --force-new-cluster --help --listen-addr --max-snapshots --snapshot-interval --task-history-limit \" -- \"$cur\" ) ) ;; esac } _docker_swarm_join() { case \"$prev\" in --advertise-addr) if [[ $cur == *: ]] ; then COMPREPLY=( $( compgen -W \"2377\" -- \"${cur##*:}\" ) ) else __docker_complete_local_interfaces __docker_nospace fi return ;; --availability) COMPREPLY=( $( compgen -W \"active drain pause\" -- \"$cur\" ) ) return ;; --data-path-addr) __docker_complete_local_interfaces return ;; --listen-addr) if [[ $cur == *: ]] ; then COMPREPLY=( $( compgen -W \"2377\" -- \"${cur##*:}\" ) ) else __docker_complete_local_interfaces --add 0.0.0.0 __docker_nospace fi return ;; --token) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--advertise-addr --availability --data-path-addr --help --listen-addr --token\" -- \"$cur\" ) ) ;; *:) COMPREPLY=( $( compgen -W \"2377\" -- \"${cur##*:}\" ) ) ;; esac } _docker_swarm_join_token() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --quiet -q --rotate\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag ) if [ \"$cword\" -eq \"$counter\" ]; then COMPREPLY=( $( compgen -W \"manager worker\" -- \"$cur\" ) ) fi ;; esac } _docker_swarm_leave() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help\" -- \"$cur\" ) ) ;; esac } _docker_swarm_unlock() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; esac } _docker_swarm_unlock_key() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --quiet -q --rotate\" -- \"$cur\" ) ) ;; esac } _docker_swarm_update() { case \"$prev\" in --cert-expiry|--dispatcher-heartbeat|--external-ca|--max-snapshots|--snapshot-interval|--task-history-limit) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--autolock --cert-expiry --dispatcher-heartbeat --external-ca --help --max-snapshots --snapshot-interval --task-history-limit\" -- \"$cur\" ) ) ;; esac } _docker_manifest() { local subcommands=\" annotate create inspect push \" __docker_subcommands \"$subcommands\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_manifest_annotate() { case \"$prev\" in --arch) COMPREPLY=( $( compgen -W \" 386 amd64 arm arm64 mips64 mips64le ppc64le s390x\" -- \"$cur\" ) ) return ;; --os) COMPREPLY=( $( compgen -W \" darwin dragonfly freebsd linux netbsd openbsd plan9 solaris windows\" -- \"$cur\" ) ) return ;; --os-features|--variant) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--arch --help --os --os-features --variant\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag \"--arch|--os|--os-features|--variant\" ) if [ \"$cword\" -eq \"$counter\" ] || [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_images --force-tag --id fi ;; esac } _docker_manifest_create() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--amend -a --help --insecure\" -- \"$cur\" ) ) ;; *) __docker_complete_images --force-tag --id ;; esac } _docker_manifest_inspect() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --insecure --verbose -v\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag ) if [ \"$cword\" -eq \"$counter\" ] || [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_images --force-tag --id fi ;; esac } _docker_manifest_push() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --insecure --purge -p\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag ) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --force-tag --id fi ;; esac } _docker_node() { local subcommands=\" demote inspect ls promote rm ps update \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_node_demote() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_nodes --filter role=manager esac } _docker_node_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help --pretty\" -- \"$cur\" ) ) ;; *) __docker_complete_nodes --add self esac } _docker_node_list() { _docker_node_ls } _docker_node_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in id) __docker_complete_nodes --cur \"${cur##*=}\" --id return ;; membership) COMPREPLY=( $( compgen -W \"accepted pending\" -- \"${cur##*=}\" ) ) return ;; name) __docker_complete_nodes --cur \"${cur##*=}\" --name return ;; role) COMPREPLY=( $( compgen -W \"manager worker\" -- \"${cur##*=}\" ) ) return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -W \"id label membership name role\" -S = -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_node_promote() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_nodes --filter role=worker esac } _docker_node_remove() { _docker_node_rm } _docker_node_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_nodes esac } _docker_node_ps() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in desired-state) COMPREPLY=( $( compgen -W \"accepted running shutdown\" -- \"${cur##*=}\" ) ) return ;; name) __docker_complete_services --cur \"${cur##*=}\" --name return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -W \"desired-state id label name\" -S = -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --no-resolve --no-trunc --quiet -q\" -- \"$cur\" ) ) ;; *) __docker_complete_nodes --add self ;; esac } _docker_node_update() { case \"$prev\" in --availability) COMPREPLY=( $( compgen -W \"active drain pause\" -- \"$cur\" ) ) return ;; --role) COMPREPLY=( $( compgen -W \"manager worker\" -- \"$cur\" ) ) return ;; --label-add|--label-rm) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--availability --help --label-add --label-rm --role\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--availability|--label-add|--label-rm|--role') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_nodes fi ;; esac } _docker_pause() { _docker_container_pause } _docker_plugin() { local subcommands=\" create disable enable inspect install ls push rm set upgrade \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_plugin_create() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--compress --help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then return elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then _filedir -d fi ;; esac } _docker_plugin_disable() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_plugins_installed --filter enabled=true fi ;; esac } _docker_plugin_enable() { case \"$prev\" in --timeout) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --timeout\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--timeout') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_plugins_installed --filter enabled=false fi ;; esac } _docker_plugin_inspect() { case \"$prev\" in --format|f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_plugins_installed ;; esac } _docker_plugin_install() { case \"$prev\" in --alias) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--alias --disable --disable-content-trust=false --grant-all-permissions --help\" -- \"$cur\" ) ) ;; esac } _docker_plugin_list() { _docker_plugin_ls } _docker_plugin_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in capability) COMPREPLY=( $( compgen -W \"authz ipamdriver logdriver metricscollector networkdriver volumedriver\" -- \"${cur##*=}\" ) ) return ;; enabled) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"capability enabled\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --no-trunc --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_plugin_push() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_plugins_installed fi ;; esac } _docker_plugin_remove() { _docker_plugin_rm } _docker_plugin_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_plugins_installed ;; esac } _docker_plugin_set() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_plugins_installed fi ;; esac } _docker_plugin_upgrade() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--disable-content-trust --grant-all-permissions --help --skip-remote-check\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_plugins_installed __ltrim_colon_completions \"$cur\" elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then local plugin_images=\"$(__docker_plugins_installed)\" COMPREPLY=( $(compgen -S : -W \"${plugin_images%:*}\" -- \"$cur\") ) __docker_nospace fi ;; esac } _docker_port() { _docker_container_port } _docker_ps() { _docker_container_ls } _docker_pull() { _docker_image_pull } _docker_push() { _docker_image_push } _docker_rename() { _docker_container_rename } _docker_restart() { _docker_container_restart } _docker_rm() { _docker_container_rm } _docker_rmi() { _docker_image_rm } _docker_run() { _docker_container_run } _docker_save() { _docker_image_save } _docker_secret() { local subcommands=\" create inspect ls rm \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_secret_create() { case \"$prev\" in --driver|-d|--label|-l) return ;; --template-driver) COMPREPLY=( $( compgen -W \"golang\" -- \"$cur\" ) ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--driver -d --help --label -l --template-driver\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--driver|-d|--label|-l|--template-driver') if [ \"$cword\" -eq \"$((counter + 1))\" ]; then _filedir fi ;; esac } _docker_secret_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help --pretty\" -- \"$cur\" ) ) ;; *) __docker_complete_secrets ;; esac } _docker_secret_list() { _docker_secret_ls } _docker_secret_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in id) __docker_complete_secrets --cur \"${cur##*=}\" --id return ;; name) __docker_complete_secrets --cur \"${cur##*=}\" --name return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"id label name\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format --filter -f --help --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_secret_remove() { _docker_secret_rm } _docker_secret_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_secrets ;; esac } _docker_search() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in is-automated) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; is-official) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"is-automated is-official stars\" -- \"$cur\" ) ) __docker_nospace return ;; --format|--limit) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --limit --no-trunc\" -- \"$cur\" ) ) ;; esac } _docker_stack() { local subcommands=\" deploy ls ps rm services \" local aliases=\" down list remove up \" __docker_complete_stack_orchestrator_options && return __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) local options=\"--help --orchestrator\" __docker_stack_orchestrator_is kubernetes && options+=\" --kubeconfig\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_stack_deploy() { __docker_complete_stack_orchestrator_options && return case \"$prev\" in --bundle-file) _filedir dab return ;; --compose-file|-c) _filedir yml return ;; --resolve-image) COMPREPLY=( $( compgen -W \"always changed never\" -- \"$cur\" ) ) return ;; esac case \"$cur\" in -*) local options=\"--compose-file -c --help --orchestrator\" __docker_server_is_experimental && __docker_stack_orchestrator_is swarm && options+=\" --bundle-file\" __docker_stack_orchestrator_is kubernetes && options+=\" --kubeconfig --namespace\" __docker_stack_orchestrator_is swarm && options+=\" --prune --resolve-image --with-registry-auth\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--bundle-file|--compose-file|-c|--kubeconfig|--namespace|--orchestrator|--resolve-image') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_stacks fi ;; esac } _docker_stack_down() { _docker_stack_rm } _docker_stack_list() { _docker_stack_ls } _docker_stack_ls() { __docker_complete_stack_orchestrator_options && return case \"$prev\" in --format) return ;; esac case \"$cur\" in -*) local options=\"--format --help --orchestrator\" __docker_stack_orchestrator_is kubernetes && options+=\" --all-namespaces --kubeconfig --namespace\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; esac } _docker_stack_ps() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in desired-state) COMPREPLY=( $( compgen -W \"accepted running shutdown\" -- \"${cur##*=}\" ) ) return ;; id) __docker_complete_stacks --cur \"${cur##*=}\" --id return ;; name) __docker_complete_stacks --cur \"${cur##*=}\" --name return ;; esac __docker_complete_stack_orchestrator_options && return case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"id name desired-state\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) local options=\"--filter -f --format --help --no-resolve --no-trunc --orchestrator --quiet -q\" __docker_stack_orchestrator_is kubernetes && options+=\" --all-namespaces --kubeconfig --namespace\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--all-namespaces|--filter|-f|--format|--kubeconfig|--namespace') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_stacks fi ;; esac } _docker_stack_remove() { _docker_stack_rm } _docker_stack_rm() { __docker_complete_stack_orchestrator_options && return case \"$cur\" in -*) local options=\"--help --orchestrator\" __docker_stack_orchestrator_is kubernetes && options+=\" --kubeconfig --namespace\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) __docker_complete_stacks ;; esac } _docker_stack_services() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in id) __docker_complete_services --cur \"${cur##*=}\" --id return ;; label) return ;; name) __docker_complete_services --cur \"${cur##*=}\" --name return ;; esac __docker_complete_stack_orchestrator_options && return case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"id label name\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) local options=\"--filter -f --format --help --orchestrator --quiet -q\" __docker_stack_orchestrator_is kubernetes && options+=\" --kubeconfig --namespace\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--filter|-f|--format|--kubeconfig|--namespace|--orchestrator') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_stacks fi ;; esac } _docker_stack_up() { _docker_stack_deploy } _docker_start() { _docker_container_start } _docker_stats() { _docker_container_stats } _docker_stop() { _docker_container_stop } _docker_system() { local subcommands=\" df events info prune \" __docker_subcommands \"$subcommands\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_system_df() { case \"$prev\" in --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format --help --verbose -v\" -- \"$cur\" ) ) ;; esac } _docker_system_events() { local key=$(__docker_map_key_of_current_option '-f|--filter') case \"$key\" in container) __docker_complete_containers_all --cur \"${cur##*=}\" return ;; daemon) local name=$(__docker_q info | sed -n 's/^\\(ID\\|Name\\): //p') COMPREPLY=( $( compgen -W \"$name\" -- \"${cur##*=}\" ) ) return ;; event) COMPREPLY=( $( compgen -W \" attach commit connect copy create delete destroy detach die disable disconnect enable exec_create exec_detach exec_die exec_start export health_status import install kill load mount oom pause pull push reload remove rename resize restart save start stop tag top unmount unpause untag update \" -- \"${cur##*=}\" ) ) return ;; image) __docker_complete_images --cur \"${cur##*=}\" --repo --tag return ;; network) __docker_complete_networks --cur \"${cur##*=}\" return ;; scope) COMPREPLY=( $( compgen -W \"local swarm\" -- \"${cur##*=}\" ) ) return ;; type) COMPREPLY=( $( compgen -W \"config container daemon image network plugin secret service volume\" -- \"${cur##*=}\" ) ) return ;; volume) __docker_complete_volumes --cur \"${cur##*=}\" return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"container daemon event image label network scope type volume\" -- \"$cur\" ) ) __docker_nospace return ;; --since|--until) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --help --since --until --format\" -- \"$cur\" ) ) ;; esac } _docker_system_info() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help\" -- \"$cur\" ) ) ;; esac } _docker_system_prune() { case \"$prev\" in --filter) COMPREPLY=( $( compgen -W \"label label! until\" -S = -- \"$cur\" ) ) __docker_nospace return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --force -f --filter --help --volumes\" -- \"$cur\" ) ) ;; esac } _docker_tag() { _docker_image_tag } _docker_trust() { local subcommands=\" inspect revoke sign \" __docker_subcommands \"$subcommands\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_trust_inspect() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --pretty\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --repo --tag fi ;; esac } _docker_trust_revoke() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --yes -y\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --repo --tag fi ;; esac } _docker_trust_sign() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --local\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --force-tag --id fi ;; esac } _docker_unpause() { _docker_container_unpause } _docker_update() { _docker_container_update } _docker_top() { _docker_container_top } _docker_version() { __docker_complete_stack_orchestrator_options && return case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) local options=\"--format -f --help\" __docker_stack_orchestrator_is kubernetes && options+=\" --kubeconfig\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; esac } _docker_volume_create() { case \"$prev\" in --driver|-d) __docker_complete_plugins_bundled --type Volume return ;; --label|--opt|-o) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--driver -d --help --label --opt -o\" -- \"$cur\" ) ) ;; esac } _docker_volume_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_volumes ;; esac } _docker_volume_list() { _docker_volume_ls } _docker_volume_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in dangling) COMPREPLY=( $( compgen -W \"true false\" -- \"${cur##*=}\" ) ) return ;; driver) __docker_complete_plugins_bundled --cur \"${cur##*=}\" --type Volume return ;; name) __docker_complete_volumes --cur \"${cur##*=}\" return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"dangling driver label name\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_volume_prune() { case \"$prev\" in --filter) COMPREPLY=( $( compgen -W \"label label!\" -S = -- \"$cur\" ) ) __docker_nospace return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter --force -f --help\" -- \"$cur\" ) ) ;; esac } _docker_volume_remove() { _docker_volume_rm } _docker_volume_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_volumes ;; esac } _docker_volume() { local subcommands=\" create inspect ls prune rm \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_wait() { _docker_container_wait } _docker() { local previous_extglob_setting=$(shopt -p extglob) shopt -s extglob local management_commands=( builder config container context engine image network node plugin secret service stack swarm system trust volume ) local top_level_commands=( build login logout run search version ) local legacy_commands=( attach commit cp create diff events exec export history images import info inspect kill load logs pause port ps pull push rename restart rm rmi save start stats stop tag top unpause update wait ) local experimental_client_commands=( manifest ) local experimental_server_commands=( checkpoint deploy ) local commands=(${management_commands[*]} ${top_level_commands[*]}) [ -z \"$DOCKER_HIDE_LEGACY_COMMANDS\" ] && commands+=(${legacy_commands[*]}) local global_boolean_options=\" --debug -D --tls --tlsverify \" local global_options_with_args=\" --config --context -c --host -H --log-level -l --tlscacert --tlscert --tlskey \" local info_fetched server_experimental server_os local client_experimental stack_orchestrator_is_kubernetes stack_orchestrator_is_swarm local host config context COMPREPLY=() local cur prev words cword _get_comp_words_by_ref -n : cur prev words cword local command='docker' command_pos=0 subcommand_pos local counter=1 while [ \"$counter\" -lt \"$cword\" ]; do case \"${words[$counter]}\" in docker) return 0 ;; --host|-H) (( counter++ )) host=\"${words[$counter]}\" ;; --config) (( counter++ )) config=\"${words[$counter]}\" ;; --context|-c) (( counter++ )) context=\"${words[$counter]}\" ;; $(__docker_to_extglob \"$global_options_with_args\") ) (( counter++ )) ;; -*) ;; =) (( counter++ )) ;; *) command=\"${words[$counter]}\" command_pos=$counter break ;; esac (( counter++ )) done local binary=\"${words[0]}\" if [[ $binary == ?(*/)dockerd ]] ; then command=daemon command_pos=0 fi local completions_func=_docker_${command//-/_} declare -F $completions_func >/dev/null && $completions_func eval \"$previous_extglob_setting\" return 0 } eval \"$__docker_previous_extglob_setting\" unset __docker_previous_extglob_setting complete -F _docker docker docker.exe dockerd dockerd.exe Function Calls: \u2514\u2500 __docker_complete_contexts \u251c\u2500 __docker_q \u251c\u2500 __docker_complete_configs | \u2514\u2500 __docker_configs \u251c\u2500 __docker_containers | \u2514\u2500 __docker_q \u251c\u2500 __docker_complete_containers_all | \u2514\u2500 __docker_complete_containers \u251c\u2500 __docker_complete_containers_running | \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_contexts \u2514\u2500 __docker_q","title":"docker_completion"},{"location":"completion/docker_completion/#docker-completions","text":"(in /home/bsgt/sys_bashrc/completions/docker_completion.sh)","title":"Docker Completions"},{"location":"completion/docker_completion/#function-index","text":"01 - __docker_q 02 - __docker_configs 03 - __docker_complete_configs 04 - __docker_containers 05 - __docker_complete_containers 06 - __docker_complete_containers_all 07 - __docker_complete_containers_removable 08 - __docker_complete_containers_running 09 - __docker_complete_containers_stoppable 10 - __docker_complete_containers_stopped 11 - __docker_complete_containers_unpauseable 12 - __docker_complete_container_names 13 - __docker_complete_container_ids 14 - __docker_contexts 15 - __docker_complete_contexts","title":"Function Index"},{"location":"completion/docker_completion/#__docker_q","text":"function __docker_q() { docker ${host:+--host \"$host\"} ${config:+--config \"$config\"} ${context:+--context \"$context\"} 2>/dev/null \"$@\" }","title":"&gt;&gt; __docker_q():"},{"location":"completion/docker_completion/#__docker_configs","text":"function __docker_configs() { local format if [ \"$1\" = \"--id\" ] ; then format='{{.ID}}' shift elif [ \"$1\" = \"--name\" ] ; then format='{{.Name}}' shift elif [ \"$DOCKER_COMPLETION_SHOW_CONFIG_IDS\" = yes ] ; then format='{{.ID}} {{.Name}}' else format='{{.Name}}' fi __docker_q config ls --format \"$format\" \"$@\" }","title":"&gt;&gt; __docker_configs():"},{"location":"completion/docker_completion/#function-calls","text":"\u2514\u2500 __docker_configs \u2514\u2500 __docker_q","title":"Function Calls:"},{"location":"completion/docker_completion/#__docker_complete_configs","text":"function __docker_complete_configs() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_configs \"$@\")\" -- \"$current\") ) }","title":"&gt;&gt; __docker_complete_configs():"},{"location":"completion/docker_completion/#function-calls_1","text":"\u2514\u2500 __docker_complete_configs \u2514\u2500 __docker_configs \u2514\u2500 __docker_q","title":"Function Calls:"},{"location":"completion/docker_completion/#__docker_containers","text":"function __docker_containers() { local format if [ \"$1\" = \"--id\" ] ; then format='{{.ID}}' shift elif [ \"$1\" = \"--name\" ] ; then format='{{.Names}}' shift elif [ \"${DOCKER_COMPLETION_SHOW_CONTAINER_IDS}\" = yes ] ; then format='{{.ID}} {{.Names}}' else format='{{.Names}}' fi __docker_q ps --format \"$format\" \"$@\" }","title":"&gt;&gt; __docker_containers():"},{"location":"completion/docker_completion/#function-calls_2","text":"\u2514\u2500 __docker_containers \u2514\u2500 __docker_q","title":"Function Calls:"},{"location":"completion/docker_completion/#__docker_complete_containers","text":"function __docker_complete_containers() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_containers \"$@\")\" -- \"$current\") ) }","title":"&gt;&gt; __docker_complete_containers():"},{"location":"completion/docker_completion/#function-calls_3","text":"\u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers \u2514\u2500 __docker_q","title":"Function Calls:"},{"location":"completion/docker_completion/#__docker_complete_containers_all","text":"function __docker_complete_containers_all() { __docker_complete_containers \"$@\" --all }","title":"&gt;&gt; __docker_complete_containers_all():"},{"location":"completion/docker_completion/#function-calls_4","text":"\u2514\u2500 __docker_complete_containers_all \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers","title":"Function Calls:"},{"location":"completion/docker_completion/#__docker_complete_containers_removable","text":"function __docker_complete_containers_removable() { __docker_complete_containers \"$@\" --filter status=created --filter status=exited }","title":"&gt;&gt; __docker_complete_containers_removable():"},{"location":"completion/docker_completion/#function-calls_5","text":"\u2514\u2500 __docker_complete_containers_removable \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers","title":"Function Calls:"},{"location":"completion/docker_completion/#__docker_complete_containers_running","text":"function __docker_complete_containers_running() { __docker_complete_containers \"$@\" --filter status=running }","title":"&gt;&gt; __docker_complete_containers_running():"},{"location":"completion/docker_completion/#function-calls_6","text":"\u2514\u2500 __docker_complete_containers_running \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers","title":"Function Calls:"},{"location":"completion/docker_completion/#__docker_complete_containers_stoppable","text":"function __docker_complete_containers_stoppable() { __docker_complete_containers \"$@\" --filter status=running --filter status=paused }","title":"&gt;&gt; __docker_complete_containers_stoppable():"},{"location":"completion/docker_completion/#function-calls_7","text":"\u2514\u2500 __docker_complete_containers_stoppable \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers","title":"Function Calls:"},{"location":"completion/docker_completion/#__docker_complete_containers_stopped","text":"function __docker_complete_containers_stopped() { __docker_complete_containers \"$@\" --filter status=exited }","title":"&gt;&gt; __docker_complete_containers_stopped():"},{"location":"completion/docker_completion/#function-calls_8","text":"\u2514\u2500 __docker_complete_containers_stopped \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers","title":"Function Calls:"},{"location":"completion/docker_completion/#__docker_complete_containers_unpauseable","text":"function __docker_complete_containers_unpauseable() { __docker_complete_containers \"$@\" --filter status=paused }","title":"&gt;&gt; __docker_complete_containers_unpauseable():"},{"location":"completion/docker_completion/#function-calls_9","text":"\u2514\u2500 __docker_complete_containers_unpauseable \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_containers","title":"Function Calls:"},{"location":"completion/docker_completion/#__docker_complete_container_names","text":"function __docker_complete_container_names() { local containers=( $(__docker_q ps -aq --no-trunc) ) local names=( $(__docker_q inspect --format '{{.Name}}' \"${containers[@]}\") ) names=( \"${names[@]#/}\" ) # trim off the leading \"/\" from the container names COMPREPLY=( $(compgen -W \"${names[*]}\" -- \"$cur\") ) }","title":"&gt;&gt; __docker_complete_container_names():"},{"location":"completion/docker_completion/#function-calls_10","text":"\u2514\u2500 __docker_complete_container_names \u2514\u2500 __docker_q","title":"Function Calls:"},{"location":"completion/docker_completion/#__docker_complete_container_ids","text":"function __docker_complete_container_ids() { local containers=( $(__docker_q ps -aq) ) COMPREPLY=( $(compgen -W \"${containers[*]}\" -- \"$cur\") ) }","title":"&gt;&gt; __docker_complete_container_ids():"},{"location":"completion/docker_completion/#function-calls_11","text":"\u2514\u2500 __docker_complete_container_ids \u2514\u2500 __docker_q","title":"Function Calls:"},{"location":"completion/docker_completion/#__docker_contexts","text":"function __docker_contexts() { local add=() while true ; do case \"$1\" in --add) add+=(\"$2\") shift 2 ;; *) break ;; esac done __docker_q context ls -q echo \"${add[@]}\" }","title":"&gt;&gt; __docker_contexts():"},{"location":"completion/docker_completion/#function-calls_12","text":"\u2514\u2500 __docker_contexts \u2514\u2500 __docker_q","title":"Function Calls:"},{"location":"completion/docker_completion/#__docker_complete_contexts","text":"function __docker_complete_contexts() { local contexts=( $(__docker_contexts \"$@\") ) COMPREPLY=( $(compgen -W \"${contexts[*]}\" -- \"$cur\") ) } __docker_images() { local repo_format='{{.Repository}}' local tag_format='{{.Repository}}:{{.Tag}}' local id_format='{{.ID}}' local all local format if [ \"$DOCKER_COMPLETION_SHOW_IMAGE_IDS\" = \"all\" ] ; then all='--all' fi while true ; do case \"$1\" in --repo) format+=\"$repo_format\\n\" shift ;; --tag) if [ \"${DOCKER_COMPLETION_SHOW_TAGS:-yes}\" = \"yes\" ]; then format+=\"$tag_format\\n\" fi shift ;; --id) if [[ $DOCKER_COMPLETION_SHOW_IMAGE_IDS =~ ^(all|non-intermediate)$ ]] ; then format+=\"$id_format\\n\" fi shift ;; --force-tag) format+=\"$tag_format\\n\" shift ;; *) break ;; esac done __docker_q image ls --no-trunc --format \"${format%\\\\n}\" $all \"$@\" | grep -v '<none>$' } __docker_complete_images() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_images \"$@\")\" -- \"$current\") ) __ltrim_colon_completions \"$current\" } __docker_networks() { local format if [ \"$1\" = \"--id\" ] ; then format='{{.ID}}' shift elif [ \"$1\" = \"--name\" ] ; then format='{{.Name}}' shift elif [ \"${DOCKER_COMPLETION_SHOW_NETWORK_IDS}\" = yes ] ; then format='{{.ID}} {{.Name}}' else format='{{.Name}}' fi __docker_q network ls --format \"$format\" \"$@\" } __docker_complete_networks() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_networks \"$@\")\" -- \"$current\") ) } __docker_complete_containers_in_network() { local containers=($(__docker_q network inspect -f '{{range $i, $c := .Containers}}{{$i}} {{$c.Name}} {{end}}' \"$1\")) COMPREPLY=( $(compgen -W \"${containers[*]}\" -- \"$cur\") ) } __docker_volumes() { __docker_q volume ls -q \"$@\" } __docker_complete_volumes() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_volumes \"$@\")\" -- \"$current\") ) } __docker_plugins_bundled() { local type add=() remove=() while true ; do case \"$1\" in --type) type=\"$2\" shift 2 ;; --add) add+=(\"$2\") shift 2 ;; --remove) remove+=(\"$2\") shift 2 ;; *) break ;; esac done local plugins=($(__docker_q info --format \"{{range \\$i, \\$p := .Plugins.$type}}{{.}} {{end}}\")) for del in \"${remove[@]}\" ; do plugins=(${plugins[@]/$del/}) done echo \"${plugins[@]}\" \"${add[@]}\" } __docker_complete_plugins_bundled() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_plugins_bundled \"$@\")\" -- \"$current\") ) } __docker_plugins_installed() { local format if [ \"$DOCKER_COMPLETION_SHOW_PLUGIN_IDS\" = yes ] ; then format='{{.ID}} {{.Name}}' else format='{{.Name}}' fi __docker_q plugin ls --format \"$format\" \"$@\" } __docker_complete_plugins_installed() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_plugins_installed \"$@\")\" -- \"$current\") ) } __docker_runtimes() { __docker_q info | sed -n 's/^Runtimes: \\(.*\\)/\\1/p' } __docker_complete_runtimes() { COMPREPLY=( $(compgen -W \"$(__docker_runtimes)\" -- \"$cur\") ) } __docker_secrets() { local format if [ \"$1\" = \"--id\" ] ; then format='{{.ID}}' shift elif [ \"$1\" = \"--name\" ] ; then format='{{.Name}}' shift elif [ \"$DOCKER_COMPLETION_SHOW_SECRET_IDS\" = yes ] ; then format='{{.ID}} {{.Name}}' else format='{{.Name}}' fi __docker_q secret ls --format \"$format\" \"$@\" } __docker_complete_secrets() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_secrets \"$@\")\" -- \"$current\") ) } __docker_stacks() { __docker_q stack ls | awk 'NR>1 {print $1}' } __docker_complete_stacks() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_stacks \"$@\")\" -- \"$current\") ) } __docker_nodes() { local format if [ \"$DOCKER_COMPLETION_SHOW_NODE_IDS\" = yes ] ; then format='{{.ID}} {{.Hostname}}' else format='{{.Hostname}}' fi local add=() while true ; do case \"$1\" in --id) format='{{.ID}}' shift ;; --name) format='{{.Hostname}}' shift ;; --add) add+=(\"$2\") shift 2 ;; *) break ;; esac done echo \"$(__docker_q node ls --format \"$format\" \"$@\")\" \"${add[@]}\" } __docker_complete_nodes() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_nodes \"$@\")\" -- \"$current\") ) } __docker_services() { local fields='$2' # default: service name only [ \"${DOCKER_COMPLETION_SHOW_SERVICE_IDS}\" = yes ] && fields='$1,$2' # ID & name if [ \"$1\" = \"--id\" ] ; then fields='$1' # IDs only shift elif [ \"$1\" = \"--name\" ] ; then fields='$2' # names only shift fi __docker_q service ls \"$@\" | awk \"NR>1 {print $fields}\" } __docker_complete_services() { local current=\"$cur\" if [ \"$1\" = \"--cur\" ] ; then current=\"$2\" shift 2 fi COMPREPLY=( $(compgen -W \"$(__docker_services \"$@\")\" -- \"$current\") ) } __docker_tasks() { __docker_q service ps --format '{{.ID}}' \"\" } __docker_complete_services_and_tasks() { COMPREPLY=( $(compgen -W \"$(__docker_services \"$@\") $(__docker_tasks)\" -- \"$cur\") ) } __docker_append_to_completions() { COMPREPLY=( ${COMPREPLY[@]/%/\"$1\"} ) } __docker_fetch_info() { if [ -z \"$info_fetched\" ] ; then read -r client_experimental server_experimental server_os <<< \"$(__docker_q version -f '{{.Client.Experimental}} {{.Server.Experimental}} {{.Server.Os}}')\" info_fetched=true fi } __docker_client_is_experimental() { __docker_fetch_info [ \"$client_experimental\" = \"true\" ] } __docker_server_is_experimental() { __docker_fetch_info [ \"$server_experimental\" = \"true\" ] } __docker_server_os_is() { local expected_os=\"$1\" __docker_fetch_info [ \"$server_os\" = \"$expected_os\" ] } __docker_stack_orchestrator_is() { case \"$1\" in kubernetes) if [ -z \"$stack_orchestrator_is_kubernetes\" ] ; then __docker_q stack ls --help | grep -qe --namespace stack_orchestrator_is_kubernetes=$? fi return $stack_orchestrator_is_kubernetes ;; swarm) if [ -z \"$stack_orchestrator_is_swarm\" ] ; then __docker_q stack deploy --help | grep -qe \"with-registry-auth\" stack_orchestrator_is_swarm=$? fi return $stack_orchestrator_is_swarm ;; *) return 1 ;; esac } __docker_pos_first_nonflag() { local argument_flags=$1 local counter=$((${subcommand_pos:-${command_pos}} + 1)) while [ \"$counter\" -le \"$cword\" ]; do if [ -n \"$argument_flags\" ] && eval \"case '${words[$counter]}' in $argument_flags) true ;; *) false ;; esac\"; then (( counter++ )) [ \"${words[$counter]}\" = \"=\" ] && (( counter++ )) else case \"${words[$counter]}\" in -*) ;; *) break ;; esac fi while [ \"${words[$counter + 1]}\" = \"=\" ] ; do counter=$(( counter + 2)) done (( counter++ )) done echo $counter } __docker_map_key_of_current_option() { local glob=\"$1\" local key glob_pos if [ \"$cur\" = \"=\" ] ; then # key= case key=\"$prev\" glob_pos=$((cword - 2)) elif [[ $cur == *=* ]] ; then # key=value case (OSX) key=${cur%=*} glob_pos=$((cword - 1)) elif [ \"$prev\" = \"=\" ] ; then key=${words[$cword - 2]} # key=value case glob_pos=$((cword - 3)) else return fi [ \"${words[$glob_pos]}\" = \"=\" ] && ((glob_pos--)) # --option=key=value syntax [[ ${words[$glob_pos]} == @($glob) ]] && echo \"$key\" } __docker_value_of_option() { local option_extglob=$(__docker_to_extglob \"$1\") local counter=$((command_pos + 1)) while [ \"$counter\" -lt \"$cword\" ]; do case ${words[$counter]} in $option_extglob ) echo \"${words[$counter + 1]}\" break ;; esac (( counter++ )) done } __docker_to_alternatives() { local parts=( $1 ) local IFS='|' echo \"${parts[*]}\" } __docker_to_extglob() { local extglob=$( __docker_to_alternatives \"$1\" ) echo \"@($extglob)\" } __docker_subcommands() { local subcommands=\"$1\" local counter=$((command_pos + 1)) while [ \"$counter\" -lt \"$cword\" ]; do case \"${words[$counter]}\" in $(__docker_to_extglob \"$subcommands\") ) subcommand_pos=$counter local subcommand=${words[$counter]} local completions_func=_docker_${command}_${subcommand//-/_} declare -F \"$completions_func\" >/dev/null && \"$completions_func\" return 0 ;; esac (( counter++ )) done return 1 } __docker_nospace() { type compopt &>/dev/null && compopt -o nospace } __docker_complete_resolved_hostname() { command -v host >/dev/null 2>&1 || return COMPREPLY=( $(host 2>/dev/null \"${cur%:}\" | awk '/has address/ {print $4}') ) } __docker_local_interfaces() { command -v ip >/dev/null 2>&1 || return local format if [ \"$1\" = \"--ip-only\" ] ; then format='\\1' shift else format='\\1 \\2' fi ip addr show scope global 2>/dev/null | sed -n \"s| \\+inet \\([0-9.]\\+\\).* \\([^ ]\\+\\)|$format|p\" } __docker_complete_local_interfaces() { local additional_interface if [ \"$1\" = \"--add\" ] ; then additional_interface=\"$2\" shift 2 fi COMPREPLY=( $( compgen -W \"$(__docker_local_interfaces \"$@\") $additional_interface\" -- \"$cur\" ) ) } __docker_complete_local_ips() { __docker_complete_local_interfaces --ip-only } __docker_complete_capabilities_addable() { COMPREPLY=( $( compgen -W \" ALL AUDIT_CONTROL BLOCK_SUSPEND DAC_READ_SEARCH IPC_LOCK IPC_OWNER LEASE LINUX_IMMUTABLE MAC_ADMIN MAC_OVERRIDE NET_ADMIN NET_BROADCAST SYS_ADMIN SYS_BOOT SYSLOG SYS_MODULE SYS_NICE SYS_PACCT SYS_PTRACE SYS_RAWIO SYS_RESOURCE SYS_TIME SYS_TTY_CONFIG WAKE_ALARM \" -- \"$cur\" ) ) } __docker_complete_capabilities_droppable() { COMPREPLY=( $( compgen -W \" ALL AUDIT_WRITE CHOWN DAC_OVERRIDE FOWNER FSETID KILL MKNOD NET_BIND_SERVICE NET_RAW SETFCAP SETGID SETPCAP SETUID SYS_CHROOT \" -- \"$cur\" ) ) } __docker_complete_detach_keys() { case \"$prev\" in --detach-keys) case \"$cur\" in *,) COMPREPLY=( $( compgen -W \"${cur}ctrl-\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"ctrl-\" -- \"$cur\" ) ) ;; esac __docker_nospace return ;; esac return 1 } __docker_complete_isolation() { COMPREPLY=( $( compgen -W \"default hyperv process\" -- \"$cur\" ) ) } __docker_complete_log_drivers() { COMPREPLY=( $( compgen -W \" awslogs etwlogs fluentd gcplogs gelf journald json-file local logentries none splunk syslog \" -- \"$cur\" ) ) } __docker_complete_log_options() { local common_options1=\"max-buffer-size mode\" local common_options2=\"env env-regex labels\" local awslogs_options=\"$common_options1 awslogs-create-group awslogs-credentials-endpoint awslogs-datetime-format awslogs-group awslogs-multiline-pattern awslogs-region awslogs-stream tag\" local fluentd_options=\"$common_options1 $common_options2 fluentd-address fluentd-async-connect fluentd-buffer-limit fluentd-retry-wait fluentd-max-retries fluentd-sub-second-precision tag\" local gcplogs_options=\"$common_options1 $common_options2 gcp-log-cmd gcp-meta-id gcp-meta-name gcp-meta-zone gcp-project\" local gelf_options=\"$common_options1 $common_options2 gelf-address gelf-compression-level gelf-compression-type gelf-tcp-max-reconnect gelf-tcp-reconnect-delay tag\" local journald_options=\"$common_options1 $common_options2 tag\" local json_file_options=\"$common_options1 $common_options2 compress max-file max-size\" local local_options=\"$common_options1 compress max-file max-size\" local logentries_options=\"$common_options1 $common_options2 line-only logentries-token tag\" local splunk_options=\"$common_options1 $common_options2 splunk-caname splunk-capath splunk-format splunk-gzip splunk-gzip-level splunk-index splunk-insecureskipverify splunk-source splunk-sourcetype splunk-token splunk-url splunk-verify-connection tag\" local syslog_options=\"$common_options1 $common_options2 syslog-address syslog-facility syslog-format syslog-tls-ca-cert syslog-tls-cert syslog-tls-key syslog-tls-skip-verify tag\" local all_options=\"$fluentd_options $gcplogs_options $gelf_options $journald_options $logentries_options $json_file_options $syslog_options $splunk_options\" case $(__docker_value_of_option --log-driver) in '') COMPREPLY=( $( compgen -W \"$all_options\" -S = -- \"$cur\" ) ) ;; awslogs) COMPREPLY=( $( compgen -W \"$awslogs_options\" -S = -- \"$cur\" ) ) ;; fluentd) COMPREPLY=( $( compgen -W \"$fluentd_options\" -S = -- \"$cur\" ) ) ;; gcplogs) COMPREPLY=( $( compgen -W \"$gcplogs_options\" -S = -- \"$cur\" ) ) ;; gelf) COMPREPLY=( $( compgen -W \"$gelf_options\" -S = -- \"$cur\" ) ) ;; journald) COMPREPLY=( $( compgen -W \"$journald_options\" -S = -- \"$cur\" ) ) ;; json-file) COMPREPLY=( $( compgen -W \"$json_file_options\" -S = -- \"$cur\" ) ) ;; local) COMPREPLY=( $( compgen -W \"$local_options\" -S = -- \"$cur\" ) ) ;; logentries) COMPREPLY=( $( compgen -W \"$logentries_options\" -S = -- \"$cur\" ) ) ;; syslog) COMPREPLY=( $( compgen -W \"$syslog_options\" -S = -- \"$cur\" ) ) ;; splunk) COMPREPLY=( $( compgen -W \"$splunk_options\" -S = -- \"$cur\" ) ) ;; *) return ;; esac __docker_nospace } __docker_complete_log_driver_options() { local key=$(__docker_map_key_of_current_option '--log-opt') case \"$key\" in awslogs-create-group) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; awslogs-credentials-endpoint) COMPREPLY=( $( compgen -W \"/\" -- \"${cur##*=}\" ) ) __docker_nospace return ;; compress|fluentd-async-connect) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; fluentd-sub-second-precision) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; gelf-address) COMPREPLY=( $( compgen -W \"tcp udp\" -S \"://\" -- \"${cur##*=}\" ) ) __docker_nospace return ;; gelf-compression-level) COMPREPLY=( $( compgen -W \"1 2 3 4 5 6 7 8 9\" -- \"${cur##*=}\" ) ) return ;; gelf-compression-type) COMPREPLY=( $( compgen -W \"gzip none zlib\" -- \"${cur##*=}\" ) ) return ;; line-only) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; mode) COMPREPLY=( $( compgen -W \"blocking non-blocking\" -- \"${cur##*=}\" ) ) return ;; syslog-address) COMPREPLY=( $( compgen -W \"tcp:// tcp+tls:// udp:// unix://\" -- \"${cur##*=}\" ) ) __docker_nospace __ltrim_colon_completions \"${cur}\" return ;; syslog-facility) COMPREPLY=( $( compgen -W \" auth authpriv cron daemon ftp kern local0 local1 local2 local3 local4 local5 local6 local7 lpr mail news syslog user uucp \" -- \"${cur##*=}\" ) ) return ;; syslog-format) COMPREPLY=( $( compgen -W \"rfc3164 rfc5424 rfc5424micro\" -- \"${cur##*=}\" ) ) return ;; syslog-tls-ca-cert|syslog-tls-cert|syslog-tls-key) _filedir return ;; syslog-tls-skip-verify) COMPREPLY=( $( compgen -W \"true\" -- \"${cur##*=}\" ) ) return ;; splunk-url) COMPREPLY=( $( compgen -W \"http:// https://\" -- \"${cur##*=}\" ) ) __docker_nospace __ltrim_colon_completions \"${cur}\" return ;; splunk-gzip|splunk-insecureskipverify|splunk-verify-connection) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; splunk-format) COMPREPLY=( $( compgen -W \"inline json raw\" -- \"${cur##*=}\" ) ) return ;; esac return 1 } __docker_complete_log_levels() { COMPREPLY=( $( compgen -W \"debug info warn error fatal\" -- \"$cur\" ) ) } __docker_complete_restart() { case \"$prev\" in --restart) case \"$cur\" in on-failure:*) ;; *) COMPREPLY=( $( compgen -W \"always no on-failure on-failure: unless-stopped\" -- \"$cur\") ) ;; esac return ;; esac return 1 } __docker_complete_signals() { local signals=( SIGCONT SIGHUP SIGINT SIGKILL SIGQUIT SIGSTOP SIGTERM SIGUSR1 SIGUSR2 ) COMPREPLY=( $( compgen -W \"${signals[*]} ${signals[*]#SIG}\" -- \"$( echo \"$cur\" | tr '[:lower:]' '[:upper:]')\" ) ) } __docker_complete_stack_orchestrator_options() { case \"$prev\" in --kubeconfig) _filedir return 0 ;; --namespace) return 0 ;; --orchestrator) COMPREPLY=( $( compgen -W \"all kubernetes swarm\" -- \"$cur\") ) return 0 ;; esac return 1 } __docker_complete_user_group() { if [[ $cur == *:* ]] ; then COMPREPLY=( $(compgen -g -- \"${cur#*:}\") ) else COMPREPLY=( $(compgen -u -S : -- \"$cur\") ) __docker_nospace fi } _docker_docker() { local boolean_options=\" $global_boolean_options --help --version -v \" case \"$prev\" in --config) _filedir -d return ;; --context|-c) __docker_complete_contexts return ;; --log-level|-l) __docker_complete_log_levels return ;; $(__docker_to_extglob \"$global_options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$boolean_options $global_options_with_args\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag \"$(__docker_to_extglob \"$global_options_with_args\")\" ) if [ \"$cword\" -eq \"$counter\" ]; then __docker_client_is_experimental && commands+=(${experimental_client_commands[*]}) __docker_server_is_experimental && commands+=(${experimental_server_commands[*]}) COMPREPLY=( $( compgen -W \"${commands[*]} help\" -- \"$cur\" ) ) fi ;; esac } _docker_attach() { _docker_container_attach } _docker_build() { _docker_image_build } _docker_builder() { local subcommands=\" prune \" __docker_subcommands \"$subcommands\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_builder_prune() { case \"$prev\" in --filter) COMPREPLY=( $( compgen -S = -W \"description id inuse parent private shared type until unused-for\" -- \"$cur\" ) ) __docker_nospace return ;; --keep-storage) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --filter --force -f --help --keep-storage\" -- \"$cur\" ) ) ;; esac } _docker_checkpoint() { local subcommands=\" create ls rm \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_checkpoint_create() { case \"$prev\" in --checkpoint-dir) _filedir -d return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--checkpoint-dir --help --leave-running\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--checkpoint-dir') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_running fi ;; esac } _docker_checkpoint_ls() { case \"$prev\" in --checkpoint-dir) _filedir -d return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--checkpoint-dir --help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--checkpoint-dir') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all fi ;; esac } _docker_checkpoint_rm() { case \"$prev\" in --checkpoint-dir) _filedir -d return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--checkpoint-dir --help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--checkpoint-dir') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then COMPREPLY=( $( compgen -W \"$(__docker_q checkpoint ls \"$prev\" | sed 1d)\" -- \"$cur\" ) ) fi ;; esac } _docker_config() { local subcommands=\" create inspect ls rm \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_config_create() { case \"$prev\" in --label|-l) return ;; --template-driver) COMPREPLY=( $( compgen -W \"golang\" -- \"$cur\" ) ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --label -l --template-driver\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--label|-l|--template-driver') if [ \"$cword\" -eq \"$((counter + 1))\" ]; then _filedir fi ;; esac } _docker_config_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help --pretty\" -- \"$cur\" ) ) ;; *) __docker_complete_configs ;; esac } _docker_config_list() { _docker_config_ls } _docker_config_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in id) __docker_complete_configs --cur \"${cur##*=}\" --id return ;; name) __docker_complete_configs --cur \"${cur##*=}\" --name return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"id label name\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format --filter -f --help --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_config_remove() { _docker_config_rm } _docker_config_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_configs ;; esac } _docker_container() { local subcommands=\" attach commit cp create diff exec export inspect kill logs ls pause port prune rename restart rm run start stats stop top unpause update wait \" local aliases=\" list ps \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_container_attach() { __docker_complete_detach_keys && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--detach-keys --help --no-stdin --sig-proxy=false\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--detach-keys') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_running fi ;; esac } _docker_container_commit() { case \"$prev\" in --author|-a|--change|-c|--message|-m) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--author -a --change -c --help --message -m --pause=false -p=false\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--author|-a|--change|-c|--message|-m') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all return elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_images --repo --tag return fi ;; esac } _docker_container_cp() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--archive -a --follow-link -L --help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then case \"$cur\" in *:) return ;; *) _filedir local files=( ${COMPREPLY[@]} ) __docker_complete_containers_all COMPREPLY=( $( compgen -W \"${COMPREPLY[*]}\" -S ':' ) ) local containers=( ${COMPREPLY[@]} ) COMPREPLY=( $( compgen -W \"${files[*]} ${containers[*]}\" -- \"$cur\" ) ) if [[ \"${COMPREPLY[*]}\" = *: ]]; then __docker_nospace fi return ;; esac fi (( counter++ )) if [ \"$cword\" -eq \"$counter\" ]; then if [ -e \"$prev\" ]; then __docker_complete_containers_all COMPREPLY=( $( compgen -W \"${COMPREPLY[*]}\" -S ':' ) ) __docker_nospace else _filedir fi return fi ;; esac } _docker_container_create() { _docker_container_run_and_create } _docker_container_diff() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all fi ;; esac } _docker_container_exec() { __docker_complete_detach_keys && return case \"$prev\" in --env|-e) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) __docker_nospace return ;; --user|-u) __docker_complete_user_group return ;; --workdir|-w) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--detach -d --detach-keys --env -e --help --interactive -i --privileged -t --tty -u --user --workdir -w\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_running ;; esac } _docker_container_export() { case \"$prev\" in --output|-o) _filedir return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --output -o\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all fi ;; esac } _docker_container_inspect() { _docker_inspect --type container } _docker_container_kill() { case \"$prev\" in --signal|-s) __docker_complete_signals return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --signal -s\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_running ;; esac } _docker_container_logs() { case \"$prev\" in --since|--tail|--until) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--details --follow -f --help --since --tail --timestamps -t --until\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--since|--tail|--until') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all fi ;; esac } _docker_container_list() { _docker_container_ls } _docker_container_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in ancestor) __docker_complete_images --cur \"${cur##*=}\" --repo --tag --id return ;; before) __docker_complete_containers_all --cur \"${cur##*=}\" return ;; expose|publish) return ;; id) __docker_complete_containers_all --cur \"${cur##*=}\" --id return ;; health) COMPREPLY=( $( compgen -W \"healthy starting none unhealthy\" -- \"${cur##*=}\" ) ) return ;; is-task) COMPREPLY=( $( compgen -W \"true false\" -- \"${cur##*=}\" ) ) return ;; name) __docker_complete_containers_all --cur \"${cur##*=}\" --name return ;; network) __docker_complete_networks --cur \"${cur##*=}\" return ;; since) __docker_complete_containers_all --cur \"${cur##*=}\" return ;; status) COMPREPLY=( $( compgen -W \"created dead exited paused restarting running removing\" -- \"${cur##*=}\" ) ) return ;; volume) __docker_complete_volumes --cur \"${cur##*=}\" return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"ancestor before exited expose health id is-task label name network publish since status volume\" -- \"$cur\" ) ) __docker_nospace return ;; --format|--last|-n) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --filter -f --format --help --last -n --latest -l --no-trunc --quiet -q --size -s\" -- \"$cur\" ) ) ;; esac } _docker_container_pause() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_running ;; esac } _docker_container_port() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all fi ;; esac } _docker_container_prune() { case \"$prev\" in --filter) COMPREPLY=( $( compgen -W \"label label! until\" -S = -- \"$cur\" ) ) __docker_nospace return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --filter --help\" -- \"$cur\" ) ) ;; esac } _docker_container_ps() { _docker_container_ls } _docker_container_rename() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_all fi ;; esac } _docker_container_restart() { case \"$prev\" in --time|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --time -t\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_all ;; esac } _docker_container_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help --link -l --volumes -v\" -- \"$cur\" ) ) ;; *) for arg in \"${COMP_WORDS[@]}\"; do case \"$arg\" in --force|-f) __docker_complete_containers_all return ;; esac done __docker_complete_containers_removable ;; esac } _docker_container_run() { _docker_container_run_and_create } _docker_container_run_and_create() { local options_with_args=\" --add-host --attach -a --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-parent --cidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime --cpuset-cpus --cpus --cpuset-mems --cpu-shares -c --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --dns --dns-option --dns-search --domainname --entrypoint --env -e --env-file --expose --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout --hostname -h --ip --ip6 --ipc --kernel-memory --label-file --label -l --link --link-local-ip --log-driver --log-opt --mac-address --memory -m --memory-swap --memory-swappiness --memory-reservation --mount --name --network --network-alias --oom-score-adj --pid --pids-limit --publish -p --restart --runtime --security-opt --shm-size --stop-signal --stop-timeout --storage-opt --tmpfs --sysctl --ulimit --user -u --userns --uts --volume-driver --volumes-from --volume -v --workdir -w \" __docker_server_os_is windows && options_with_args+=\" --cpu-count --cpu-percent --io-maxbandwidth --io-maxiops --isolation \" __docker_server_is_experimental && options_with_args+=\" --platform \" local boolean_options=\" --disable-content-trust=false --help --init --interactive -i --no-healthcheck --oom-kill-disable --privileged --publish-all -P --read-only --tty -t \" if [ \"$command\" = \"run\" ] || [ \"$subcommand\" = \"run\" ] ; then options_with_args=\"$options_with_args --detach-keys \" boolean_options=\"$boolean_options --detach -d --rm --sig-proxy=false \" __docker_complete_detach_keys && return fi local all_options=\"$options_with_args $boolean_options\" __docker_complete_log_driver_options && return __docker_complete_restart && return local key=$(__docker_map_key_of_current_option '--security-opt') case \"$key\" in label) [[ $cur == *: ]] && return COMPREPLY=( $( compgen -W \"user: role: type: level: disable\" -- \"${cur##*=}\") ) if [ \"${COMPREPLY[*]}\" != \"disable\" ] ; then __docker_nospace fi return ;; seccomp) local cur=${cur##*=} _filedir COMPREPLY+=( $( compgen -W \"unconfined\" -- \"$cur\" ) ) return ;; esac case \"$prev\" in --add-host) case \"$cur\" in *:) __docker_complete_resolved_hostname return ;; esac ;; --attach|-a) COMPREPLY=( $( compgen -W 'stdin stdout stderr' -- \"$cur\" ) ) return ;; --cap-add) __docker_complete_capabilities_addable return ;; --cap-drop) __docker_complete_capabilities_droppable return ;; --cidfile|--env-file|--label-file) _filedir return ;; --device|--tmpfs|--volume|-v) case \"$cur\" in *:*) ;; '') COMPREPLY=( $( compgen -W '/' -- \"$cur\" ) ) __docker_nospace ;; /*) _filedir __docker_nospace ;; esac return ;; --env|-e) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) __docker_nospace return ;; --ipc) case \"$cur\" in *:*) cur=\"${cur#*:}\" __docker_complete_containers_running ;; *) COMPREPLY=( $( compgen -W 'none host private shareable container:' -- \"$cur\" ) ) if [ \"${COMPREPLY[*]}\" = \"container:\" ]; then __docker_nospace fi ;; esac return ;; --isolation) if __docker_server_os_is windows ; then __docker_complete_isolation return fi ;; --link) case \"$cur\" in *:*) ;; *) __docker_complete_containers_running COMPREPLY=( $( compgen -W \"${COMPREPLY[*]}\" -S ':' ) ) __docker_nospace ;; esac return ;; --log-driver) __docker_complete_log_drivers return ;; --log-opt) __docker_complete_log_options return ;; --network) case \"$cur\" in container:*) __docker_complete_containers_all --cur \"${cur#*:}\" ;; *) COMPREPLY=( $( compgen -W \"$(__docker_plugins_bundled --type Network) $(__docker_networks) container:\" -- \"$cur\") ) if [ \"${COMPREPLY[*]}\" = \"container:\" ] ; then __docker_nospace fi ;; esac return ;; --pid) case \"$cur\" in *:*) __docker_complete_containers_running --cur \"${cur#*:}\" ;; *) COMPREPLY=( $( compgen -W 'host container:' -- \"$cur\" ) ) if [ \"${COMPREPLY[*]}\" = \"container:\" ]; then __docker_nospace fi ;; esac return ;; --runtime) __docker_complete_runtimes return ;; --security-opt) COMPREPLY=( $( compgen -W \"apparmor= label= no-new-privileges seccomp=\" -- \"$cur\") ) if [ \"${COMPREPLY[*]}\" != \"no-new-privileges\" ] ; then __docker_nospace fi return ;; --stop-signal) __docker_complete_signals return ;; --storage-opt) COMPREPLY=( $( compgen -W \"size\" -S = -- \"$cur\") ) __docker_nospace return ;; --user|-u) __docker_complete_user_group return ;; --userns) COMPREPLY=( $( compgen -W \"host\" -- \"$cur\" ) ) return ;; --volume-driver) __docker_complete_plugins_bundled --type Volume return ;; --volumes-from) __docker_complete_containers_all return ;; $(__docker_to_extglob \"$options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$all_options\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag \"$( __docker_to_alternatives \"$options_with_args\" )\" ) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --repo --tag --id fi ;; esac } _docker_container_start() { __docker_complete_detach_keys && return case \"$prev\" in --checkpoint) if __docker_server_is_experimental ; then return fi ;; --checkpoint-dir) if __docker_server_is_experimental ; then _filedir -d return fi ;; esac case \"$cur\" in -*) local options=\"--attach -a --detach-keys --help --interactive -i\" __docker_server_is_experimental && options+=\" --checkpoint --checkpoint-dir\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_stopped ;; esac } _docker_container_stats() { case \"$prev\" in --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --format --help --no-stream --no-trunc\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_running ;; esac } _docker_container_stop() { case \"$prev\" in --time|-t) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --time -t\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_stoppable ;; esac } _docker_container_top() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_running fi ;; esac } _docker_container_unpause() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_containers_unpauseable fi ;; esac } _docker_container_update() { local options_with_args=\" --blkio-weight --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime --cpus --cpuset-cpus --cpuset-mems --cpu-shares -c --kernel-memory --memory -m --memory-reservation --memory-swap --pids-limit --restart \" local boolean_options=\" --help \" local all_options=\"$options_with_args $boolean_options\" __docker_complete_restart && return case \"$prev\" in $(__docker_to_extglob \"$options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$all_options\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_all ;; esac } _docker_container_wait() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_containers_all ;; esac } _docker_context() { local subcommands=\" create export import inspect ls rm update use \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_context_create() { case \"$prev\" in --default-stack-orchestrator) COMPREPLY=( $( compgen -W \"all kubernetes swarm\" -- \"$cur\" ) ) return ;; --description|--docker|--kubernetes) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--default-stack-orchestrator --description --docker --help --kubernetes\" -- \"$cur\" ) ) ;; esac } _docker_context_export() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --kubeconfig\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_contexts elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then _filedir fi ;; esac } _docker_context_import() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then : elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then _filedir fi ;; esac } _docker_context_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_contexts ;; esac } _docker_context_list() { _docker_context_ls } _docker_context_ls() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_context_remove() { _docker_context_rm } _docker_context_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_contexts ;; esac } _docker_context_update() { case \"$prev\" in --default-stack-orchestrator) COMPREPLY=( $( compgen -W \"all kubernetes swarm\" -- \"$cur\" ) ) return ;; --description|--docker|--kubernetes) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--default-stack-orchestrator --description --docker --help --kubernetes\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_contexts fi ;; esac } _docker_context_use() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_contexts --add default fi ;; esac } _docker_commit() { _docker_container_commit } _docker_cp() { _docker_container_cp } _docker_create() { _docker_container_create } _docker_daemon() { local boolean_options=\" $global_boolean_options --experimental --help --icc=false --init --ip-forward=false --ip-masq=false --iptables=false --ipv6 --live-restore --no-new-privileges --raw-logs --selinux-enabled --userland-proxy=false --version -v \" local options_with_args=\" $global_options_with_args --add-runtime --allow-nondistributable-artifacts --api-cors-header --authorization-plugin --bip --bridge -b --cgroup-parent --cluster-advertise --cluster-store --cluster-store-opt --config-file --containerd --cpu-rt-period --cpu-rt-runtime --data-root --default-address-pool --default-gateway --default-gateway-v6 --default-runtime --default-shm-size --default-ulimit --dns --dns-search --dns-opt --exec-opt --exec-root --fixed-cidr --fixed-cidr-v6 --group -G --init-path --insecure-registry --ip --label --log-driver --log-opt --max-concurrent-downloads --max-concurrent-uploads --metrics-addr --mtu --network-control-plane-mtu --node-generic-resource --oom-score-adjust --pidfile -p --registry-mirror --seccomp-profile --shutdown-timeout --storage-driver -s --storage-opt --swarm-default-advertise-addr --userland-proxy-path --userns-remap \" __docker_complete_log_driver_options && return key=$(__docker_map_key_of_current_option '--cluster-store-opt') case \"$key\" in kv.*file) cur=${cur##*=} _filedir return ;; esac local key=$(__docker_map_key_of_current_option '--storage-opt') case \"$key\" in dm.blkdiscard|dm.override_udev_sync_check|dm.use_deferred_removal|dm.use_deferred_deletion) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; dm.directlvm_device|dm.thinpooldev) cur=${cur##*=} _filedir return ;; dm.fs) COMPREPLY=( $( compgen -W \"ext4 xfs\" -- \"${cur##*=}\" ) ) return ;; dm.libdm_log_level) COMPREPLY=( $( compgen -W \"2 3 4 5 6 7\" -- \"${cur##*=}\" ) ) return ;; esac case \"$prev\" in --authorization-plugin) __docker_complete_plugins_bundled --type Authorization return ;; --cluster-store) COMPREPLY=( $( compgen -W \"consul etcd zk\" -S \"://\" -- \"$cur\" ) ) __docker_nospace return ;; --cluster-store-opt) COMPREPLY=( $( compgen -W \"discovery.heartbeat discovery.ttl kv.cacertfile kv.certfile kv.keyfile kv.path\" -S = -- \"$cur\" ) ) __docker_nospace return ;; --config-file|--containerd|--init-path|--pidfile|-p|--tlscacert|--tlscert|--tlskey|--userland-proxy-path) _filedir return ;; --exec-root|--data-root) _filedir -d return ;; --log-driver) __docker_complete_log_drivers return ;; --storage-driver|-s) COMPREPLY=( $( compgen -W \"aufs btrfs devicemapper overlay overlay2 vfs zfs\" -- \"$(echo \"$cur\" | tr '[:upper:]' '[:lower:]')\" ) ) return ;; --storage-opt) local btrfs_options=\"btrfs.min_space\" local devicemapper_options=\" dm.basesize dm.blkdiscard dm.blocksize dm.directlvm_device dm.fs dm.libdm_log_level dm.loopdatasize dm.loopmetadatasize dm.min_free_space dm.mkfsarg dm.mountopt dm.override_udev_sync_check dm.thinpooldev dm.thinp_autoextend_percent dm.thinp_autoextend_threshold dm.thinp_metapercent dm.thinp_percent dm.use_deferred_deletion dm.use_deferred_removal \" local overlay2_options=\"overlay2.size\" local zfs_options=\"zfs.fsname\" local all_options=\"$btrfs_options $devicemapper_options $overlay2_options $zfs_options\" case $(__docker_value_of_option '--storage-driver|-s') in '') COMPREPLY=( $( compgen -W \"$all_options\" -S = -- \"$cur\" ) ) ;; btrfs) COMPREPLY=( $( compgen -W \"$btrfs_options\" -S = -- \"$cur\" ) ) ;; devicemapper) COMPREPLY=( $( compgen -W \"$devicemapper_options\" -S = -- \"$cur\" ) ) ;; overlay2) COMPREPLY=( $( compgen -W \"$overlay2_options\" -S = -- \"$cur\" ) ) ;; zfs) COMPREPLY=( $( compgen -W \"$zfs_options\" -S = -- \"$cur\" ) ) ;; *) return ;; esac __docker_nospace return ;; --log-level|-l) __docker_complete_log_levels return ;; --log-opt) __docker_complete_log_options return ;; --metrics-addr) __docker_complete_local_ips __docker_append_to_completions \":\" __docker_nospace return ;; --seccomp-profile) _filedir json return ;; --swarm-default-advertise-addr) __docker_complete_local_interfaces return ;; --userns-remap) __docker_complete_user_group return ;; $(__docker_to_extglob \"$options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$boolean_options $options_with_args\" -- \"$cur\" ) ) ;; esac } _docker_deploy() { __docker_server_is_experimental && _docker_stack_deploy } _docker_diff() { _docker_container_diff } _docker_engine() { local subcommands=\" activate check update \" __docker_subcommands \"$subcommands\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_engine_activate() { case \"$prev\" in --containerd|--engine-image|--format|--license|--registry-prefix|--version) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--containerd --display-only --engine-image --format --help --license --quiet --registry-prefix --version\" -- \"$cur\" ) ) ;; esac } _docker_engine_check() { case \"$prev\" in --containerd|--engine-image|--format|--registry-prefix) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--containerd --downgrades --engine-image --format --help --pre-releases --quiet -q --registry-prefix --upgrades\" -- \"$cur\" ) ) ;; esac } _docker_engine_update() { case \"$prev\" in --containerd|--engine-image|--registry-prefix|--version) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--containerd --engine-image --help --registry-prefix --version\" -- \"$cur\" ) ) ;; esac } _docker_events() { _docker_system_events } _docker_exec() { _docker_container_exec } _docker_export() { _docker_container_export } _docker_help() { local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then COMPREPLY=( $( compgen -W \"${commands[*]}\" -- \"$cur\" ) ) fi } _docker_history() { _docker_image_history } _docker_image() { local subcommands=\" build history import inspect load ls prune pull push rm save tag \" local aliases=\" images list remove rmi \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_image_build() { local options_with_args=\" --add-host --build-arg --cache-from --cgroup-parent --cpuset-cpus --cpuset-mems --cpu-shares -c --cpu-period --cpu-quota --file -f --iidfile --label --memory -m --memory-swap --network --shm-size --tag -t --target --ulimit \" __docker_server_os_is windows && options_with_args+=\" --isolation \" local boolean_options=\" --compress --disable-content-trust=false --force-rm --help --no-cache --pull --quiet -q --rm \" if __docker_server_is_experimental ; then options_with_args+=\" --platform \" boolean_options+=\" --squash --stream \" fi local all_options=\"$options_with_args $boolean_options\" case \"$prev\" in --add-host) case \"$cur\" in *:) __docker_complete_resolved_hostname return ;; esac ;; --build-arg) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) __docker_nospace return ;; --cache-from) __docker_complete_images --repo --tag --id return ;; --file|-f|--iidfile) _filedir return ;; --isolation) if __docker_server_os_is windows ; then __docker_complete_isolation return fi ;; --network) case \"$cur\" in container:*) __docker_complete_containers_all --cur \"${cur#*:}\" ;; *) COMPREPLY=( $( compgen -W \"$(__docker_plugins_bundled --type Network) $(__docker_networks) container:\" -- \"$cur\") ) if [ \"${COMPREPLY[*]}\" = \"container:\" ] ; then __docker_nospace fi ;; esac return ;; --tag|-t) __docker_complete_images --repo --tag return ;; --target) local context_pos=$( __docker_pos_first_nonflag \"$( __docker_to_alternatives \"$options_with_args\" )\" ) local context=\"${words[$context_pos]}\" context=\"${context:-.}\" local file=\"$( __docker_value_of_option '--file|f' )\" local default_file=\"${context%/}/Dockerfile\" local dockerfile=\"${file:-$default_file}\" local targets=\"$( sed -n 's/^FROM .\\+ AS \\(.\\+\\)/\\1/p' \"$dockerfile\" 2>/dev/null )\" COMPREPLY=( $( compgen -W \"$targets\" -- \"$cur\" ) ) return ;; $(__docker_to_extglob \"$options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$all_options\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag \"$( __docker_to_alternatives \"$options_with_args\" )\" ) if [ \"$cword\" -eq \"$counter\" ]; then _filedir -d fi ;; esac } _docker_image_history() { case \"$prev\" in --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format --help --human=false -H=false --no-trunc --quiet -q\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--format') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --force-tag --id fi ;; esac } _docker_image_images() { _docker_image_ls } _docker_image_import() { case \"$prev\" in --change|-c|--message|-m|--platform) return ;; esac case \"$cur\" in -*) local options=\"--change -c --help --message -m\" __docker_server_is_experimental && options+=\" --platform\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--change|-c|--message|-m') if [ \"$cword\" -eq \"$counter\" ]; then _filedir return elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_images --repo --tag return fi ;; esac } _docker_image_inspect() { _docker_inspect --type image } _docker_image_load() { case \"$prev\" in --input|-i|\"<\") _filedir return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --input -i --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_image_list() { _docker_image_ls } _docker_image_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in before|since) __docker_complete_images --cur \"${cur##*=}\" --force-tag --id return ;; dangling) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; label) return ;; reference) __docker_complete_images --cur \"${cur##*=}\" --repo --tag return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"before dangling label reference since\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --digests --filter -f --format --help --no-trunc --quiet -q\" -- \"$cur\" ) ) ;; =) return ;; *) __docker_complete_images --repo --tag ;; esac } _docker_image_prune() { case \"$prev\" in --filter) COMPREPLY=( $( compgen -W \"label label! until\" -S = -- \"$cur\" ) ) __docker_nospace return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --force -f --filter --help\" -- \"$cur\" ) ) ;; esac } _docker_image_pull() { case \"$prev\" in --platform) return ;; esac case \"$cur\" in -*) local options=\"--all-tags -a --disable-content-trust=false --help --quiet -q\" __docker_server_is_experimental && options+=\" --platform\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag --platform) if [ \"$cword\" -eq \"$counter\" ]; then for arg in \"${COMP_WORDS[@]}\"; do case \"$arg\" in --all-tags|-a) __docker_complete_images --repo return ;; esac done __docker_complete_images --repo --tag fi ;; esac } _docker_image_push() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--disable-content-trust=false --help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --repo --tag fi ;; esac } _docker_image_remove() { _docker_image_rm } _docker_image_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help --no-prune\" -- \"$cur\" ) ) ;; *) __docker_complete_images --force-tag --id ;; esac } _docker_image_rmi() { _docker_image_rm } _docker_image_save() { case \"$prev\" in --output|-o|\">\") _filedir return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --output -o\" -- \"$cur\" ) ) ;; *) __docker_complete_images --repo --tag --id ;; esac } _docker_image_tag() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --force-tag --id return elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_images --repo --tag return fi ;; esac } _docker_images() { _docker_image_ls } _docker_import() { _docker_image_import } _docker_info() { _docker_system_info } _docker_inspect() { local preselected_type local type if [ \"$1\" = \"--type\" ] ; then preselected_type=yes type=\"$2\" else type=$(__docker_value_of_option --type) fi case \"$prev\" in --format|-f) return ;; --type) if [ -z \"$preselected_type\" ] ; then COMPREPLY=( $( compgen -W \"container image network node plugin secret service volume\" -- \"$cur\" ) ) return fi ;; esac case \"$cur\" in -*) local options=\"--format -f --help --size -s\" if [ -z \"$preselected_type\" ] ; then options+=\" --type\" fi COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) case \"$type\" in '') COMPREPLY=( $( compgen -W \" $(__docker_containers --all) $(__docker_images --force-tag --id) $(__docker_networks) $(__docker_nodes) $(__docker_plugins_installed) $(__docker_secrets) $(__docker_services) $(__docker_volumes) \" -- \"$cur\" ) ) __ltrim_colon_completions \"$cur\" ;; container) __docker_complete_containers_all ;; image) __docker_complete_images --force-tag --id ;; network) __docker_complete_networks ;; node) __docker_complete_nodes ;; plugin) __docker_complete_plugins_installed ;; secret) __docker_complete_secrets ;; service) __docker_complete_services ;; volume) __docker_complete_volumes ;; esac esac } _docker_kill() { _docker_container_kill } _docker_load() { _docker_image_load } _docker_login() { case \"$prev\" in --password|-p|--username|-u) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --password -p --password-stdin --username -u\" -- \"$cur\" ) ) ;; esac } _docker_logout() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; esac } _docker_logs() { _docker_container_logs } _docker_network_connect() { local options_with_args=\" --alias --ip --ip6 --link --link-local-ip \" local boolean_options=\" --help \" case \"$prev\" in --link) case \"$cur\" in *:*) ;; *) __docker_complete_containers_running COMPREPLY=( $( compgen -W \"${COMPREPLY[*]}\" -S ':' ) ) __docker_nospace ;; esac return ;; $(__docker_to_extglob \"$options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$boolean_options $options_with_args\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag \"$( __docker_to_alternatives \"$options_with_args\" )\" ) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_networks elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_containers_all fi ;; esac } _docker_network_create() { case \"$prev\" in --aux-address|--gateway|--ip-range|--ipam-opt|--ipv6|--opt|-o|--subnet) return ;; --config-from) __docker_complete_networks return ;; --driver|-d) __docker_complete_plugins_bundled --type Network --remove host --remove null --add macvlan return ;; --ipam-driver) COMPREPLY=( $( compgen -W \"default\" -- \"$cur\" ) ) return ;; --label) return ;; --scope) COMPREPLY=( $( compgen -W \"local swarm\" -- \"$cur\" ) ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--attachable --aux-address --config-from --config-only --driver -d --gateway --help --ingress --internal --ip-range --ipam-driver --ipam-opt --ipv6 --label --opt -o --scope --subnet\" -- \"$cur\" ) ) ;; esac } _docker_network_disconnect() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_networks elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_containers_in_network \"$prev\" fi ;; esac } _docker_network_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help --verbose\" -- \"$cur\" ) ) ;; *) __docker_complete_networks esac } _docker_network_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in dangling) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; driver) __docker_complete_plugins_bundled --cur \"${cur##*=}\" --type Network --add macvlan return ;; id) __docker_complete_networks --cur \"${cur##*=}\" --id return ;; name) __docker_complete_networks --cur \"${cur##*=}\" --name return ;; scope) COMPREPLY=( $( compgen -W \"global local swarm\" -- \"${cur##*=}\" ) ) return ;; type) COMPREPLY=( $( compgen -W \"builtin custom\" -- \"${cur##*=}\" ) ) return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"dangling driver id label name scope type\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --no-trunc --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_network_prune() { case \"$prev\" in --filter) COMPREPLY=( $( compgen -W \"label label! until\" -S = -- \"$cur\" ) ) __docker_nospace return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --filter --help\" -- \"$cur\" ) ) ;; esac } _docker_network_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_networks --filter type=custom esac } _docker_network() { local subcommands=\" connect create disconnect inspect ls prune rm \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_service() { local subcommands=\" create inspect logs ls rm rollback scale ps update \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_service_create() { _docker_service_update_and_create } _docker_service_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help --pretty\" -- \"$cur\" ) ) ;; *) __docker_complete_services esac } _docker_service_logs() { case \"$prev\" in --since|--tail) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--details --follow -f --help --no-resolve --no-task-ids --no-trunc --raw --since --tail --timestamps -t\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--since|--tail') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_services_and_tasks fi ;; esac } _docker_service_list() { _docker_service_ls } _docker_service_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in id) __docker_complete_services --cur \"${cur##*=}\" --id return ;; mode) COMPREPLY=( $( compgen -W \"global replicated\" -- \"${cur##*=}\" ) ) return ;; name) __docker_complete_services --cur \"${cur##*=}\" --name return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -W \"id label mode name\" -S = -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_service_remove() { _docker_service_rm } _docker_service_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_services esac } _docker_service_rollback() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--detach -d --help --quit -q\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag ) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_services fi ;; esac } _docker_service_scale() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--detach -d --help\" -- \"$cur\" ) ) ;; *) __docker_complete_services __docker_append_to_completions \"=\" __docker_nospace ;; esac } _docker_service_ps() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in desired-state) COMPREPLY=( $( compgen -W \"accepted running shutdown\" -- \"${cur##*=}\" ) ) return ;; name) __docker_complete_services --cur \"${cur##*=}\" --name return ;; node) __docker_complete_nodes --cur \"${cur##*=}\" --add self return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -W \"desired-state id name node\" -S = -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --no-resolve --no-trunc --quiet -q\" -- \"$cur\" ) ) ;; *) __docker_complete_services ;; esac } _docker_service_update() { _docker_service_update_and_create } _docker_service_update_and_create() { local options_with_args=\" --endpoint-mode --entrypoint --health-cmd --health-interval --health-retries --health-start-period --health-timeout --hostname --isolation --limit-cpu --limit-memory --log-driver --log-opt --replicas --replicas-max-per-node --reserve-cpu --reserve-memory --restart-condition --restart-delay --restart-max-attempts --restart-window --rollback-delay --rollback-failure-action --rollback-max-failure-ratio --rollback-monitor --rollback-order --rollback-parallelism --stop-grace-period --stop-signal --update-delay --update-failure-action --update-max-failure-ratio --update-monitor --update-order --update-parallelism --user -u --workdir -w \" __docker_server_os_is windows && options_with_args+=\" --credential-spec \" local boolean_options=\" --detach -d --help --init --no-healthcheck --no-resolve-image --read-only --tty -t --with-registry-auth \" __docker_complete_log_driver_options && return if [ \"$subcommand\" = \"create\" ] ; then options_with_args=\"$options_with_args --config --constraint --container-label --dns --dns-option --dns-search --env -e --env-file --generic-resource --group --host --label -l --mode --mount --name --network --placement-pref --publish -p --secret --sysctl \" case \"$prev\" in --env-file) _filedir return ;; --mode) COMPREPLY=( $( compgen -W \"global replicated\" -- \"$cur\" ) ) return ;; esac fi if [ \"$subcommand\" = \"update\" ] ; then options_with_args=\"$options_with_args --args --config-add --config-rm --constraint-add --constraint-rm --container-label-add --container-label-rm --dns-add --dns-option-add --dns-option-rm --dns-rm --dns-search-add --dns-search-rm --env-add --env-rm --generic-resource-add --generic-resource-rm --group-add --group-rm --host-add --host-rm --image --label-add --label-rm --mount-add --mount-rm --network-add --network-rm --placement-pref-add --placement-pref-rm --publish-add --publish-rm --rollback --secret-add --secret-rm --sysctl-add --sysctl-rm \" boolean_options=\"$boolean_options --force \" case \"$prev\" in --env-rm) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) return ;; --image) __docker_complete_images --repo --tag --id return ;; esac fi local strategy=$(__docker_map_key_of_current_option '--placement-pref|--placement-pref-add|--placement-pref-rm') case \"$strategy\" in spread) COMPREPLY=( $( compgen -W \"engine.labels node.labels\" -S . -- \"${cur##*=}\" ) ) __docker_nospace return ;; esac case \"$prev\" in --config|--config-add|--config-rm) __docker_complete_configs return ;; --endpoint-mode) COMPREPLY=( $( compgen -W \"dnsrr vip\" -- \"$cur\" ) ) return ;; --env|-e|--env-add) COMPREPLY=( $( compgen -e -- \"$cur\" ) ) __docker_nospace return ;; --group|--group-add|--group-rm) COMPREPLY=( $(compgen -g -- \"$cur\") ) return ;; --host|--host-add|--host-rm) case \"$cur\" in *:) __docker_complete_resolved_hostname return ;; esac ;; --isolation) __docker_complete_isolation return ;; --log-driver) __docker_complete_log_drivers return ;; --log-opt) __docker_complete_log_options return ;; --network|--network-add|--network-rm) __docker_complete_networks return ;; --placement-pref|--placement-pref-add|--placement-pref-rm) COMPREPLY=( $( compgen -W \"spread\" -S = -- \"$cur\" ) ) __docker_nospace return ;; --restart-condition) COMPREPLY=( $( compgen -W \"any none on-failure\" -- \"$cur\" ) ) return ;; --rollback-failure-action) COMPREPLY=( $( compgen -W \"continue pause\" -- \"$cur\" ) ) return ;; --secret|--secret-add|--secret-rm) __docker_complete_secrets return ;; --stop-signal) __docker_complete_signals return ;; --update-failure-action) COMPREPLY=( $( compgen -W \"continue pause rollback\" -- \"$cur\" ) ) return ;; --update-order|--rollback-order) COMPREPLY=( $( compgen -W \"start-first stop-first\" -- \"$cur\" ) ) return ;; --user|-u) __docker_complete_user_group return ;; $(__docker_to_extglob \"$options_with_args\") ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"$boolean_options $options_with_args\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag \"$( __docker_to_alternatives \"$options_with_args\" )\" ) if [ \"$subcommand\" = \"update\" ] ; then if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_services fi else if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --repo --tag --id fi fi ;; esac } _docker_swarm() { local subcommands=\" ca init join join-token leave unlock unlock-key update \" __docker_subcommands \"$subcommands\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_swarm_ca() { case \"$prev\" in --ca-cert|--ca-key) _filedir return ;; --cert-expiry|--external-ca) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--ca-cert --ca-key --cert-expiry --detach -d --external-ca --help --quiet -q --rotate\" -- \"$cur\" ) ) ;; esac } _docker_swarm_init() { case \"$prev\" in --advertise-addr) if [[ $cur == *: ]] ; then COMPREPLY=( $( compgen -W \"2377\" -- \"${cur##*:}\" ) ) else __docker_complete_local_interfaces __docker_nospace fi return ;; --availability) COMPREPLY=( $( compgen -W \"active drain pause\" -- \"$cur\" ) ) return ;; --cert-expiry|--data-path-port|--default-addr-pool|--default-addr-pool-mask-length|--dispatcher-heartbeat|--external-ca|--max-snapshots|--snapshot-interval|--task-history-limit ) return ;; --data-path-addr) __docker_complete_local_interfaces return ;; --listen-addr) if [[ $cur == *: ]] ; then COMPREPLY=( $( compgen -W \"2377\" -- \"${cur##*:}\" ) ) else __docker_complete_local_interfaces --add 0.0.0.0 __docker_nospace fi return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--advertise-addr --autolock --availability --cert-expiry --data-path-addr --data-path-port --default-addr-pool --default-addr-pool-mask-length --dispatcher-heartbeat --external-ca --force-new-cluster --help --listen-addr --max-snapshots --snapshot-interval --task-history-limit \" -- \"$cur\" ) ) ;; esac } _docker_swarm_join() { case \"$prev\" in --advertise-addr) if [[ $cur == *: ]] ; then COMPREPLY=( $( compgen -W \"2377\" -- \"${cur##*:}\" ) ) else __docker_complete_local_interfaces __docker_nospace fi return ;; --availability) COMPREPLY=( $( compgen -W \"active drain pause\" -- \"$cur\" ) ) return ;; --data-path-addr) __docker_complete_local_interfaces return ;; --listen-addr) if [[ $cur == *: ]] ; then COMPREPLY=( $( compgen -W \"2377\" -- \"${cur##*:}\" ) ) else __docker_complete_local_interfaces --add 0.0.0.0 __docker_nospace fi return ;; --token) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--advertise-addr --availability --data-path-addr --help --listen-addr --token\" -- \"$cur\" ) ) ;; *:) COMPREPLY=( $( compgen -W \"2377\" -- \"${cur##*:}\" ) ) ;; esac } _docker_swarm_join_token() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --quiet -q --rotate\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag ) if [ \"$cword\" -eq \"$counter\" ]; then COMPREPLY=( $( compgen -W \"manager worker\" -- \"$cur\" ) ) fi ;; esac } _docker_swarm_leave() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help\" -- \"$cur\" ) ) ;; esac } _docker_swarm_unlock() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; esac } _docker_swarm_unlock_key() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --quiet -q --rotate\" -- \"$cur\" ) ) ;; esac } _docker_swarm_update() { case \"$prev\" in --cert-expiry|--dispatcher-heartbeat|--external-ca|--max-snapshots|--snapshot-interval|--task-history-limit) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--autolock --cert-expiry --dispatcher-heartbeat --external-ca --help --max-snapshots --snapshot-interval --task-history-limit\" -- \"$cur\" ) ) ;; esac } _docker_manifest() { local subcommands=\" annotate create inspect push \" __docker_subcommands \"$subcommands\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_manifest_annotate() { case \"$prev\" in --arch) COMPREPLY=( $( compgen -W \" 386 amd64 arm arm64 mips64 mips64le ppc64le s390x\" -- \"$cur\" ) ) return ;; --os) COMPREPLY=( $( compgen -W \" darwin dragonfly freebsd linux netbsd openbsd plan9 solaris windows\" -- \"$cur\" ) ) return ;; --os-features|--variant) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--arch --help --os --os-features --variant\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag \"--arch|--os|--os-features|--variant\" ) if [ \"$cword\" -eq \"$counter\" ] || [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_images --force-tag --id fi ;; esac } _docker_manifest_create() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--amend -a --help --insecure\" -- \"$cur\" ) ) ;; *) __docker_complete_images --force-tag --id ;; esac } _docker_manifest_inspect() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --insecure --verbose -v\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag ) if [ \"$cword\" -eq \"$counter\" ] || [ \"$cword\" -eq \"$((counter + 1))\" ]; then __docker_complete_images --force-tag --id fi ;; esac } _docker_manifest_push() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --insecure --purge -p\" -- \"$cur\" ) ) ;; *) local counter=$( __docker_pos_first_nonflag ) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --force-tag --id fi ;; esac } _docker_node() { local subcommands=\" demote inspect ls promote rm ps update \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_node_demote() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_nodes --filter role=manager esac } _docker_node_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help --pretty\" -- \"$cur\" ) ) ;; *) __docker_complete_nodes --add self esac } _docker_node_list() { _docker_node_ls } _docker_node_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in id) __docker_complete_nodes --cur \"${cur##*=}\" --id return ;; membership) COMPREPLY=( $( compgen -W \"accepted pending\" -- \"${cur##*=}\" ) ) return ;; name) __docker_complete_nodes --cur \"${cur##*=}\" --name return ;; role) COMPREPLY=( $( compgen -W \"manager worker\" -- \"${cur##*=}\" ) ) return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -W \"id label membership name role\" -S = -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_node_promote() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_nodes --filter role=worker esac } _docker_node_remove() { _docker_node_rm } _docker_node_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_nodes esac } _docker_node_ps() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in desired-state) COMPREPLY=( $( compgen -W \"accepted running shutdown\" -- \"${cur##*=}\" ) ) return ;; name) __docker_complete_services --cur \"${cur##*=}\" --name return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -W \"desired-state id label name\" -S = -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --no-resolve --no-trunc --quiet -q\" -- \"$cur\" ) ) ;; *) __docker_complete_nodes --add self ;; esac } _docker_node_update() { case \"$prev\" in --availability) COMPREPLY=( $( compgen -W \"active drain pause\" -- \"$cur\" ) ) return ;; --role) COMPREPLY=( $( compgen -W \"manager worker\" -- \"$cur\" ) ) return ;; --label-add|--label-rm) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--availability --help --label-add --label-rm --role\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--availability|--label-add|--label-rm|--role') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_nodes fi ;; esac } _docker_pause() { _docker_container_pause } _docker_plugin() { local subcommands=\" create disable enable inspect install ls push rm set upgrade \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_plugin_create() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--compress --help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then return elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then _filedir -d fi ;; esac } _docker_plugin_disable() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_plugins_installed --filter enabled=true fi ;; esac } _docker_plugin_enable() { case \"$prev\" in --timeout) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --timeout\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--timeout') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_plugins_installed --filter enabled=false fi ;; esac } _docker_plugin_inspect() { case \"$prev\" in --format|f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_plugins_installed ;; esac } _docker_plugin_install() { case \"$prev\" in --alias) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--alias --disable --disable-content-trust=false --grant-all-permissions --help\" -- \"$cur\" ) ) ;; esac } _docker_plugin_list() { _docker_plugin_ls } _docker_plugin_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in capability) COMPREPLY=( $( compgen -W \"authz ipamdriver logdriver metricscollector networkdriver volumedriver\" -- \"${cur##*=}\" ) ) return ;; enabled) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"capability enabled\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --no-trunc --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_plugin_push() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_plugins_installed fi ;; esac } _docker_plugin_remove() { _docker_plugin_rm } _docker_plugin_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_plugins_installed ;; esac } _docker_plugin_set() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_plugins_installed fi ;; esac } _docker_plugin_upgrade() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--disable-content-trust --grant-all-permissions --help --skip-remote-check\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_plugins_installed __ltrim_colon_completions \"$cur\" elif [ \"$cword\" -eq \"$((counter + 1))\" ]; then local plugin_images=\"$(__docker_plugins_installed)\" COMPREPLY=( $(compgen -S : -W \"${plugin_images%:*}\" -- \"$cur\") ) __docker_nospace fi ;; esac } _docker_port() { _docker_container_port } _docker_ps() { _docker_container_ls } _docker_pull() { _docker_image_pull } _docker_push() { _docker_image_push } _docker_rename() { _docker_container_rename } _docker_restart() { _docker_container_restart } _docker_rm() { _docker_container_rm } _docker_rmi() { _docker_image_rm } _docker_run() { _docker_container_run } _docker_save() { _docker_image_save } _docker_secret() { local subcommands=\" create inspect ls rm \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_secret_create() { case \"$prev\" in --driver|-d|--label|-l) return ;; --template-driver) COMPREPLY=( $( compgen -W \"golang\" -- \"$cur\" ) ) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--driver -d --help --label -l --template-driver\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--driver|-d|--label|-l|--template-driver') if [ \"$cword\" -eq \"$((counter + 1))\" ]; then _filedir fi ;; esac } _docker_secret_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help --pretty\" -- \"$cur\" ) ) ;; *) __docker_complete_secrets ;; esac } _docker_secret_list() { _docker_secret_ls } _docker_secret_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in id) __docker_complete_secrets --cur \"${cur##*=}\" --id return ;; name) __docker_complete_secrets --cur \"${cur##*=}\" --name return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"id label name\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format --filter -f --help --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_secret_remove() { _docker_secret_rm } _docker_secret_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) __docker_complete_secrets ;; esac } _docker_search() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in is-automated) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; is-official) COMPREPLY=( $( compgen -W \"false true\" -- \"${cur##*=}\" ) ) return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"is-automated is-official stars\" -- \"$cur\" ) ) __docker_nospace return ;; --format|--limit) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --limit --no-trunc\" -- \"$cur\" ) ) ;; esac } _docker_stack() { local subcommands=\" deploy ls ps rm services \" local aliases=\" down list remove up \" __docker_complete_stack_orchestrator_options && return __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) local options=\"--help --orchestrator\" __docker_stack_orchestrator_is kubernetes && options+=\" --kubeconfig\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_stack_deploy() { __docker_complete_stack_orchestrator_options && return case \"$prev\" in --bundle-file) _filedir dab return ;; --compose-file|-c) _filedir yml return ;; --resolve-image) COMPREPLY=( $( compgen -W \"always changed never\" -- \"$cur\" ) ) return ;; esac case \"$cur\" in -*) local options=\"--compose-file -c --help --orchestrator\" __docker_server_is_experimental && __docker_stack_orchestrator_is swarm && options+=\" --bundle-file\" __docker_stack_orchestrator_is kubernetes && options+=\" --kubeconfig --namespace\" __docker_stack_orchestrator_is swarm && options+=\" --prune --resolve-image --with-registry-auth\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--bundle-file|--compose-file|-c|--kubeconfig|--namespace|--orchestrator|--resolve-image') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_stacks fi ;; esac } _docker_stack_down() { _docker_stack_rm } _docker_stack_list() { _docker_stack_ls } _docker_stack_ls() { __docker_complete_stack_orchestrator_options && return case \"$prev\" in --format) return ;; esac case \"$cur\" in -*) local options=\"--format --help --orchestrator\" __docker_stack_orchestrator_is kubernetes && options+=\" --all-namespaces --kubeconfig --namespace\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; esac } _docker_stack_ps() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in desired-state) COMPREPLY=( $( compgen -W \"accepted running shutdown\" -- \"${cur##*=}\" ) ) return ;; id) __docker_complete_stacks --cur \"${cur##*=}\" --id return ;; name) __docker_complete_stacks --cur \"${cur##*=}\" --name return ;; esac __docker_complete_stack_orchestrator_options && return case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"id name desired-state\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) local options=\"--filter -f --format --help --no-resolve --no-trunc --orchestrator --quiet -q\" __docker_stack_orchestrator_is kubernetes && options+=\" --all-namespaces --kubeconfig --namespace\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--all-namespaces|--filter|-f|--format|--kubeconfig|--namespace') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_stacks fi ;; esac } _docker_stack_remove() { _docker_stack_rm } _docker_stack_rm() { __docker_complete_stack_orchestrator_options && return case \"$cur\" in -*) local options=\"--help --orchestrator\" __docker_stack_orchestrator_is kubernetes && options+=\" --kubeconfig --namespace\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) __docker_complete_stacks ;; esac } _docker_stack_services() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in id) __docker_complete_services --cur \"${cur##*=}\" --id return ;; label) return ;; name) __docker_complete_services --cur \"${cur##*=}\" --name return ;; esac __docker_complete_stack_orchestrator_options && return case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"id label name\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) local options=\"--filter -f --format --help --orchestrator --quiet -q\" __docker_stack_orchestrator_is kubernetes && options+=\" --kubeconfig --namespace\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag '--filter|-f|--format|--kubeconfig|--namespace|--orchestrator') if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_stacks fi ;; esac } _docker_stack_up() { _docker_stack_deploy } _docker_start() { _docker_container_start } _docker_stats() { _docker_container_stats } _docker_stop() { _docker_container_stop } _docker_system() { local subcommands=\" df events info prune \" __docker_subcommands \"$subcommands\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_system_df() { case \"$prev\" in --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format --help --verbose -v\" -- \"$cur\" ) ) ;; esac } _docker_system_events() { local key=$(__docker_map_key_of_current_option '-f|--filter') case \"$key\" in container) __docker_complete_containers_all --cur \"${cur##*=}\" return ;; daemon) local name=$(__docker_q info | sed -n 's/^\\(ID\\|Name\\): //p') COMPREPLY=( $( compgen -W \"$name\" -- \"${cur##*=}\" ) ) return ;; event) COMPREPLY=( $( compgen -W \" attach commit connect copy create delete destroy detach die disable disconnect enable exec_create exec_detach exec_die exec_start export health_status import install kill load mount oom pause pull push reload remove rename resize restart save start stop tag top unmount unpause untag update \" -- \"${cur##*=}\" ) ) return ;; image) __docker_complete_images --cur \"${cur##*=}\" --repo --tag return ;; network) __docker_complete_networks --cur \"${cur##*=}\" return ;; scope) COMPREPLY=( $( compgen -W \"local swarm\" -- \"${cur##*=}\" ) ) return ;; type) COMPREPLY=( $( compgen -W \"config container daemon image network plugin secret service volume\" -- \"${cur##*=}\" ) ) return ;; volume) __docker_complete_volumes --cur \"${cur##*=}\" return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"container daemon event image label network scope type volume\" -- \"$cur\" ) ) __docker_nospace return ;; --since|--until) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --help --since --until --format\" -- \"$cur\" ) ) ;; esac } _docker_system_info() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help\" -- \"$cur\" ) ) ;; esac } _docker_system_prune() { case \"$prev\" in --filter) COMPREPLY=( $( compgen -W \"label label! until\" -S = -- \"$cur\" ) ) __docker_nospace return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--all -a --force -f --filter --help --volumes\" -- \"$cur\" ) ) ;; esac } _docker_tag() { _docker_image_tag } _docker_trust() { local subcommands=\" inspect revoke sign \" __docker_subcommands \"$subcommands\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_trust_inspect() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --pretty\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --repo --tag fi ;; esac } _docker_trust_revoke() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --yes -y\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --repo --tag fi ;; esac } _docker_trust_sign() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help --local\" -- \"$cur\" ) ) ;; *) local counter=$(__docker_pos_first_nonflag) if [ \"$cword\" -eq \"$counter\" ]; then __docker_complete_images --force-tag --id fi ;; esac } _docker_unpause() { _docker_container_unpause } _docker_update() { _docker_container_update } _docker_top() { _docker_container_top } _docker_version() { __docker_complete_stack_orchestrator_options && return case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) local options=\"--format -f --help\" __docker_stack_orchestrator_is kubernetes && options+=\" --kubeconfig\" COMPREPLY=( $( compgen -W \"$options\" -- \"$cur\" ) ) ;; esac } _docker_volume_create() { case \"$prev\" in --driver|-d) __docker_complete_plugins_bundled --type Volume return ;; --label|--opt|-o) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--driver -d --help --label --opt -o\" -- \"$cur\" ) ) ;; esac } _docker_volume_inspect() { case \"$prev\" in --format|-f) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--format -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_volumes ;; esac } _docker_volume_list() { _docker_volume_ls } _docker_volume_ls() { local key=$(__docker_map_key_of_current_option '--filter|-f') case \"$key\" in dangling) COMPREPLY=( $( compgen -W \"true false\" -- \"${cur##*=}\" ) ) return ;; driver) __docker_complete_plugins_bundled --cur \"${cur##*=}\" --type Volume return ;; name) __docker_complete_volumes --cur \"${cur##*=}\" return ;; esac case \"$prev\" in --filter|-f) COMPREPLY=( $( compgen -S = -W \"dangling driver label name\" -- \"$cur\" ) ) __docker_nospace return ;; --format) return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter -f --format --help --quiet -q\" -- \"$cur\" ) ) ;; esac } _docker_volume_prune() { case \"$prev\" in --filter) COMPREPLY=( $( compgen -W \"label label!\" -S = -- \"$cur\" ) ) __docker_nospace return ;; esac case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--filter --force -f --help\" -- \"$cur\" ) ) ;; esac } _docker_volume_remove() { _docker_volume_rm } _docker_volume_rm() { case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--force -f --help\" -- \"$cur\" ) ) ;; *) __docker_complete_volumes ;; esac } _docker_volume() { local subcommands=\" create inspect ls prune rm \" local aliases=\" list remove \" __docker_subcommands \"$subcommands $aliases\" && return case \"$cur\" in -*) COMPREPLY=( $( compgen -W \"--help\" -- \"$cur\" ) ) ;; *) COMPREPLY=( $( compgen -W \"$subcommands\" -- \"$cur\" ) ) ;; esac } _docker_wait() { _docker_container_wait } _docker() { local previous_extglob_setting=$(shopt -p extglob) shopt -s extglob local management_commands=( builder config container context engine image network node plugin secret service stack swarm system trust volume ) local top_level_commands=( build login logout run search version ) local legacy_commands=( attach commit cp create diff events exec export history images import info inspect kill load logs pause port ps pull push rename restart rm rmi save start stats stop tag top unpause update wait ) local experimental_client_commands=( manifest ) local experimental_server_commands=( checkpoint deploy ) local commands=(${management_commands[*]} ${top_level_commands[*]}) [ -z \"$DOCKER_HIDE_LEGACY_COMMANDS\" ] && commands+=(${legacy_commands[*]}) local global_boolean_options=\" --debug -D --tls --tlsverify \" local global_options_with_args=\" --config --context -c --host -H --log-level -l --tlscacert --tlscert --tlskey \" local info_fetched server_experimental server_os local client_experimental stack_orchestrator_is_kubernetes stack_orchestrator_is_swarm local host config context COMPREPLY=() local cur prev words cword _get_comp_words_by_ref -n : cur prev words cword local command='docker' command_pos=0 subcommand_pos local counter=1 while [ \"$counter\" -lt \"$cword\" ]; do case \"${words[$counter]}\" in docker) return 0 ;; --host|-H) (( counter++ )) host=\"${words[$counter]}\" ;; --config) (( counter++ )) config=\"${words[$counter]}\" ;; --context|-c) (( counter++ )) context=\"${words[$counter]}\" ;; $(__docker_to_extglob \"$global_options_with_args\") ) (( counter++ )) ;; -*) ;; =) (( counter++ )) ;; *) command=\"${words[$counter]}\" command_pos=$counter break ;; esac (( counter++ )) done local binary=\"${words[0]}\" if [[ $binary == ?(*/)dockerd ]] ; then command=daemon command_pos=0 fi local completions_func=_docker_${command//-/_} declare -F $completions_func >/dev/null && $completions_func eval \"$previous_extglob_setting\" return 0 } eval \"$__docker_previous_extglob_setting\" unset __docker_previous_extglob_setting complete -F _docker docker docker.exe dockerd dockerd.exe","title":"&gt;&gt; __docker_complete_contexts():"},{"location":"completion/docker_completion/#function-calls_13","text":"\u2514\u2500 __docker_complete_contexts \u251c\u2500 __docker_q \u251c\u2500 __docker_complete_configs | \u2514\u2500 __docker_configs \u251c\u2500 __docker_containers | \u2514\u2500 __docker_q \u251c\u2500 __docker_complete_containers_all | \u2514\u2500 __docker_complete_containers \u251c\u2500 __docker_complete_containers_running | \u2514\u2500 __docker_complete_containers \u2514\u2500 __docker_contexts \u2514\u2500 __docker_q","title":"Function Calls:"},{"location":"completion/git_completion/","text":"GIT Completions (in /home/bsgt/sys_bashrc/completions/git_completion.sh) Function Index 01 - __git_find_repo_path 02 - __gitdir 03 - __git 04 - __git_dequote 05 - __git_reassemble_comp_words_by_ref 06 - __gitcomp_direct 07 - __gitcompappend 08 - __gitcompadd 09 - __gitcomp 10 - __gitcomp_builtin 11 - __gitcomp_nl_append 12 - __gitcomp_nl 13 - __gitcomp_file_direct 14 - __gitcomp_file 15 - __git_ls_files_helper 16 - __git_index_files 17 - __git_complete_index_file 18 - __git_heads 19 - __git_tags 20 - __git_refs 21 - __git_complete_refs 22 - __git_refs2 23 - __git_complete_fetch_refspecs 24 - __git_refs_remotes 25 - __git_remotes 26 - __git_is_configured_remote 27 - __git_list_merge_strategies 28 - __git_compute_merge_strategies 29 - __git_complete_revlist_file 30 - __git_complete_file 31 - __git_complete_revlist 32 - __git_complete_remote_or_refspec 33 - __git_complete_strategy 34 - __git_compute_all_commands 35 - __git_get_config_variables 36 - __git_pretty_aliases 37 - __git_aliased_command 38 - __git_find_on_cmdline 39 - __git_get_option_value 40 - __git_has_doubledash 41 - __git_count_arguments 42 - _git_am 43 - _git_apply 44 - _git_add 45 - _git_archive 46 - _git_bisect 47 - _git_branch 48 - _git_bundle 49 - _git_checkout 50 - _git_cherry_pick 51 - _git_clean 52 - _git_clone 53 - _git_commit 54 - _git_describe 55 - _git_diff 56 - _git_difftool 57 - _git_fetch 58 - _git_format_patch 59 - _git_fsck 60 - _git_gitk 61 - __git_match_ctag 62 - __git_complete_symbol 63 - _git_grep 64 - _git_help 65 - _git_init 66 - _git_ls_files 67 - _git_ls_remote 68 - _git_log 69 - _git_merge 70 - _git_mergetool 71 - _git_merge_base 72 - _git_mv 73 - _git_notes 74 - _git_pull 75 - __git_complete_force_with_lease 76 - _git_push 77 - _git_range_diff 78 - _git_rebase 79 - _git_reflog 80 - _git_send_email 81 - _git_stage 82 - _git_status 83 - __git_config_get_set_variables 84 - __git_compute_config_vars 85 - _git_config 86 - _git_remote 87 - _git_replace 88 - _git_rerere 89 - _git_reset 90 - _git_revert 91 - _git_rm 92 - _git_shortlog 93 - _git_show 94 - _git_show_branch 95 - _git_stash 96 - _git_submodule 97 - _git_svn 98 - _git_tag 99 - _git_whatchanged 100 - _git_worktree 101 - __git_complete_common 102 - __git_support_parseopt_helper 103 - __git_complete_command 104 - __git_main 105 - __gitk_main 106 - __git_func_wrap 107 - __git_complete 108 - _git 109 - _gitk >> __git_find_repo_path(): function __git_find_repo_path() { if [ -n \"$__git_repo_path\" ]; then return fi if [ -n \"${__git_C_args-}\" ]; then __git_repo_path=\"$(git \"${__git_C_args[@]}\" \\ ${__git_dir:+--git-dir=\"$__git_dir\"} \\ rev-parse --absolute-git-dir 2>/dev/null)\" elif [ -n \"${__git_dir-}\" ]; then test -d \"$__git_dir\" && __git_repo_path=\"$__git_dir\" elif [ -n \"${GIT_DIR-}\" ]; then test -d \"${GIT_DIR-}\" && __git_repo_path=\"$GIT_DIR\" elif [ -d .git ]; then __git_repo_path=.git else __git_repo_path=\"$(git rev-parse --git-dir 2>/dev/null)\" fi } >> __gitdir(): function __gitdir() { if [ -z \"${1-}\" ]; then __git_find_repo_path || return 1 echo \"$__git_repo_path\" elif [ -d \"$1/.git\" ]; then echo \"$1/.git\" else echo \"$1\" fi } Function Calls: \u2514\u2500 __gitdir \u2514\u2500 __git_find_repo_path >> __git(): function __git() { git ${__git_C_args:+\"${__git_C_args[@]}\"} \\ ${__git_dir:+--git-dir=\"$__git_dir\"} \"$@\" 2>/dev/null } >> __git_dequote(): function __git_dequote() { local rest=\"$1\" len ch dequoted_word=\"\" while test -n \"$rest\"; do len=${#dequoted_word} dequoted_word=\"$dequoted_word${rest%%[\\\\\\'\\\"]*}\" rest=\"${rest:$((${#dequoted_word}-$len))}\" case \"${rest:0:1}\" in \\\\) ch=\"${rest:1:1}\" case \"$ch\" in $'\\n') ;; *) dequoted_word=\"$dequoted_word$ch\" ;; esac rest=\"${rest:2}\" ;; \\') rest=\"${rest:1}\" len=${#dequoted_word} dequoted_word=\"$dequoted_word${rest%%\\'*}\" rest=\"${rest:$((${#dequoted_word}-$len+1))}\" ;; \\\") rest=\"${rest:1}\" while test -n \"$rest\" ; do len=${#dequoted_word} dequoted_word=\"$dequoted_word${rest%%[\\\\\\\"]*}\" rest=\"${rest:$((${#dequoted_word}-$len))}\" case \"${rest:0:1}\" in \\\\) ch=\"${rest:1:1}\" case \"$ch\" in \\\"|\\\\|\\$|\\`) dequoted_word=\"$dequoted_word$ch\" ;; $'\\n') ;; *) dequoted_word=\"$dequoted_word\\\\$ch\" ;; esac rest=\"${rest:2}\" ;; \\\") rest=\"${rest:1}\" break ;; esac done ;; esac done } >> __git_reassemble_comp_words_by_ref(): function __git_reassemble_comp_words_by_ref() { local exclude i j first exclude=\"${1//[^$COMP_WORDBREAKS]}\" cword_=$COMP_CWORD if [ -z \"$exclude\" ]; then words_=(\"${COMP_WORDS[@]}\") return fi for ((i=0, j=0; i < ${#COMP_WORDS[@]}; i++, j++)); do first=t while [ $i -gt 0 ] && [ -n \"${COMP_WORDS[$i]}\" ] && [ \"${COMP_WORDS[$i]//[^$exclude]}\" = \"${COMP_WORDS[$i]}\" ] do if [ $j -ge 2 ] && [ -n \"$first\" ]; then ((j--)) fi first= words_[$j]=${words_[j]}${COMP_WORDS[i]} if [ $i = $COMP_CWORD ]; then cword_=$j fi if (($i < ${#COMP_WORDS[@]} - 1)); then ((i++)) else return fi done words_[$j]=${words_[j]}${COMP_WORDS[i]} if [ $i = $COMP_CWORD ]; then cword_=$j fi done } if ! type _get_comp_words_by_ref >/dev/null 2>&1; then >> __gitcomp_direct(): function __gitcomp_direct() { local IFS=$'\\n' COMPREPLY=($1) } >> __gitcompappend(): function __gitcompappend() { local x i=${#COMPREPLY[@]} for x in $1; do if [[ \"$x\" == \"$3\"* ]]; then COMPREPLY[i++]=\"$2$x$4\" fi done } >> __gitcompadd(): function __gitcompadd() { COMPREPLY=() __gitcompappend \"$@\" } Function Calls: \u2514\u2500 __gitcompadd \u2514\u2500 __gitcompappend >> __gitcomp(): function __gitcomp() { local cur_=\"${3-$cur}\" case \"$cur_\" in --*=) ;; --no-*) local c i=0 IFS=$' \\t\\n' for c in $1; do if [[ $c == \"--\" ]]; then continue fi c=\"$c${4-}\" if [[ $c == \"$cur_\"* ]]; then case $c in --*=*|*.) ;; *) c=\"$c \" ;; esac COMPREPLY[i++]=\"${2-}$c\" fi done ;; *) local c i=0 IFS=$' \\t\\n' for c in $1; do if [[ $c == \"--\" ]]; then c=\"--no-...${4-}\" if [[ $c == \"$cur_\"* ]]; then COMPREPLY[i++]=\"${2-}$c \" fi break fi c=\"$c${4-}\" if [[ $c == \"$cur_\"* ]]; then case $c in --*=*|*.) ;; *) c=\"$c \" ;; esac COMPREPLY[i++]=\"${2-}$c\" fi done ;; esac } if [[ -n ${ZSH_VERSION-} ]]; then unset $(set |sed -ne 's/^\\(__gitcomp_builtin_[a-zA-Z0-9_][a-zA-Z0-9_]*\\)=.*/\\1/p') 2>/dev/null else unset $(compgen -v __gitcomp_builtin_) fi >> __gitcomp_builtin(): function __gitcomp_builtin() { local cmd=\"$1\" local incl=\"$2\" local excl=\"$3\" local var=__gitcomp_builtin_\"${cmd/-/_}\" local options eval \"options=\\$$var\" if [ -z \"$options\" ]; then options=\" $incl $(__git ${cmd/_/ } --git-completion-helper) \" for i in $excl; do options=\"${options/ $i / }\" done eval \"$var=\\\"$options\\\"\" fi __gitcomp \"$options\" } Function Calls: \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> __gitcomp_nl_append(): function __gitcomp_nl_append() { local IFS=$'\\n' __gitcompappend \"$1\" \"${2-}\" \"${3-$cur}\" \"${4- }\" } Function Calls: \u2514\u2500 __gitcomp_nl_append \u2514\u2500 __gitcompappend >> __gitcomp_nl(): function __gitcomp_nl() { COMPREPLY=() __gitcomp_nl_append \"$@\" } Function Calls: \u2514\u2500 __gitcomp_nl \u2514\u2500 __gitcomp_nl_append \u2514\u2500 __gitcompappend >> __gitcomp_file_direct(): function __gitcomp_file_direct() { local IFS=$'\\n' COMPREPLY=($1) compopt -o filenames +o nospace 2>/dev/null || compgen -f /non-existing-dir/ >/dev/null || true } >> __gitcomp_file(): function __gitcomp_file() { local IFS=$'\\n' __gitcompadd \"$1\" \"${2-}\" \"${3-$cur}\" \"\" compopt -o filenames +o nospace 2>/dev/null || compgen -f /non-existing-dir/ >/dev/null || true } Function Calls: \u2514\u2500 __gitcomp_file \u2514\u2500 __gitcompadd \u2514\u2500 __gitcompappend >> __git_ls_files_helper(): function __git_ls_files_helper() { if [ \"$2\" == \"--committable\" ]; then __git -C \"$1\" -c core.quotePath=false diff-index \\ --name-only --relative HEAD -- \"${3//\\\\/\\\\\\\\}*\" else __git -C \"$1\" -c core.quotePath=false ls-files \\ --exclude-standard $2 -- \"${3//\\\\/\\\\\\\\}*\" fi } Function Calls: \u2514\u2500 __git_ls_files_helper \u251c\u2500 __git \u2514\u2500 _git >> __git_index_files(): function __git_index_files() { local root=\"$2\" match=\"$3\" __git_ls_files_helper \"$root\" \"$1\" \"$match\" | awk -F / -v pfx=\"${2//\\\\/\\\\\\\\}\" '{ paths[$1] = 1 } END { for (p in paths) { if (substr(p, 1, 1) != \"\\\"\") { print pfx p continue } p = dequote(p) if (p == \"\") continue if (p in paths) continue else print pfx p } } function dequote(p, bs_idx, out, esc, esc_idx, dec) { p = substr(p, 2) while ((bs_idx = index(p, \"\\\\\")) != 0) { out = out substr(p, 1, bs_idx - 1) esc = substr(p, bs_idx + 1, 1) p = substr(p, bs_idx + 2) if ((esc_idx = index(\"abtvfr\\\"\\\\\", esc)) != 0) { out = out substr(\"\\a\\b\\t\\v\\f\\r\\\"\\\\\", esc_idx, 1) } else if (esc == \"n\") { return \"\" } else { dec = esc * 64 + \\ substr(p, 1, 1) * 8 + \\ substr(p, 2, 1) out = out sprintf(\"%c\", dec) p = substr(p, 3) } } if (substr(p, length(p), 1) == \"\\\"\") out = out substr(p, 1, length(p) - 1) else out = out p return out }' } Function Calls: \u2514\u2500 __git_index_files \u2514\u2500 __git_ls_files_helper \u251c\u2500 __git \u2514\u2500 _git >> __git_complete_index_file(): function __git_complete_index_file() { local dequoted_word pfx=\"\" cur_ __git_dequote \"$cur\" case \"$dequoted_word\" in ?*/*) pfx=\"${dequoted_word%/*}/\" cur_=\"${dequoted_word##*/}\" ;; *) cur_=\"$dequoted_word\" esac __gitcomp_file_direct \"$(__git_index_files \"$1\" \"$pfx\" \"$cur_\")\" } Function Calls: \u2514\u2500 __git_complete_index_file \u251c\u2500 __git_dequote \u251c\u2500 __gitcomp_file_direct \u2514\u2500 __git_index_files \u2514\u2500 __git_ls_files_helper >> __git_heads(): function __git_heads() { local pfx=\"${1-}\" cur_=\"${2-}\" sfx=\"${3-}\" __git for-each-ref --format=\"${pfx//\\%/%%}%(refname:strip=2)$sfx\" \\ \"refs/heads/$cur_*\" \"refs/heads/$cur_*/**\" } Function Calls: \u2514\u2500 __git_heads \u251c\u2500 __git \u2514\u2500 _git >> __git_tags(): function __git_tags() { local pfx=\"${1-}\" cur_=\"${2-}\" sfx=\"${3-}\" __git for-each-ref --format=\"${pfx//\\%/%%}%(refname:strip=2)$sfx\" \\ \"refs/tags/$cur_*\" \"refs/tags/$cur_*/**\" } Function Calls: \u2514\u2500 __git_tags \u251c\u2500 __git \u2514\u2500 _git >> __git_refs(): function __git_refs() { local i hash dir track=\"${2-}\" local list_refs_from=path remote=\"${1-}\" local format refs local pfx=\"${3-}\" cur_=\"${4-$cur}\" sfx=\"${5-}\" local match=\"${4-}\" local fer_pfx=\"${pfx//\\%/%%}\" # \"escape\" for-each-ref format specifiers __git_find_repo_path dir=\"$__git_repo_path\" if [ -z \"$remote\" ]; then if [ -z \"$dir\" ]; then return fi else if __git_is_configured_remote \"$remote\"; then list_refs_from=remote elif [ -d \"$remote/.git\" ]; then dir=\"$remote/.git\" elif [ -d \"$remote\" ]; then dir=\"$remote\" else list_refs_from=url fi fi if [ \"$list_refs_from\" = path ]; then if [[ \"$cur_\" == ^* ]]; then pfx=\"$pfx^\" fer_pfx=\"$fer_pfx^\" cur_=${cur_#^} match=${match#^} fi case \"$cur_\" in refs|refs/*) format=\"refname\" refs=(\"$match*\" \"$match*/**\") track=\"\" ;; *) for i in HEAD FETCH_HEAD ORIG_HEAD MERGE_HEAD REBASE_HEAD; do case \"$i\" in $match*) if [ -e \"$dir/$i\" ]; then echo \"$pfx$i$sfx\" fi ;; esac done format=\"refname:strip=2\" refs=(\"refs/tags/$match*\" \"refs/tags/$match*/**\" \"refs/heads/$match*\" \"refs/heads/$match*/**\" \"refs/remotes/$match*\" \"refs/remotes/$match*/**\") ;; esac __git_dir=\"$dir\" __git for-each-ref --format=\"$fer_pfx%($format)$sfx\" \\ \"${refs[@]}\" if [ -n \"$track\" ]; then __git for-each-ref --format=\"$fer_pfx%(refname:strip=3)$sfx\" \\ --sort=\"refname:strip=3\" \\ \"refs/remotes/*/$match*\" \"refs/remotes/*/$match*/**\" | \\ uniq -u fi return fi case \"$cur_\" in refs|refs/*) __git ls-remote \"$remote\" \"$match*\" | \\ while read -r hash i; do case \"$i\" in *^{}) ;; *) echo \"$pfx$i$sfx\" ;; esac done ;; *) if [ \"$list_refs_from\" = remote ]; then case \"HEAD\" in $match*) echo \"${pfx}HEAD$sfx\" ;; esac __git for-each-ref --format=\"$fer_pfx%(refname:strip=3)$sfx\" \\ \"refs/remotes/$remote/$match*\" \\ \"refs/remotes/$remote/$match*/**\" else local query_symref case \"HEAD\" in $match*) query_symref=\"HEAD\" ;; esac __git ls-remote \"$remote\" $query_symref \\ \"refs/tags/$match*\" \"refs/heads/$match*\" \\ \"refs/remotes/$match*\" | while read -r hash i; do case \"$i\" in *^{}) ;; refs/*) echo \"$pfx${i#refs/*/}$sfx\" ;; *) echo \"$pfx$i$sfx\" ;; # symbolic refs esac done fi ;; esac } Function Calls: \u2514\u2500 __git_refs \u251c\u2500 __git \u251c\u2500 __git_is_configured_remote | \u2514\u2500 __git_remotes \u2514\u2500 _git >> __git_complete_refs(): function __git_complete_refs() { local remote track pfx cur_=\"$cur\" sfx=\" \" while test $# != 0; do case \"$1\" in --remote=*) remote=\"${1##--remote=}\" ;; --track) track=\"yes\" ;; --pfx=*) pfx=\"${1##--pfx=}\" ;; --cur=*) cur_=\"${1##--cur=}\" ;; --sfx=*) sfx=\"${1##--sfx=}\" ;; *) return 1 ;; esac shift done __gitcomp_direct \"$(__git_refs \"$remote\" \"$track\" \"$pfx\" \"$cur_\" \"$sfx\")\" } Function Calls: \u2514\u2500 __git_complete_refs \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_refs \u251c\u2500 __git \u251c\u2500 __git_is_configured_remote \u2514\u2500 _git >> __git_refs2(): function __git_refs2() { local i for i in $(__git_refs \"$1\"); do echo \"$i:$i\" done } Function Calls: \u2514\u2500 __git_refs2 \u2514\u2500 __git_refs \u251c\u2500 __git \u251c\u2500 __git_is_configured_remote \u2514\u2500 _git >> __git_complete_fetch_refspecs(): function __git_complete_fetch_refspecs() { local i remote=\"$1\" pfx=\"${2-}\" cur_=\"${3-$cur}\" sfx=\"${4- }\" __gitcomp_direct \"$( for i in $(__git_refs \"$remote\" \"\" \"\" \"$cur_\") ; do echo \"$pfx$i:$i$sfx\" done )\" } Function Calls: \u2514\u2500 __git_complete_fetch_refspecs \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_refs \u251c\u2500 __git \u251c\u2500 __git_is_configured_remote \u2514\u2500 _git >> __git_refs_remotes(): function __git_refs_remotes() { local i hash __git ls-remote \"$1\" 'refs/heads/*' | \\ while read -r hash i; do echo \"$i:refs/remotes/$1/${i#refs/heads/}\" done } Function Calls: \u2514\u2500 __git_refs_remotes \u251c\u2500 __git \u2514\u2500 _git >> __git_remotes(): function __git_remotes() { __git_find_repo_path test -d \"$__git_repo_path/remotes\" && ls -1 \"$__git_repo_path/remotes\" __git remote } Function Calls: \u2514\u2500 __git_remotes \u251c\u2500 __git \u2514\u2500 _git >> __git_is_configured_remote(): function __git_is_configured_remote() { local remote for remote in $(__git_remotes); do if [ \"$remote\" = \"$1\" ]; then return 0 fi done return 1 } Function Calls: \u2514\u2500 __git_is_configured_remote \u2514\u2500 __git_remotes \u251c\u2500 __git \u2514\u2500 _git >> __git_list_merge_strategies(): function __git_list_merge_strategies() { LANG=C LC_ALL=C git merge -s help 2>&1 | sed -n -e '/[Aa]vailable strategies are: /,/^$/{ s/\\.$// s/.*:// s/^[ ]*// s/[ ]*$// p }' } __git_merge_strategies= >> __git_compute_merge_strategies(): function __git_compute_merge_strategies() { test -n \"$__git_merge_strategies\" || __git_merge_strategies=$(__git_list_merge_strategies) } Function Calls: \u2514\u2500 __git_compute_merge_strategies \u2514\u2500 __git_list_merge_strategies >> __git_complete_revlist_file(): function __git_complete_revlist_file() { local dequoted_word pfx ls ref cur_=\"$cur\" case \"$cur_\" in *..?*:*) return ;; ?*:*) ref=\"${cur_%%:*}\" cur_=\"${cur_#*:}\" __git_dequote \"$cur_\" case \"$dequoted_word\" in ?*/*) pfx=\"${dequoted_word%/*}\" cur_=\"${dequoted_word##*/}\" ls=\"$ref:$pfx\" pfx=\"$pfx/\" ;; *) cur_=\"$dequoted_word\" ls=\"$ref\" ;; esac case \"$COMP_WORDBREAKS\" in *:*) : great ;; *) pfx=\"$ref:$pfx\" ;; esac __gitcomp_file \"$(__git ls-tree \"$ls\" \\ | sed 's/^.* // s/$//')\" \\ \"$pfx\" \"$cur_\" ;; *...*) pfx=\"${cur_%...*}...\" cur_=\"${cur_#*...}\" __git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\" ;; *..*) pfx=\"${cur_%..*}..\" cur_=\"${cur_#*..}\" __git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\" ;; *) __git_complete_refs ;; esac } Function Calls: \u2514\u2500 __git_complete_revlist_file \u251c\u2500 __git \u251c\u2500 __git_dequote \u251c\u2500 __gitcomp_file | \u2514\u2500 __gitcompadd \u251c\u2500 __git_complete_refs | \u251c\u2500 __gitcomp_direct | \u2514\u2500 __git_refs \u2514\u2500 _git >> __git_complete_file(): function __git_complete_file() { __git_complete_revlist_file } >> __git_complete_revlist(): function __git_complete_revlist() { __git_complete_revlist_file } >> __git_complete_remote_or_refspec(): function __git_complete_remote_or_refspec() { local cur_=\"$cur\" cmd=\"${words[1]}\" local i c=2 remote=\"\" pfx=\"\" lhs=1 no_complete_refspec=0 if [ \"$cmd\" = \"remote\" ]; then ((c++)) fi while [ $c -lt $cword ]; do i=\"${words[c]}\" case \"$i\" in --mirror) [ \"$cmd\" = \"push\" ] && no_complete_refspec=1 ;; -d|--delete) [ \"$cmd\" = \"push\" ] && lhs=0 ;; --all) case \"$cmd\" in push) no_complete_refspec=1 ;; fetch) return ;; *) ;; esac ;; --multiple) no_complete_refspec=1; break ;; -*) ;; *) remote=\"$i\"; break ;; esac ((c++)) done if [ -z \"$remote\" ]; then __gitcomp_nl \"$(__git_remotes)\" return fi if [ $no_complete_refspec = 1 ]; then return fi [ \"$remote\" = \".\" ] && remote= case \"$cur_\" in *:*) case \"$COMP_WORDBREAKS\" in *:*) : great ;; *) pfx=\"${cur_%%:*}:\" ;; esac cur_=\"${cur_#*:}\" lhs=0 ;; +*) pfx=\"+\" cur_=\"${cur_#+}\" ;; esac case \"$cmd\" in fetch) if [ $lhs = 1 ]; then __git_complete_fetch_refspecs \"$remote\" \"$pfx\" \"$cur_\" else __git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\" fi ;; pull|remote) if [ $lhs = 1 ]; then __git_complete_refs --remote=\"$remote\" --pfx=\"$pfx\" --cur=\"$cur_\" else __git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\" fi ;; push) if [ $lhs = 1 ]; then __git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\" else __git_complete_refs --remote=\"$remote\" --pfx=\"$pfx\" --cur=\"$cur_\" fi ;; esac } Function Calls: \u2514\u2500 __git_complete_remote_or_refspec \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u251c\u2500 __git_complete_refs | \u251c\u2500 __gitcomp_direct | \u2514\u2500 __git_refs \u251c\u2500 __git_complete_fetch_refspecs | \u251c\u2500 __gitcomp_direct | \u2514\u2500 __git_refs \u2514\u2500 __git_remotes \u251c\u2500 __git \u2514\u2500 _git >> __git_complete_strategy(): function __git_complete_strategy() { __git_compute_merge_strategies case \"$prev\" in -s|--strategy) __gitcomp \"$__git_merge_strategies\" return 0 esac case \"$cur\" in --strategy=*) __gitcomp \"$__git_merge_strategies\" \"\" \"${cur##--strategy=}\" return 0 ;; esac return 1 } __git_all_commands= Function Calls: \u2514\u2500 __git_complete_strategy \u2514\u2500 __gitcomp >> __git_compute_all_commands(): function __git_compute_all_commands() { test -n \"$__git_all_commands\" || __git_all_commands=$(git --list-cmds=main,others,alias,nohelpers) } >> __git_get_config_variables(): function __git_get_config_variables() { local section=\"$1\" i IFS=$'\\n' for i in $(__git config --name-only --get-regexp \"^$section\\..*\"); do echo \"${i#$section.}\" done } Function Calls: \u2514\u2500 __git_get_config_variables \u251c\u2500 __git \u2514\u2500 _git >> __git_pretty_aliases(): function __git_pretty_aliases() { __git_get_config_variables \"pretty\" } Function Calls: \u2514\u2500 __git_pretty_aliases \u2514\u2500 __git_get_config_variables \u251c\u2500 __git \u2514\u2500 _git >> __git_aliased_command(): function __git_aliased_command() { local word cmdline=$(__git config --get \"alias.$1\") for word in $cmdline; do case \"$word\" in \\!gitk|gitk) echo \"gitk\" return ;; \\!*) : shell command alias ;; -*) : option ;; *=*) : setting env ;; git) : git itself ;; \\(\\)) : skip parens of shell function definition ;; {) : skip start of shell helper function ;; :) : skip null command ;; \\'*) : skip opening quote after sh -c ;; *) echo \"$word\" return esac done } Function Calls: \u2514\u2500 __git_aliased_command \u251c\u2500 __git \u2514\u2500 _git >> __git_find_on_cmdline(): function __git_find_on_cmdline() { local word subcommand c=1 while [ $c -lt $cword ]; do word=\"${words[c]}\" for subcommand in $1; do if [ \"$subcommand\" = \"$word\" ]; then echo \"$subcommand\" return fi done ((c++)) done } >> __git_get_option_value(): function __git_get_option_value() { local c short_opt long_opt val local result= values config_key word short_opt=\"$1\" long_opt=\"$2\" values=\"$3\" config_key=\"$4\" ((c = $cword - 1)) while [ $c -ge 0 ]; do word=\"${words[c]}\" for val in $values; do if [ \"$short_opt$val\" = \"$word\" ] || [ \"$long_opt$val\" = \"$word\" ]; then result=\"$val\" break 2 fi done ((c--)) done if [ -n \"$config_key\" ] && [ -z \"$result\" ]; then result=\"$(__git config \"$config_key\")\" fi echo \"$result\" } Function Calls: \u2514\u2500 __git_get_option_value \u251c\u2500 __git \u2514\u2500 _git >> __git_has_doubledash(): function __git_has_doubledash() { local c=1 while [ $c -lt $cword ]; do if [ \"--\" = \"${words[c]}\" ]; then return 0 fi ((c++)) done return 1 } >> __git_count_arguments(): function __git_count_arguments() { local word i c=0 for ((i=1; i < ${#words[@]}; i++)); do word=\"${words[i]}\" case \"$word\" in --) ((c = 0)) ;; \"$1\") ((c = 0)) ;; ?*) ((c++)) ;; esac done printf \"%d\" $c } __git_whitespacelist=\"nowarn warn error error-all fix\" __git_am_inprogress_options=\"--skip --continue --resolved --abort --quit --show-current-patch\" >> _git_am(): function _git_am() { __git_find_repo_path if [ -d \"$__git_repo_path\"/rebase-apply ]; then __gitcomp \"$__git_am_inprogress_options\" return fi case \"$cur\" in --whitespace=*) __gitcomp \"$__git_whitespacelist\" \"\" \"${cur##--whitespace=}\" return ;; --*) __gitcomp_builtin am \"\" \\ \"$__git_am_inprogress_options\" return esac } Function Calls: \u2514\u2500 _git_am \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_apply(): function _git_apply() { case \"$cur\" in --whitespace=*) __gitcomp \"$__git_whitespacelist\" \"\" \"${cur##--whitespace=}\" return ;; --*) __gitcomp_builtin apply return esac } Function Calls: \u2514\u2500 _git_apply \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_add(): function _git_add() { case \"$cur\" in --*) __gitcomp_builtin add return esac local complete_opt=\"--others --modified --directory --no-empty-directory\" if test -n \"$(__git_find_on_cmdline \"-u --update\")\" then complete_opt=\"--modified\" fi __git_complete_index_file \"$complete_opt\" } Function Calls: \u2514\u2500 _git_add \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_complete_index_file | \u251c\u2500 __git_dequote | \u251c\u2500 __gitcomp_file_direct | \u2514\u2500 __git_index_files \u2514\u2500 __git_find_on_cmdline >> _git_archive(): function _git_archive() { case \"$cur\" in --format=*) __gitcomp \"$(git archive --list)\" \"\" \"${cur##--format=}\" return ;; --remote=*) __gitcomp_nl \"$(__git_remotes)\" \"\" \"${cur##--remote=}\" return ;; --*) __gitcomp \" --format= --list --verbose --prefix= --remote= --exec= --output \" return ;; esac __git_complete_file } Function Calls: \u2514\u2500 _git_archive \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u2514\u2500 __git_remotes \u251c\u2500 __git \u2514\u2500 _git >> _git_bisect(): function _git_bisect() { __git_has_doubledash && return local subcommands=\"start bad good skip reset visualize replay log run\" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if [ -z \"$subcommand\" ]; then __git_find_repo_path if [ -f \"$__git_repo_path\"/BISECT_START ]; then __gitcomp \"$subcommands\" else __gitcomp \"replay start\" fi return fi case \"$subcommand\" in bad|good|reset|skip|start) __git_complete_refs ;; *) ;; esac } Function Calls: \u2514\u2500 _git_bisect \u251c\u2500 __gitcomp \u251c\u2500 __git_find_on_cmdline \u2514\u2500 __git_has_doubledash >> _git_branch(): function _git_branch() { local i c=1 only_local_ref=\"n\" has_r=\"n\" while [ $c -lt $cword ]; do i=\"${words[c]}\" case \"$i\" in -d|--delete|-m|--move) only_local_ref=\"y\" ;; -r|--remotes) has_r=\"y\" ;; esac ((c++)) done case \"$cur\" in --set-upstream-to=*) __git_complete_refs --cur=\"${cur##--set-upstream-to=}\" ;; --*) __gitcomp_builtin branch ;; *) if [ $only_local_ref = \"y\" -a $has_r = \"n\" ]; then __gitcomp_direct \"$(__git_heads \"\" \"$cur\" \" \")\" else __git_complete_refs fi ;; esac } Function Calls: \u2514\u2500 _git_branch \u251c\u2500 __gitcomp_direct \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_heads | \u251c\u2500 __git | \u2514\u2500 _git \u2514\u2500 __git_complete_refs \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_refs >> _git_bundle(): function _git_bundle() { local cmd=\"${words[2]}\" case \"$cword\" in 2) __gitcomp \"create list-heads verify unbundle\" ;; 3) ;; *) case \"$cmd\" in create) __git_complete_revlist ;; esac ;; esac } Function Calls: \u2514\u2500 _git_bundle \u2514\u2500 __gitcomp >> _git_checkout(): function _git_checkout() { __git_has_doubledash && return case \"$cur\" in --conflict=*) __gitcomp \"diff3 merge\" \"\" \"${cur##--conflict=}\" ;; --*) __gitcomp_builtin checkout ;; *) local flags=\"--track --no-track --no-guess\" track_opt=\"--track\" if [ \"$GIT_COMPLETION_CHECKOUT_NO_GUESS\" = \"1\" ] || [ -n \"$(__git_find_on_cmdline \"$flags\")\" ]; then track_opt='' fi __git_complete_refs $track_opt ;; esac } __git_cherry_pick_inprogress_options=\"--continue --quit --abort\" Function Calls: \u2514\u2500 _git_checkout \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_complete_refs | \u251c\u2500 __gitcomp_direct | \u2514\u2500 __git_refs \u251c\u2500 __git_find_on_cmdline \u2514\u2500 __git_has_doubledash >> _git_cherry_pick(): function _git_cherry_pick() { __git_find_repo_path if [ -f \"$__git_repo_path\"/CHERRY_PICK_HEAD ]; then __gitcomp \"$__git_cherry_pick_inprogress_options\" return fi case \"$cur\" in --*) __gitcomp_builtin cherry-pick \"\" \\ \"$__git_cherry_pick_inprogress_options\" ;; *) __git_complete_refs ;; esac } Function Calls: \u2514\u2500 _git_cherry_pick \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_clean(): function _git_clean() { case \"$cur\" in --*) __gitcomp_builtin clean return ;; esac __git_complete_index_file \"--others --directory\" } Function Calls: \u2514\u2500 _git_clean \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_complete_index_file \u251c\u2500 __git_dequote \u251c\u2500 __gitcomp_file_direct \u2514\u2500 __git_index_files >> _git_clone(): function _git_clone() { case \"$cur\" in --*) __gitcomp_builtin clone return ;; esac } __git_untracked_file_modes=\"all no normal\" Function Calls: \u2514\u2500 _git_clone \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_commit(): function _git_commit() { case \"$prev\" in -c|-C) __git_complete_refs return ;; esac case \"$cur\" in --cleanup=*) __gitcomp \"default scissors strip verbatim whitespace \" \"\" \"${cur##--cleanup=}\" return ;; --reuse-message=*|--reedit-message=*|\\ --fixup=*|--squash=*) __git_complete_refs --cur=\"${cur#*=}\" return ;; --untracked-files=*) __gitcomp \"$__git_untracked_file_modes\" \"\" \"${cur##--untracked-files=}\" return ;; --*) __gitcomp_builtin commit return esac if __git rev-parse --verify --quiet HEAD >/dev/null; then __git_complete_index_file \"--committable\" else __git_complete_index_file \"--cached\" fi } Function Calls: \u2514\u2500 _git_commit \u251c\u2500 __git \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_complete_index_file | \u251c\u2500 __git_dequote | \u251c\u2500 __gitcomp_file_direct | \u2514\u2500 __git_index_files \u251c\u2500 __git_complete_refs | \u251c\u2500 __gitcomp_direct | \u2514\u2500 __git_refs \u2514\u2500 _git >> _git_describe(): function _git_describe() { case \"$cur\" in --*) __gitcomp_builtin describe return esac __git_complete_refs } __git_diff_algorithms=\"myers minimal patience histogram\" __git_diff_submodule_formats=\"diff log short\" __git_diff_common_options=\"--stat --numstat --shortstat --summary --patch-with-stat --name-only --name-status --color --no-color --color-words --no-renames --check --full-index --binary --abbrev --diff-filter= --find-copies-harder --ignore-cr-at-eol --text --ignore-space-at-eol --ignore-space-change --ignore-all-space --ignore-blank-lines --exit-code --quiet --ext-diff --no-ext-diff --no-prefix --src-prefix= --dst-prefix= --inter-hunk-context= --patience --histogram --minimal --raw --word-diff --word-diff-regex= --dirstat --dirstat= --dirstat-by-file --dirstat-by-file= --cumulative --diff-algorithm= --submodule --submodule= --ignore-submodules \" Function Calls: \u2514\u2500 _git_describe \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_diff(): function _git_diff() { __git_has_doubledash && return case \"$cur\" in --diff-algorithm=*) __gitcomp \"$__git_diff_algorithms\" \"\" \"${cur##--diff-algorithm=}\" return ;; --submodule=*) __gitcomp \"$__git_diff_submodule_formats\" \"\" \"${cur##--submodule=}\" return ;; --*) __gitcomp \"--cached --staged --pickaxe-all --pickaxe-regex --base --ours --theirs --no-index $__git_diff_common_options \" return ;; esac __git_complete_revlist_file } __git_mergetools_common=\"diffuse diffmerge ecmerge emerge kdiff3 meld opendiff tkdiff vimdiff gvimdiff xxdiff araxis p4merge bc codecompare \" Function Calls: \u2514\u2500 _git_diff \u251c\u2500 __gitcomp \u2514\u2500 __git_has_doubledash >> _git_difftool(): function _git_difftool() { __git_has_doubledash && return case \"$cur\" in --tool=*) __gitcomp \"$__git_mergetools_common kompare\" \"\" \"${cur##--tool=}\" return ;; --*) __gitcomp_builtin difftool \"$__git_diff_common_options --base --cached --ours --theirs --pickaxe-all --pickaxe-regex --relative --staged \" return ;; esac __git_complete_revlist_file } __git_fetch_recurse_submodules=\"yes on-demand no\" Function Calls: \u2514\u2500 _git_difftool \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_has_doubledash >> _git_fetch(): function _git_fetch() { case \"$cur\" in --recurse-submodules=*) __gitcomp \"$__git_fetch_recurse_submodules\" \"\" \"${cur##--recurse-submodules=}\" return ;; --*) __gitcomp_builtin fetch return ;; esac __git_complete_remote_or_refspec } __git_format_patch_extra_options=\" --full-index --not --all --no-prefix --src-prefix= --dst-prefix= --notes \" Function Calls: \u2514\u2500 _git_fetch \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_format_patch(): function _git_format_patch() { case \"$cur\" in --thread=*) __gitcomp \" deep shallow \" \"\" \"${cur##--thread=}\" return ;; --*) __gitcomp_builtin format-patch \"$__git_format_patch_extra_options\" return ;; esac __git_complete_revlist } Function Calls: \u2514\u2500 _git_format_patch \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_fsck(): function _git_fsck() { case \"$cur\" in --*) __gitcomp_builtin fsck return ;; esac } Function Calls: \u2514\u2500 _git_fsck \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_gitk(): function _git_gitk() { _gitk } >> __git_match_ctag(): function __git_match_ctag() { awk -v pfx=\"${3-}\" -v sfx=\"${4-}\" \" /^${1//\\//\\\\/}/ { print pfx \\$1 sfx } \" \"$2\" } >> __git_complete_symbol(): function __git_complete_symbol() { local tags=tags pfx=\"\" cur_=\"${cur-}\" sfx=\" \" while test $# != 0; do case \"$1\" in --tags=*) tags=\"${1##--tags=}\" ;; --pfx=*) pfx=\"${1##--pfx=}\" ;; --cur=*) cur_=\"${1##--cur=}\" ;; --sfx=*) sfx=\"${1##--sfx=}\" ;; *) return 1 ;; esac shift done if test -r \"$tags\"; then __gitcomp_direct \"$(__git_match_ctag \"$cur_\" \"$tags\" \"$pfx\" \"$sfx\")\" fi } Function Calls: \u2514\u2500 __git_complete_symbol \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_match_ctag >> _git_grep(): function _git_grep() { __git_has_doubledash && return case \"$cur\" in --*) __gitcomp_builtin grep return ;; esac case \"$cword,$prev\" in 2,*|*,-*) __git_complete_symbol && return ;; esac __git_complete_refs } Function Calls: \u2514\u2500 _git_grep \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_has_doubledash \u2514\u2500 __git_complete_symbol \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_match_ctag >> _git_help(): function _git_help() { case \"$cur\" in --*) __gitcomp_builtin help return ;; esac if test -n \"$GIT_TESTING_ALL_COMMAND_LIST\" then __gitcomp \"$GIT_TESTING_ALL_COMMAND_LIST $(git --list-cmds=alias,list-guide) gitk\" else __gitcomp \"$(git --list-cmds=main,nohelpers,alias,list-guide) gitk\" fi } Function Calls: \u2514\u2500 _git_help \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_init(): function _git_init() { case \"$cur\" in --shared=*) __gitcomp \" false true umask group all world everybody \" \"\" \"${cur##--shared=}\" return ;; --*) __gitcomp_builtin init return ;; esac } Function Calls: \u2514\u2500 _git_init \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_ls_files(): function _git_ls_files() { case \"$cur\" in --*) __gitcomp_builtin ls-files return ;; esac __git_complete_index_file \"--cached\" } Function Calls: \u2514\u2500 _git_ls_files \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_complete_index_file \u251c\u2500 __git_dequote \u251c\u2500 __gitcomp_file_direct \u2514\u2500 __git_index_files >> _git_ls_remote(): function _git_ls_remote() { case \"$cur\" in --*) __gitcomp_builtin ls-remote return ;; esac __gitcomp_nl \"$(__git_remotes)\" } _git_ls_tree() { case \"$cur\" in --*) __gitcomp_builtin ls-tree return ;; esac __git_complete_file } __git_log_common_options=\" --not --all --branches --tags --remotes --first-parent --merges --no-merges --max-count= --max-age= --since= --after= --min-age= --until= --before= --min-parents= --max-parents= --no-min-parents --no-max-parents \" __git_log_gitk_options=\" --dense --sparse --full-history --simplify-merges --simplify-by-decoration --left-right --notes --no-notes \" __git_log_shortlog_options=\" --author= --committer= --grep= --all-match --invert-grep \" __git_log_pretty_formats=\"oneline short medium full fuller email raw format:\" __git_log_date_formats=\"relative iso8601 rfc2822 short local default raw\" Function Calls: \u2514\u2500 _git_ls_remote \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u2514\u2500 __git_remotes \u251c\u2500 __git \u2514\u2500 _git >> _git_log(): function _git_log() { __git_has_doubledash && return __git_find_repo_path local merge=\"\" if [ -f \"$__git_repo_path/MERGE_HEAD\" ]; then merge=\"--merge\" fi case \"$prev,$cur\" in -L,:*:*) return # fall back to Bash filename completion ;; -L,:*) __git_complete_symbol --cur=\"${cur#:}\" --sfx=\":\" return ;; -G,*|-S,*) __git_complete_symbol return ;; esac case \"$cur\" in --pretty=*|--format=*) __gitcomp \"$__git_log_pretty_formats $(__git_pretty_aliases) \" \"\" \"${cur#*=}\" return ;; --date=*) __gitcomp \"$__git_log_date_formats\" \"\" \"${cur##--date=}\" return ;; --decorate=*) __gitcomp \"full short no\" \"\" \"${cur##--decorate=}\" return ;; --diff-algorithm=*) __gitcomp \"$__git_diff_algorithms\" \"\" \"${cur##--diff-algorithm=}\" return ;; --submodule=*) __gitcomp \"$__git_diff_submodule_formats\" \"\" \"${cur##--submodule=}\" return ;; --*) __gitcomp \" $__git_log_common_options $__git_log_shortlog_options $__git_log_gitk_options --root --topo-order --date-order --reverse --follow --full-diff --abbrev-commit --abbrev= --relative-date --date= --pretty= --format= --oneline --show-signature --cherry-mark --cherry-pick --graph --decorate --decorate= --walk-reflogs --parents --children $merge $__git_diff_common_options --pickaxe-all --pickaxe-regex \" return ;; -L:*:*) return # fall back to Bash filename completion ;; -L:*) __git_complete_symbol --cur=\"${cur#-L:}\" --sfx=\":\" return ;; -G*) __git_complete_symbol --pfx=\"-G\" --cur=\"${cur#-G}\" return ;; -S*) __git_complete_symbol --pfx=\"-S\" --cur=\"${cur#-S}\" return ;; esac __git_complete_revlist } Function Calls: \u2514\u2500 _git_log \u251c\u2500 __gitcomp \u251c\u2500 __git_pretty_aliases | \u2514\u2500 __git_get_config_variables \u251c\u2500 __git_has_doubledash \u2514\u2500 __git_complete_symbol \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_match_ctag >> _git_merge(): function _git_merge() { __git_complete_strategy && return case \"$cur\" in --*) __gitcomp_builtin merge return esac __git_complete_refs } Function Calls: \u2514\u2500 _git_merge \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_complete_strategy \u2514\u2500 __gitcomp >> _git_mergetool(): function _git_mergetool() { case \"$cur\" in --tool=*) __gitcomp \"$__git_mergetools_common tortoisemerge\" \"\" \"${cur##--tool=}\" return ;; --*) __gitcomp \"--tool= --prompt --no-prompt --gui --no-gui\" return ;; esac } Function Calls: \u2514\u2500 _git_mergetool \u2514\u2500 __gitcomp >> _git_merge_base(): function _git_merge_base() { case \"$cur\" in --*) __gitcomp_builtin merge-base return ;; esac __git_complete_refs } Function Calls: \u2514\u2500 _git_merge_base \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_mv(): function _git_mv() { case \"$cur\" in --*) __gitcomp_builtin mv return ;; esac if [ $(__git_count_arguments \"mv\") -gt 0 ]; then __git_complete_index_file \"--cached --others --directory\" else __git_complete_index_file \"--cached\" fi } Function Calls: \u2514\u2500 _git_mv \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_complete_index_file | \u251c\u2500 __git_dequote | \u251c\u2500 __gitcomp_file_direct | \u2514\u2500 __git_index_files \u2514\u2500 __git_count_arguments >> _git_notes(): function _git_notes() { local subcommands='add append copy edit get-ref list merge prune remove show' local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" case \"$subcommand,$cur\" in ,--*) __gitcomp_builtin notes ;; ,*) case \"$prev\" in --ref) __git_complete_refs ;; *) __gitcomp \"$subcommands --ref\" ;; esac ;; *,--reuse-message=*|*,--reedit-message=*) __git_complete_refs --cur=\"${cur#*=}\" ;; *,--*) __gitcomp_builtin notes_$subcommand ;; prune,*|get-ref,*) ;; *) case \"$prev\" in -m|-F) ;; *) __git_complete_refs ;; esac ;; esac } Function Calls: \u2514\u2500 _git_notes \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_complete_refs | \u251c\u2500 __gitcomp_direct | \u2514\u2500 __git_refs \u2514\u2500 __git_find_on_cmdline >> _git_pull(): function _git_pull() { __git_complete_strategy && return case \"$cur\" in --recurse-submodules=*) __gitcomp \"$__git_fetch_recurse_submodules\" \"\" \"${cur##--recurse-submodules=}\" return ;; --*) __gitcomp_builtin pull return ;; esac __git_complete_remote_or_refspec } __git_push_recurse_submodules=\"check on-demand only\" Function Calls: \u2514\u2500 _git_pull \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_complete_strategy \u2514\u2500 __gitcomp >> __git_complete_force_with_lease(): function __git_complete_force_with_lease() { local cur_=$1 case \"$cur_\" in --*=) ;; *:*) __git_complete_refs --cur=\"${cur_#*:}\" ;; *) __git_complete_refs --cur=\"$cur_\" ;; esac } Function Calls: \u2514\u2500 __git_complete_force_with_lease \u2514\u2500 __git_complete_refs \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_refs >> _git_push(): function _git_push() { case \"$prev\" in --repo) __gitcomp_nl \"$(__git_remotes)\" return ;; --recurse-submodules) __gitcomp \"$__git_push_recurse_submodules\" return ;; esac case \"$cur\" in --repo=*) __gitcomp_nl \"$(__git_remotes)\" \"\" \"${cur##--repo=}\" return ;; --recurse-submodules=*) __gitcomp \"$__git_push_recurse_submodules\" \"\" \"${cur##--recurse-submodules=}\" return ;; --force-with-lease=*) __git_complete_force_with_lease \"${cur##--force-with-lease=}\" return ;; --*) __gitcomp_builtin push return ;; esac __git_complete_remote_or_refspec } Function Calls: \u2514\u2500 _git_push \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u251c\u2500 __git_remotes | \u251c\u2500 __git | \u2514\u2500 _git \u2514\u2500 __git_complete_force_with_lease \u2514\u2500 __git_complete_refs >> _git_range_diff(): function _git_range_diff() { case \"$cur\" in --*) __gitcomp \" --creation-factor= --no-dual-color $__git_diff_common_options \" return ;; esac __git_complete_revlist } Function Calls: \u2514\u2500 _git_range_diff \u2514\u2500 __gitcomp >> _git_rebase(): function _git_rebase() { __git_find_repo_path if [ -f \"$__git_repo_path\"/rebase-merge/interactive ]; then __gitcomp \"--continue --skip --abort --quit --edit-todo --show-current-patch\" return elif [ -d \"$__git_repo_path\"/rebase-apply ] || \\ [ -d \"$__git_repo_path\"/rebase-merge ]; then __gitcomp \"--continue --skip --abort --quit --show-current-patch\" return fi __git_complete_strategy && return case \"$cur\" in --whitespace=*) __gitcomp \"$__git_whitespacelist\" \"\" \"${cur##--whitespace=}\" return ;; --*) __gitcomp \" --onto --merge --strategy --interactive --rebase-merges --preserve-merges --stat --no-stat --committer-date-is-author-date --ignore-date --ignore-whitespace --whitespace= --autosquash --no-autosquash --fork-point --no-fork-point --autostash --no-autostash --verify --no-verify --keep-empty --root --force-rebase --no-ff --rerere-autoupdate --exec \" return esac __git_complete_refs } Function Calls: \u2514\u2500 _git_rebase \u251c\u2500 __gitcomp \u2514\u2500 __git_complete_strategy \u2514\u2500 __gitcomp >> _git_reflog(): function _git_reflog() { local subcommands=\"show delete expire\" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if [ -z \"$subcommand\" ]; then __gitcomp \"$subcommands\" else __git_complete_refs fi } __git_send_email_confirm_options=\"always never auto cc compose\" __git_send_email_suppresscc_options=\"author self cc bodycc sob cccmd body all\" Function Calls: \u2514\u2500 _git_reflog \u251c\u2500 __gitcomp \u2514\u2500 __git_find_on_cmdline >> _git_send_email(): function _git_send_email () { case \"$prev\" in --to|--cc|--bcc|--from) __gitcomp \"$(__git send-email --dump-aliases)\" return ;; esac case \"$cur\" in --confirm=*) __gitcomp \" $__git_send_email_confirm_options \" \"\" \"${cur##--confirm=}\" return ;; --suppress-cc=*) __gitcomp \" $__git_send_email_suppresscc_options \" \"\" \"${cur##--suppress-cc=}\" return ;; --smtp-encryption=*) __gitcomp \"ssl tls\" \"\" \"${cur##--smtp-encryption=}\" return ;; --thread=*) __gitcomp \" deep shallow \" \"\" \"${cur##--thread=}\" return ;; --to=*|--cc=*|--bcc=*|--from=*) __gitcomp \"$(__git send-email --dump-aliases)\" \"\" \"${cur#--*=}\" return ;; --*) __gitcomp_builtin send-email \"--annotate --bcc --cc --cc-cmd --chain-reply-to --compose --confirm= --dry-run --envelope-sender --from --identity --in-reply-to --no-chain-reply-to --no-signed-off-by-cc --no-suppress-from --no-thread --quiet --reply-to --signed-off-by-cc --smtp-pass --smtp-server --smtp-server-port --smtp-encryption= --smtp-user --subject --suppress-cc= --suppress-from --thread --to --validate --no-validate $__git_format_patch_extra_options\" return ;; esac __git_complete_revlist } Function Calls: \u2514\u2500 _git_send_email \u251c\u2500 __git \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 _git >> _git_stage(): function _git_stage() { _git_add } >> _git_status(): function _git_status() { local complete_opt local untracked_state case \"$cur\" in --ignore-submodules=*) __gitcomp \"none untracked dirty all\" \"\" \"${cur##--ignore-submodules=}\" return ;; --untracked-files=*) __gitcomp \"$__git_untracked_file_modes\" \"\" \"${cur##--untracked-files=}\" return ;; --column=*) __gitcomp \" always never auto column row plain dense nodense \" \"\" \"${cur##--column=}\" return ;; --*) __gitcomp_builtin status return ;; esac untracked_state=\"$(__git_get_option_value \"-u\" \"--untracked-files=\" \\ \"$__git_untracked_file_modes\" \"status.showUntrackedFiles\")\" case \"$untracked_state\" in no) complete_opt= ;; all|normal|*) complete_opt=\"--cached --directory --no-empty-directory --others\" if [ -n \"$(__git_find_on_cmdline \"--ignored\")\" ]; then complete_opt=\"$complete_opt --ignored --exclude=*\" fi ;; esac __git_complete_index_file \"$complete_opt\" } Function Calls: \u2514\u2500 _git_status \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_complete_index_file | \u251c\u2500 __git_dequote | \u251c\u2500 __gitcomp_file_direct | \u2514\u2500 __git_index_files \u251c\u2500 __git_find_on_cmdline \u2514\u2500 __git_get_option_value \u251c\u2500 __git \u2514\u2500 _git >> __git_config_get_set_variables(): function __git_config_get_set_variables() { local prevword word config_file= c=$cword while [ $c -gt 1 ]; do word=\"${words[c]}\" case \"$word\" in --system|--global|--local|--file=*) config_file=\"$word\" break ;; -f|--file) config_file=\"$word $prevword\" break ;; esac prevword=$word c=$((--c)) done __git config $config_file --name-only --list } __git_config_vars= Function Calls: \u2514\u2500 __git_config_get_set_variables \u251c\u2500 __git \u2514\u2500 _git >> __git_compute_config_vars(): function __git_compute_config_vars() { test -n \"$__git_config_vars\" || __git_config_vars=\"$(git help --config-for-completion | sort | uniq)\" } >> _git_config(): function _git_config() { local varname if [ \"${BASH_VERSINFO[0]:-0}\" -ge 4 ]; then varname=\"${prev,,}\" else varname=\"$(echo \"$prev\" |tr A-Z a-z)\" fi case \"$varname\" in branch.*.remote|branch.*.pushremote) __gitcomp_nl \"$(__git_remotes)\" return ;; branch.*.merge) __git_complete_refs return ;; branch.*.rebase) __gitcomp \"false true merges preserve interactive\" return ;; remote.pushdefault) __gitcomp_nl \"$(__git_remotes)\" return ;; remote.*.fetch) local remote=\"${prev#remote.}\" remote=\"${remote%.fetch}\" if [ -z \"$cur\" ]; then __gitcomp_nl \"refs/heads/\" \"\" \"\" \"\" return fi __gitcomp_nl \"$(__git_refs_remotes \"$remote\")\" return ;; remote.*.push) local remote=\"${prev#remote.}\" remote=\"${remote%.push}\" __gitcomp_nl \"$(__git for-each-ref \\ --format='%(refname):%(refname)' refs/heads)\" return ;; pull.twohead|pull.octopus) __git_compute_merge_strategies __gitcomp \"$__git_merge_strategies\" return ;; color.branch|color.diff|color.interactive|\\ color.showbranch|color.status|color.ui) __gitcomp \"always never auto\" return ;; color.pager) __gitcomp \"false true\" return ;; color.*.*) __gitcomp \" normal black red green yellow blue magenta cyan white bold dim ul blink reverse \" return ;; diff.submodule) __gitcomp \"log short\" return ;; help.format) __gitcomp \"man info web html\" return ;; log.date) __gitcomp \"$__git_log_date_formats\" return ;; sendemail.aliasfiletype) __gitcomp \"mutt mailrc pine elm gnus\" return ;; sendemail.confirm) __gitcomp \"$__git_send_email_confirm_options\" return ;; sendemail.suppresscc) __gitcomp \"$__git_send_email_suppresscc_options\" return ;; sendemail.transferencoding) __gitcomp \"7bit 8bit quoted-printable base64\" return ;; --get|--get-all|--unset|--unset-all) __gitcomp_nl \"$(__git_config_get_set_variables)\" return ;; *.*) return ;; esac case \"$cur\" in --*) __gitcomp_builtin config return ;; branch.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \"remote pushRemote merge mergeOptions rebase\" \"$pfx\" \"$cur_\" return ;; branch.*) local pfx=\"${cur%.*}.\" cur_=\"${cur#*.}\" __gitcomp_direct \"$(__git_heads \"$pfx\" \"$cur_\" \".\")\" __gitcomp_nl_append $'autoSetupMerge\\nautoSetupRebase\\n' \"$pfx\" \"$cur_\" return ;; guitool.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \" argPrompt cmd confirm needsFile noConsole noRescan prompt revPrompt revUnmerged title \" \"$pfx\" \"$cur_\" return ;; difftool.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \"cmd path\" \"$pfx\" \"$cur_\" return ;; man.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \"cmd path\" \"$pfx\" \"$cur_\" return ;; mergetool.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \"cmd path trustExitCode\" \"$pfx\" \"$cur_\" return ;; pager.*) local pfx=\"${cur%.*}.\" cur_=\"${cur#*.}\" __git_compute_all_commands __gitcomp_nl \"$__git_all_commands\" \"$pfx\" \"$cur_\" return ;; remote.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \" url proxy fetch push mirror skipDefaultUpdate receivepack uploadpack tagOpt pushurl \" \"$pfx\" \"$cur_\" return ;; remote.*) local pfx=\"${cur%.*}.\" cur_=\"${cur#*.}\" __gitcomp_nl \"$(__git_remotes)\" \"$pfx\" \"$cur_\" \".\" __gitcomp_nl_append \"pushDefault\" \"$pfx\" \"$cur_\" return ;; url.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \"insteadOf pushInsteadOf\" \"$pfx\" \"$cur_\" return ;; *.*) __git_compute_config_vars __gitcomp \"$__git_config_vars\" ;; *) __git_compute_config_vars __gitcomp \"$(echo \"$__git_config_vars\" | sed 's/\\.[^ ]*/./g')\" esac } Function Calls: \u2514\u2500 _git_config \u251c\u2500 __git \u251c\u2500 __gitcomp_direct \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __gitcomp_nl_append | \u2514\u2500 __gitcompappend \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u251c\u2500 __git_heads | \u251c\u2500 __git | \u2514\u2500 _git \u251c\u2500 __git_refs_remotes | \u251c\u2500 __git | \u2514\u2500 _git \u251c\u2500 __git_remotes | \u251c\u2500 __git | \u2514\u2500 _git \u251c\u2500 __git_config_get_set_variables | \u251c\u2500 __git | \u2514\u2500 _git \u2514\u2500 _git >> _git_remote(): function _git_remote() { local subcommands=\" add rename remove set-head set-branches get-url set-url show prune update \" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if [ -z \"$subcommand\" ]; then case \"$cur\" in --*) __gitcomp_builtin remote ;; *) __gitcomp \"$subcommands\" ;; esac return fi case \"$subcommand,$cur\" in add,--*) __gitcomp_builtin remote_add ;; add,*) ;; set-head,--*) __gitcomp_builtin remote_set-head ;; set-branches,--*) __gitcomp_builtin remote_set-branches ;; set-head,*|set-branches,*) __git_complete_remote_or_refspec ;; update,--*) __gitcomp_builtin remote_update ;; update,*) __gitcomp \"$(__git_remotes) $(__git_get_config_variables \"remotes\")\" ;; set-url,--*) __gitcomp_builtin remote_set-url ;; get-url,--*) __gitcomp_builtin remote_get-url ;; prune,--*) __gitcomp_builtin remote_prune ;; *) __gitcomp_nl \"$(__git_remotes)\" ;; esac } Function Calls: \u2514\u2500 _git_remote \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u251c\u2500 __git_remotes | \u251c\u2500 __git | \u2514\u2500 _git \u251c\u2500 __git_get_config_variables | \u251c\u2500 __git | \u2514\u2500 _git \u2514\u2500 __git_find_on_cmdline >> _git_replace(): function _git_replace() { case \"$cur\" in --*) __gitcomp_builtin replace return ;; esac __git_complete_refs } Function Calls: \u2514\u2500 _git_replace \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_rerere(): function _git_rerere() { local subcommands=\"clear forget diff remaining status gc\" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if test -z \"$subcommand\" then __gitcomp \"$subcommands\" return fi } Function Calls: \u2514\u2500 _git_rerere \u251c\u2500 __gitcomp \u2514\u2500 __git_find_on_cmdline >> _git_reset(): function _git_reset() { __git_has_doubledash && return case \"$cur\" in --*) __gitcomp_builtin reset return ;; esac __git_complete_refs } __git_revert_inprogress_options=\"--continue --quit --abort\" Function Calls: \u2514\u2500 _git_reset \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_has_doubledash >> _git_revert(): function _git_revert() { __git_find_repo_path if [ -f \"$__git_repo_path\"/REVERT_HEAD ]; then __gitcomp \"$__git_revert_inprogress_options\" return fi case \"$cur\" in --*) __gitcomp_builtin revert \"\" \\ \"$__git_revert_inprogress_options\" return ;; esac __git_complete_refs } Function Calls: \u2514\u2500 _git_revert \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_rm(): function _git_rm() { case \"$cur\" in --*) __gitcomp_builtin rm return ;; esac __git_complete_index_file \"--cached\" } Function Calls: \u2514\u2500 _git_rm \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_complete_index_file \u251c\u2500 __git_dequote \u251c\u2500 __gitcomp_file_direct \u2514\u2500 __git_index_files >> _git_shortlog(): function _git_shortlog() { __git_has_doubledash && return case \"$cur\" in --*) __gitcomp \" $__git_log_common_options $__git_log_shortlog_options --numbered --summary --email \" return ;; esac __git_complete_revlist } Function Calls: \u2514\u2500 _git_shortlog \u251c\u2500 __gitcomp \u2514\u2500 __git_has_doubledash >> _git_show(): function _git_show() { __git_has_doubledash && return case \"$cur\" in --pretty=*|--format=*) __gitcomp \"$__git_log_pretty_formats $(__git_pretty_aliases) \" \"\" \"${cur#*=}\" return ;; --diff-algorithm=*) __gitcomp \"$__git_diff_algorithms\" \"\" \"${cur##--diff-algorithm=}\" return ;; --submodule=*) __gitcomp \"$__git_diff_submodule_formats\" \"\" \"${cur##--submodule=}\" return ;; --*) __gitcomp \"--pretty= --format= --abbrev-commit --oneline --show-signature $__git_diff_common_options \" return ;; esac __git_complete_revlist_file } Function Calls: \u2514\u2500 _git_show \u251c\u2500 __gitcomp \u251c\u2500 __git_pretty_aliases | \u2514\u2500 __git_get_config_variables \u2514\u2500 __git_has_doubledash >> _git_show_branch(): function _git_show_branch() { case \"$cur\" in --*) __gitcomp_builtin show-branch return ;; esac __git_complete_revlist } Function Calls: \u2514\u2500 _git_show_branch \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> _git_stash(): function _git_stash() { local save_opts='--all --keep-index --no-keep-index --quiet --patch --include-untracked' local subcommands='push list show apply clear drop pop create branch' local subcommand=\"$(__git_find_on_cmdline \"$subcommands save\")\" if [ -n \"$(__git_find_on_cmdline \"-p\")\" ]; then subcommand=\"push\" fi if [ -z \"$subcommand\" ]; then case \"$cur\" in --*) __gitcomp \"$save_opts\" ;; sa*) if [ -z \"$(__git_find_on_cmdline \"$save_opts\")\" ]; then __gitcomp \"save\" fi ;; *) if [ -z \"$(__git_find_on_cmdline \"$save_opts\")\" ]; then __gitcomp \"$subcommands\" fi ;; esac else case \"$subcommand,$cur\" in push,--*) __gitcomp \"$save_opts --message\" ;; save,--*) __gitcomp \"$save_opts\" ;; apply,--*|pop,--*) __gitcomp \"--index --quiet\" ;; drop,--*) __gitcomp \"--quiet\" ;; list,--*) __gitcomp \"--name-status --oneline --patch-with-stat\" ;; show,--*|branch,--*) ;; branch,*) if [ $cword -eq 3 ]; then __git_complete_refs else __gitcomp_nl \"$(__git stash list \\ | sed -n -e 's/:.*//p')\" fi ;; show,*|apply,*|drop,*|pop,*) __gitcomp_nl \"$(__git stash list \\ | sed -n -e 's/:.*//p')\" ;; *) ;; esac fi } Function Calls: \u2514\u2500 _git_stash \u251c\u2500 __git \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u251c\u2500 __git_find_on_cmdline \u2514\u2500 _git >> _git_submodule(): function _git_submodule() { __git_has_doubledash && return local subcommands=\"add status init deinit update summary foreach sync\" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if [ -z \"$subcommand\" ]; then case \"$cur\" in --*) __gitcomp \"--quiet\" ;; *) __gitcomp \"$subcommands\" ;; esac return fi case \"$subcommand,$cur\" in add,--*) __gitcomp \"--branch --force --name --reference --depth\" ;; status,--*) __gitcomp \"--cached --recursive\" ;; deinit,--*) __gitcomp \"--force --all\" ;; update,--*) __gitcomp \" --init --remote --no-fetch --recommend-shallow --no-recommend-shallow --force --rebase --merge --reference --depth --recursive --jobs \" ;; summary,--*) __gitcomp \"--cached --files --summary-limit\" ;; foreach,--*|sync,--*) __gitcomp \"--recursive\" ;; *) ;; esac } Function Calls: \u2514\u2500 _git_submodule \u251c\u2500 __gitcomp \u251c\u2500 __git_find_on_cmdline \u2514\u2500 __git_has_doubledash >> _git_svn(): function _git_svn() { local subcommands=\" init fetch clone rebase dcommit log find-rev set-tree commit-diff info create-ignore propget proplist show-ignore show-externals branch tag blame migrate mkdirs reset gc \" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if [ -z \"$subcommand\" ]; then __gitcomp \"$subcommands\" else local remote_opts=\"--username= --config-dir= --no-auth-cache\" local fc_opts=\" --follow-parent --authors-file= --repack= --no-metadata --use-svm-props --use-svnsync-props --log-window-size= --no-checkout --quiet --repack-flags --use-log-author --localtime --add-author-from --ignore-paths= --include-paths= $remote_opts \" local init_opts=\" --template= --shared= --trunk= --tags= --branches= --stdlayout --minimize-url --no-metadata --use-svm-props --use-svnsync-props --rewrite-root= --prefix= $remote_opts \" local cmt_opts=\" --edit --rmdir --find-copies-harder --copy-similarity= \" case \"$subcommand,$cur\" in fetch,--*) __gitcomp \"--revision= --fetch-all $fc_opts\" ;; clone,--*) __gitcomp \"--revision= $fc_opts $init_opts\" ;; init,--*) __gitcomp \"$init_opts\" ;; dcommit,--*) __gitcomp \" --merge --strategy= --verbose --dry-run --fetch-all --no-rebase --commit-url --revision --interactive $cmt_opts $fc_opts \" ;; set-tree,--*) __gitcomp \"--stdin $cmt_opts $fc_opts\" ;; create-ignore,--*|propget,--*|proplist,--*|show-ignore,--*|\\ show-externals,--*|mkdirs,--*) __gitcomp \"--revision=\" ;; log,--*) __gitcomp \" --limit= --revision= --verbose --incremental --oneline --show-commit --non-recursive --authors-file= --color \" ;; rebase,--*) __gitcomp \" --merge --verbose --strategy= --local --fetch-all --dry-run $fc_opts \" ;; commit-diff,--*) __gitcomp \"--message= --file= --revision= $cmt_opts\" ;; info,--*) __gitcomp \"--url\" ;; branch,--*) __gitcomp \"--dry-run --message --tag\" ;; tag,--*) __gitcomp \"--dry-run --message\" ;; blame,--*) __gitcomp \"--git-format\" ;; migrate,--*) __gitcomp \" --config-dir= --ignore-paths= --minimize --no-auth-cache --username= \" ;; reset,--*) __gitcomp \"--revision= --parent\" ;; *) ;; esac fi } Function Calls: \u2514\u2500 _git_svn \u251c\u2500 __gitcomp \u2514\u2500 __git_find_on_cmdline >> _git_tag(): function _git_tag() { local i c=1 f=0 while [ $c -lt $cword ]; do i=\"${words[c]}\" case \"$i\" in -d|--delete|-v|--verify) __gitcomp_direct \"$(__git_tags \"\" \"$cur\" \" \")\" return ;; -f) f=1 ;; esac ((c++)) done case \"$prev\" in -m|-F) ;; -*|tag) if [ $f = 1 ]; then __gitcomp_direct \"$(__git_tags \"\" \"$cur\" \" \")\" fi ;; *) __git_complete_refs ;; esac case \"$cur\" in --*) __gitcomp_builtin tag ;; esac } Function Calls: \u2514\u2500 _git_tag \u251c\u2500 __gitcomp_direct \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_tags \u251c\u2500 __git \u2514\u2500 _git >> _git_whatchanged(): function _git_whatchanged() { _git_log } >> _git_worktree(): function _git_worktree() { local subcommands=\"add list lock move prune remove unlock\" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if [ -z \"$subcommand\" ]; then __gitcomp \"$subcommands\" else case \"$subcommand,$cur\" in add,--*) __gitcomp_builtin worktree_add ;; list,--*) __gitcomp_builtin worktree_list ;; lock,--*) __gitcomp_builtin worktree_lock ;; prune,--*) __gitcomp_builtin worktree_prune ;; remove,--*) __gitcomp \"--force\" ;; *) ;; esac fi } Function Calls: \u2514\u2500 _git_worktree \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_find_on_cmdline >> __git_complete_common(): function __git_complete_common() { local command=\"$1\" case \"$cur\" in --*) __gitcomp_builtin \"$command\" ;; esac } __git_cmds_with_parseopt_helper= Function Calls: \u2514\u2500 __git_complete_common \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git >> __git_support_parseopt_helper(): function __git_support_parseopt_helper() { test -n \"$__git_cmds_with_parseopt_helper\" || __git_cmds_with_parseopt_helper=\"$(__git --list-cmds=parseopt)\" case \" $__git_cmds_with_parseopt_helper \" in *\" $1 \"*) return 0 ;; *) return 1 ;; esac } Function Calls: \u2514\u2500 __git_support_parseopt_helper \u251c\u2500 __git \u2514\u2500 _git >> __git_complete_command(): function __git_complete_command() { local command=\"$1\" local completion_func=\"_git_${command//-/_}\" if ! declare -f $completion_func >/dev/null 2>/dev/null && declare -f _completion_loader >/dev/null 2>/dev/null then _completion_loader \"git-$command\" fi if declare -f $completion_func >/dev/null 2>/dev/null then $completion_func return 0 elif __git_support_parseopt_helper \"$command\" then __git_complete_common \"$command\" return 0 else return 1 fi } Function Calls: \u2514\u2500 __git_complete_command \u251c\u2500 __git_complete_common | \u2514\u2500 __gitcomp_builtin \u2514\u2500 __git_support_parseopt_helper \u251c\u2500 __git \u2514\u2500 _git >> __git_main(): function __git_main() { local i c=1 command __git_dir __git_repo_path local __git_C_args C_args_count=0 while [ $c -lt $cword ]; do i=\"${words[c]}\" case \"$i\" in --git-dir=*) __git_dir=\"${i#--git-dir=}\" ;; --git-dir) ((c++)) ; __git_dir=\"${words[c]}\" ;; --bare) __git_dir=\".\" ;; --help) command=\"help\"; break ;; -c|--work-tree|--namespace) ((c++)) ;; -C) __git_C_args[C_args_count++]=-C ((c++)) __git_C_args[C_args_count++]=\"${words[c]}\" ;; -*) ;; *) command=\"$i\"; break ;; esac ((c++)) done if [ -z \"$command\" ]; then case \"$prev\" in --git-dir|-C|--work-tree) return ;; -c|--namespace) return ;; esac case \"$cur\" in --*) __gitcomp \" --paginate --no-pager --git-dir= --bare --version --exec-path --exec-path= --html-path --man-path --info-path --work-tree= --namespace= --no-replace-objects --help \" ;; *) if test -n \"$GIT_TESTING_PORCELAIN_COMMAND_LIST\" then __gitcomp \"$GIT_TESTING_PORCELAIN_COMMAND_LIST\" else __gitcomp \"$(git --list-cmds=list-mainporcelain,others,nohelpers,alias,list-complete,config)\" fi ;; esac return fi __git_complete_command \"$command\" && return local expansion=$(__git_aliased_command \"$command\") if [ -n \"$expansion\" ]; then words[1]=$expansion __git_complete_command \"$expansion\" fi } Function Calls: \u2514\u2500 __git_main \u251c\u2500 __gitcomp \u251c\u2500 __git_aliased_command | \u251c\u2500 __git | \u2514\u2500 _git \u2514\u2500 __git_complete_command \u251c\u2500 __git_complete_common \u2514\u2500 __git_support_parseopt_helper >> __gitk_main(): function __gitk_main() { __git_has_doubledash && return local __git_repo_path __git_find_repo_path local merge=\"\" if [ -f \"$__git_repo_path/MERGE_HEAD\" ]; then merge=\"--merge\" fi case \"$cur\" in --*) __gitcomp \" $__git_log_common_options $__git_log_gitk_options $merge \" return ;; esac __git_complete_revlist } if [[ -n ${ZSH_VERSION-} ]] && [[ -z ${GIT_SOURCING_ZSH_COMPLETION-} ]]; then echo \"WARNING: this script is deprecated, please see git-completion.zsh\" 1>&2 autoload -U +X compinit && compinit __gitcomp () { emulate -L zsh local cur_=\"${3-$cur}\" case \"$cur_\" in --*=) ;; *) local c IFS=$' \\t\\n' local -a array for c in ${=1}; do c=\"$c${4-}\" case $c in --*=*|*.) ;; *) c=\"$c \" ;; esac array[${#array[@]}+1]=\"$c\" done compset -P '*[=:]' compadd -Q -S '' -p \"${2-}\" -a -- array && _ret=0 ;; esac } __gitcomp_direct() { emulate -L zsh local IFS=$'\\n' compset -P '*[=:]' compadd -Q -- ${=1} && _ret=0 } __gitcomp_nl() { emulate -L zsh local IFS=$'\\n' compset -P '*[=:]' compadd -Q -S \"${4- }\" -p \"${2-}\" -- ${=1} && _ret=0 } __gitcomp_file_direct() { emulate -L zsh local IFS=$'\\n' compset -P '*[=:]' compadd -f -- ${=1} && _ret=0 } __gitcomp_file() { emulate -L zsh local IFS=$'\\n' compset -P '*[=:]' compadd -p \"${2-}\" -f -- ${=1} && _ret=0 } _git() { local _ret=1 cur cword prev cur=${words[CURRENT]} prev=${words[CURRENT-1]} let cword=CURRENT-1 emulate ksh -c __${service}_main let _ret && _default && _ret=0 return _ret } compdef _git git gitk return fi Function Calls: \u2514\u2500 __gitk_main \u251c\u2500 __gitcomp \u251c\u2500 __git_has_doubledash \u2514\u2500 _git >> __git_func_wrap(): function __git_func_wrap() { local cur words cword prev _get_comp_words_by_ref -n =: cur words cword prev $1 } >> __git_complete(): function __git_complete() { local wrapper=\"__git_wrap${2}\" eval \"$wrapper () { __git_func_wrap $2 ; }\" complete -o bashdefault -o default -o nospace -F $wrapper $1 2>/dev/null \\ || complete -o default -o nospace -F $wrapper $1 } Function Calls: \u2514\u2500 __git_complete \u2514\u2500 __git_func_wrap >> _git(): function _git () { __git_wrap__git_main } >> _gitk(): function _gitk () { __git_wrap__gitk_main } __git_complete git __git_main __git_complete gitk __gitk_main if [ Cygwin = \"$(uname -o 2>/dev/null)\" ]; then __git_complete git.exe __git_main fi Function Calls: \u2514\u2500 _gitk \u2514\u2500 __git_complete \u2514\u2500 __git_func_wrap","title":"git_completion"},{"location":"completion/git_completion/#git-completions","text":"(in /home/bsgt/sys_bashrc/completions/git_completion.sh)","title":"GIT Completions"},{"location":"completion/git_completion/#function-index","text":"01 - __git_find_repo_path 02 - __gitdir 03 - __git 04 - __git_dequote 05 - __git_reassemble_comp_words_by_ref 06 - __gitcomp_direct 07 - __gitcompappend 08 - __gitcompadd 09 - __gitcomp 10 - __gitcomp_builtin 11 - __gitcomp_nl_append 12 - __gitcomp_nl 13 - __gitcomp_file_direct 14 - __gitcomp_file 15 - __git_ls_files_helper 16 - __git_index_files 17 - __git_complete_index_file 18 - __git_heads 19 - __git_tags 20 - __git_refs 21 - __git_complete_refs 22 - __git_refs2 23 - __git_complete_fetch_refspecs 24 - __git_refs_remotes 25 - __git_remotes 26 - __git_is_configured_remote 27 - __git_list_merge_strategies 28 - __git_compute_merge_strategies 29 - __git_complete_revlist_file 30 - __git_complete_file 31 - __git_complete_revlist 32 - __git_complete_remote_or_refspec 33 - __git_complete_strategy 34 - __git_compute_all_commands 35 - __git_get_config_variables 36 - __git_pretty_aliases 37 - __git_aliased_command 38 - __git_find_on_cmdline 39 - __git_get_option_value 40 - __git_has_doubledash 41 - __git_count_arguments 42 - _git_am 43 - _git_apply 44 - _git_add 45 - _git_archive 46 - _git_bisect 47 - _git_branch 48 - _git_bundle 49 - _git_checkout 50 - _git_cherry_pick 51 - _git_clean 52 - _git_clone 53 - _git_commit 54 - _git_describe 55 - _git_diff 56 - _git_difftool 57 - _git_fetch 58 - _git_format_patch 59 - _git_fsck 60 - _git_gitk 61 - __git_match_ctag 62 - __git_complete_symbol 63 - _git_grep 64 - _git_help 65 - _git_init 66 - _git_ls_files 67 - _git_ls_remote 68 - _git_log 69 - _git_merge 70 - _git_mergetool 71 - _git_merge_base 72 - _git_mv 73 - _git_notes 74 - _git_pull 75 - __git_complete_force_with_lease 76 - _git_push 77 - _git_range_diff 78 - _git_rebase 79 - _git_reflog 80 - _git_send_email 81 - _git_stage 82 - _git_status 83 - __git_config_get_set_variables 84 - __git_compute_config_vars 85 - _git_config 86 - _git_remote 87 - _git_replace 88 - _git_rerere 89 - _git_reset 90 - _git_revert 91 - _git_rm 92 - _git_shortlog 93 - _git_show 94 - _git_show_branch 95 - _git_stash 96 - _git_submodule 97 - _git_svn 98 - _git_tag 99 - _git_whatchanged 100 - _git_worktree 101 - __git_complete_common 102 - __git_support_parseopt_helper 103 - __git_complete_command 104 - __git_main 105 - __gitk_main 106 - __git_func_wrap 107 - __git_complete 108 - _git 109 - _gitk","title":"Function Index"},{"location":"completion/git_completion/#__git_find_repo_path","text":"function __git_find_repo_path() { if [ -n \"$__git_repo_path\" ]; then return fi if [ -n \"${__git_C_args-}\" ]; then __git_repo_path=\"$(git \"${__git_C_args[@]}\" \\ ${__git_dir:+--git-dir=\"$__git_dir\"} \\ rev-parse --absolute-git-dir 2>/dev/null)\" elif [ -n \"${__git_dir-}\" ]; then test -d \"$__git_dir\" && __git_repo_path=\"$__git_dir\" elif [ -n \"${GIT_DIR-}\" ]; then test -d \"${GIT_DIR-}\" && __git_repo_path=\"$GIT_DIR\" elif [ -d .git ]; then __git_repo_path=.git else __git_repo_path=\"$(git rev-parse --git-dir 2>/dev/null)\" fi }","title":"&gt;&gt; __git_find_repo_path():"},{"location":"completion/git_completion/#__gitdir","text":"function __gitdir() { if [ -z \"${1-}\" ]; then __git_find_repo_path || return 1 echo \"$__git_repo_path\" elif [ -d \"$1/.git\" ]; then echo \"$1/.git\" else echo \"$1\" fi }","title":"&gt;&gt; __gitdir():"},{"location":"completion/git_completion/#function-calls","text":"\u2514\u2500 __gitdir \u2514\u2500 __git_find_repo_path","title":"Function Calls:"},{"location":"completion/git_completion/#__git","text":"function __git() { git ${__git_C_args:+\"${__git_C_args[@]}\"} \\ ${__git_dir:+--git-dir=\"$__git_dir\"} \"$@\" 2>/dev/null }","title":"&gt;&gt; __git():"},{"location":"completion/git_completion/#__git_dequote","text":"function __git_dequote() { local rest=\"$1\" len ch dequoted_word=\"\" while test -n \"$rest\"; do len=${#dequoted_word} dequoted_word=\"$dequoted_word${rest%%[\\\\\\'\\\"]*}\" rest=\"${rest:$((${#dequoted_word}-$len))}\" case \"${rest:0:1}\" in \\\\) ch=\"${rest:1:1}\" case \"$ch\" in $'\\n') ;; *) dequoted_word=\"$dequoted_word$ch\" ;; esac rest=\"${rest:2}\" ;; \\') rest=\"${rest:1}\" len=${#dequoted_word} dequoted_word=\"$dequoted_word${rest%%\\'*}\" rest=\"${rest:$((${#dequoted_word}-$len+1))}\" ;; \\\") rest=\"${rest:1}\" while test -n \"$rest\" ; do len=${#dequoted_word} dequoted_word=\"$dequoted_word${rest%%[\\\\\\\"]*}\" rest=\"${rest:$((${#dequoted_word}-$len))}\" case \"${rest:0:1}\" in \\\\) ch=\"${rest:1:1}\" case \"$ch\" in \\\"|\\\\|\\$|\\`) dequoted_word=\"$dequoted_word$ch\" ;; $'\\n') ;; *) dequoted_word=\"$dequoted_word\\\\$ch\" ;; esac rest=\"${rest:2}\" ;; \\\") rest=\"${rest:1}\" break ;; esac done ;; esac done }","title":"&gt;&gt; __git_dequote():"},{"location":"completion/git_completion/#__git_reassemble_comp_words_by_ref","text":"function __git_reassemble_comp_words_by_ref() { local exclude i j first exclude=\"${1//[^$COMP_WORDBREAKS]}\" cword_=$COMP_CWORD if [ -z \"$exclude\" ]; then words_=(\"${COMP_WORDS[@]}\") return fi for ((i=0, j=0; i < ${#COMP_WORDS[@]}; i++, j++)); do first=t while [ $i -gt 0 ] && [ -n \"${COMP_WORDS[$i]}\" ] && [ \"${COMP_WORDS[$i]//[^$exclude]}\" = \"${COMP_WORDS[$i]}\" ] do if [ $j -ge 2 ] && [ -n \"$first\" ]; then ((j--)) fi first= words_[$j]=${words_[j]}${COMP_WORDS[i]} if [ $i = $COMP_CWORD ]; then cword_=$j fi if (($i < ${#COMP_WORDS[@]} - 1)); then ((i++)) else return fi done words_[$j]=${words_[j]}${COMP_WORDS[i]} if [ $i = $COMP_CWORD ]; then cword_=$j fi done } if ! type _get_comp_words_by_ref >/dev/null 2>&1; then","title":"&gt;&gt; __git_reassemble_comp_words_by_ref():"},{"location":"completion/git_completion/#__gitcomp_direct","text":"function __gitcomp_direct() { local IFS=$'\\n' COMPREPLY=($1) }","title":"&gt;&gt; __gitcomp_direct():"},{"location":"completion/git_completion/#__gitcompappend","text":"function __gitcompappend() { local x i=${#COMPREPLY[@]} for x in $1; do if [[ \"$x\" == \"$3\"* ]]; then COMPREPLY[i++]=\"$2$x$4\" fi done }","title":"&gt;&gt; __gitcompappend():"},{"location":"completion/git_completion/#__gitcompadd","text":"function __gitcompadd() { COMPREPLY=() __gitcompappend \"$@\" }","title":"&gt;&gt; __gitcompadd():"},{"location":"completion/git_completion/#function-calls_1","text":"\u2514\u2500 __gitcompadd \u2514\u2500 __gitcompappend","title":"Function Calls:"},{"location":"completion/git_completion/#__gitcomp","text":"function __gitcomp() { local cur_=\"${3-$cur}\" case \"$cur_\" in --*=) ;; --no-*) local c i=0 IFS=$' \\t\\n' for c in $1; do if [[ $c == \"--\" ]]; then continue fi c=\"$c${4-}\" if [[ $c == \"$cur_\"* ]]; then case $c in --*=*|*.) ;; *) c=\"$c \" ;; esac COMPREPLY[i++]=\"${2-}$c\" fi done ;; *) local c i=0 IFS=$' \\t\\n' for c in $1; do if [[ $c == \"--\" ]]; then c=\"--no-...${4-}\" if [[ $c == \"$cur_\"* ]]; then COMPREPLY[i++]=\"${2-}$c \" fi break fi c=\"$c${4-}\" if [[ $c == \"$cur_\"* ]]; then case $c in --*=*|*.) ;; *) c=\"$c \" ;; esac COMPREPLY[i++]=\"${2-}$c\" fi done ;; esac } if [[ -n ${ZSH_VERSION-} ]]; then unset $(set |sed -ne 's/^\\(__gitcomp_builtin_[a-zA-Z0-9_][a-zA-Z0-9_]*\\)=.*/\\1/p') 2>/dev/null else unset $(compgen -v __gitcomp_builtin_) fi","title":"&gt;&gt; __gitcomp():"},{"location":"completion/git_completion/#__gitcomp_builtin","text":"function __gitcomp_builtin() { local cmd=\"$1\" local incl=\"$2\" local excl=\"$3\" local var=__gitcomp_builtin_\"${cmd/-/_}\" local options eval \"options=\\$$var\" if [ -z \"$options\" ]; then options=\" $incl $(__git ${cmd/_/ } --git-completion-helper) \" for i in $excl; do options=\"${options/ $i / }\" done eval \"$var=\\\"$options\\\"\" fi __gitcomp \"$options\" }","title":"&gt;&gt; __gitcomp_builtin():"},{"location":"completion/git_completion/#function-calls_2","text":"\u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__gitcomp_nl_append","text":"function __gitcomp_nl_append() { local IFS=$'\\n' __gitcompappend \"$1\" \"${2-}\" \"${3-$cur}\" \"${4- }\" }","title":"&gt;&gt; __gitcomp_nl_append():"},{"location":"completion/git_completion/#function-calls_3","text":"\u2514\u2500 __gitcomp_nl_append \u2514\u2500 __gitcompappend","title":"Function Calls:"},{"location":"completion/git_completion/#__gitcomp_nl","text":"function __gitcomp_nl() { COMPREPLY=() __gitcomp_nl_append \"$@\" }","title":"&gt;&gt; __gitcomp_nl():"},{"location":"completion/git_completion/#function-calls_4","text":"\u2514\u2500 __gitcomp_nl \u2514\u2500 __gitcomp_nl_append \u2514\u2500 __gitcompappend","title":"Function Calls:"},{"location":"completion/git_completion/#__gitcomp_file_direct","text":"function __gitcomp_file_direct() { local IFS=$'\\n' COMPREPLY=($1) compopt -o filenames +o nospace 2>/dev/null || compgen -f /non-existing-dir/ >/dev/null || true }","title":"&gt;&gt; __gitcomp_file_direct():"},{"location":"completion/git_completion/#__gitcomp_file","text":"function __gitcomp_file() { local IFS=$'\\n' __gitcompadd \"$1\" \"${2-}\" \"${3-$cur}\" \"\" compopt -o filenames +o nospace 2>/dev/null || compgen -f /non-existing-dir/ >/dev/null || true }","title":"&gt;&gt; __gitcomp_file():"},{"location":"completion/git_completion/#function-calls_5","text":"\u2514\u2500 __gitcomp_file \u2514\u2500 __gitcompadd \u2514\u2500 __gitcompappend","title":"Function Calls:"},{"location":"completion/git_completion/#__git_ls_files_helper","text":"function __git_ls_files_helper() { if [ \"$2\" == \"--committable\" ]; then __git -C \"$1\" -c core.quotePath=false diff-index \\ --name-only --relative HEAD -- \"${3//\\\\/\\\\\\\\}*\" else __git -C \"$1\" -c core.quotePath=false ls-files \\ --exclude-standard $2 -- \"${3//\\\\/\\\\\\\\}*\" fi }","title":"&gt;&gt; __git_ls_files_helper():"},{"location":"completion/git_completion/#function-calls_6","text":"\u2514\u2500 __git_ls_files_helper \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_index_files","text":"function __git_index_files() { local root=\"$2\" match=\"$3\" __git_ls_files_helper \"$root\" \"$1\" \"$match\" | awk -F / -v pfx=\"${2//\\\\/\\\\\\\\}\" '{ paths[$1] = 1 } END { for (p in paths) { if (substr(p, 1, 1) != \"\\\"\") { print pfx p continue } p = dequote(p) if (p == \"\") continue if (p in paths) continue else print pfx p } } function dequote(p, bs_idx, out, esc, esc_idx, dec) { p = substr(p, 2) while ((bs_idx = index(p, \"\\\\\")) != 0) { out = out substr(p, 1, bs_idx - 1) esc = substr(p, bs_idx + 1, 1) p = substr(p, bs_idx + 2) if ((esc_idx = index(\"abtvfr\\\"\\\\\", esc)) != 0) { out = out substr(\"\\a\\b\\t\\v\\f\\r\\\"\\\\\", esc_idx, 1) } else if (esc == \"n\") { return \"\" } else { dec = esc * 64 + \\ substr(p, 1, 1) * 8 + \\ substr(p, 2, 1) out = out sprintf(\"%c\", dec) p = substr(p, 3) } } if (substr(p, length(p), 1) == \"\\\"\") out = out substr(p, 1, length(p) - 1) else out = out p return out }' }","title":"&gt;&gt; __git_index_files():"},{"location":"completion/git_completion/#function-calls_7","text":"\u2514\u2500 __git_index_files \u2514\u2500 __git_ls_files_helper \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_complete_index_file","text":"function __git_complete_index_file() { local dequoted_word pfx=\"\" cur_ __git_dequote \"$cur\" case \"$dequoted_word\" in ?*/*) pfx=\"${dequoted_word%/*}/\" cur_=\"${dequoted_word##*/}\" ;; *) cur_=\"$dequoted_word\" esac __gitcomp_file_direct \"$(__git_index_files \"$1\" \"$pfx\" \"$cur_\")\" }","title":"&gt;&gt; __git_complete_index_file():"},{"location":"completion/git_completion/#function-calls_8","text":"\u2514\u2500 __git_complete_index_file \u251c\u2500 __git_dequote \u251c\u2500 __gitcomp_file_direct \u2514\u2500 __git_index_files \u2514\u2500 __git_ls_files_helper","title":"Function Calls:"},{"location":"completion/git_completion/#__git_heads","text":"function __git_heads() { local pfx=\"${1-}\" cur_=\"${2-}\" sfx=\"${3-}\" __git for-each-ref --format=\"${pfx//\\%/%%}%(refname:strip=2)$sfx\" \\ \"refs/heads/$cur_*\" \"refs/heads/$cur_*/**\" }","title":"&gt;&gt; __git_heads():"},{"location":"completion/git_completion/#function-calls_9","text":"\u2514\u2500 __git_heads \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_tags","text":"function __git_tags() { local pfx=\"${1-}\" cur_=\"${2-}\" sfx=\"${3-}\" __git for-each-ref --format=\"${pfx//\\%/%%}%(refname:strip=2)$sfx\" \\ \"refs/tags/$cur_*\" \"refs/tags/$cur_*/**\" }","title":"&gt;&gt; __git_tags():"},{"location":"completion/git_completion/#function-calls_10","text":"\u2514\u2500 __git_tags \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_refs","text":"function __git_refs() { local i hash dir track=\"${2-}\" local list_refs_from=path remote=\"${1-}\" local format refs local pfx=\"${3-}\" cur_=\"${4-$cur}\" sfx=\"${5-}\" local match=\"${4-}\" local fer_pfx=\"${pfx//\\%/%%}\" # \"escape\" for-each-ref format specifiers __git_find_repo_path dir=\"$__git_repo_path\" if [ -z \"$remote\" ]; then if [ -z \"$dir\" ]; then return fi else if __git_is_configured_remote \"$remote\"; then list_refs_from=remote elif [ -d \"$remote/.git\" ]; then dir=\"$remote/.git\" elif [ -d \"$remote\" ]; then dir=\"$remote\" else list_refs_from=url fi fi if [ \"$list_refs_from\" = path ]; then if [[ \"$cur_\" == ^* ]]; then pfx=\"$pfx^\" fer_pfx=\"$fer_pfx^\" cur_=${cur_#^} match=${match#^} fi case \"$cur_\" in refs|refs/*) format=\"refname\" refs=(\"$match*\" \"$match*/**\") track=\"\" ;; *) for i in HEAD FETCH_HEAD ORIG_HEAD MERGE_HEAD REBASE_HEAD; do case \"$i\" in $match*) if [ -e \"$dir/$i\" ]; then echo \"$pfx$i$sfx\" fi ;; esac done format=\"refname:strip=2\" refs=(\"refs/tags/$match*\" \"refs/tags/$match*/**\" \"refs/heads/$match*\" \"refs/heads/$match*/**\" \"refs/remotes/$match*\" \"refs/remotes/$match*/**\") ;; esac __git_dir=\"$dir\" __git for-each-ref --format=\"$fer_pfx%($format)$sfx\" \\ \"${refs[@]}\" if [ -n \"$track\" ]; then __git for-each-ref --format=\"$fer_pfx%(refname:strip=3)$sfx\" \\ --sort=\"refname:strip=3\" \\ \"refs/remotes/*/$match*\" \"refs/remotes/*/$match*/**\" | \\ uniq -u fi return fi case \"$cur_\" in refs|refs/*) __git ls-remote \"$remote\" \"$match*\" | \\ while read -r hash i; do case \"$i\" in *^{}) ;; *) echo \"$pfx$i$sfx\" ;; esac done ;; *) if [ \"$list_refs_from\" = remote ]; then case \"HEAD\" in $match*) echo \"${pfx}HEAD$sfx\" ;; esac __git for-each-ref --format=\"$fer_pfx%(refname:strip=3)$sfx\" \\ \"refs/remotes/$remote/$match*\" \\ \"refs/remotes/$remote/$match*/**\" else local query_symref case \"HEAD\" in $match*) query_symref=\"HEAD\" ;; esac __git ls-remote \"$remote\" $query_symref \\ \"refs/tags/$match*\" \"refs/heads/$match*\" \\ \"refs/remotes/$match*\" | while read -r hash i; do case \"$i\" in *^{}) ;; refs/*) echo \"$pfx${i#refs/*/}$sfx\" ;; *) echo \"$pfx$i$sfx\" ;; # symbolic refs esac done fi ;; esac }","title":"&gt;&gt; __git_refs():"},{"location":"completion/git_completion/#function-calls_11","text":"\u2514\u2500 __git_refs \u251c\u2500 __git \u251c\u2500 __git_is_configured_remote | \u2514\u2500 __git_remotes \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_complete_refs","text":"function __git_complete_refs() { local remote track pfx cur_=\"$cur\" sfx=\" \" while test $# != 0; do case \"$1\" in --remote=*) remote=\"${1##--remote=}\" ;; --track) track=\"yes\" ;; --pfx=*) pfx=\"${1##--pfx=}\" ;; --cur=*) cur_=\"${1##--cur=}\" ;; --sfx=*) sfx=\"${1##--sfx=}\" ;; *) return 1 ;; esac shift done __gitcomp_direct \"$(__git_refs \"$remote\" \"$track\" \"$pfx\" \"$cur_\" \"$sfx\")\" }","title":"&gt;&gt; __git_complete_refs():"},{"location":"completion/git_completion/#function-calls_12","text":"\u2514\u2500 __git_complete_refs \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_refs \u251c\u2500 __git \u251c\u2500 __git_is_configured_remote \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_refs2","text":"function __git_refs2() { local i for i in $(__git_refs \"$1\"); do echo \"$i:$i\" done }","title":"&gt;&gt; __git_refs2():"},{"location":"completion/git_completion/#function-calls_13","text":"\u2514\u2500 __git_refs2 \u2514\u2500 __git_refs \u251c\u2500 __git \u251c\u2500 __git_is_configured_remote \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_complete_fetch_refspecs","text":"function __git_complete_fetch_refspecs() { local i remote=\"$1\" pfx=\"${2-}\" cur_=\"${3-$cur}\" sfx=\"${4- }\" __gitcomp_direct \"$( for i in $(__git_refs \"$remote\" \"\" \"\" \"$cur_\") ; do echo \"$pfx$i:$i$sfx\" done )\" }","title":"&gt;&gt; __git_complete_fetch_refspecs():"},{"location":"completion/git_completion/#function-calls_14","text":"\u2514\u2500 __git_complete_fetch_refspecs \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_refs \u251c\u2500 __git \u251c\u2500 __git_is_configured_remote \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_refs_remotes","text":"function __git_refs_remotes() { local i hash __git ls-remote \"$1\" 'refs/heads/*' | \\ while read -r hash i; do echo \"$i:refs/remotes/$1/${i#refs/heads/}\" done }","title":"&gt;&gt; __git_refs_remotes():"},{"location":"completion/git_completion/#function-calls_15","text":"\u2514\u2500 __git_refs_remotes \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_remotes","text":"function __git_remotes() { __git_find_repo_path test -d \"$__git_repo_path/remotes\" && ls -1 \"$__git_repo_path/remotes\" __git remote }","title":"&gt;&gt; __git_remotes():"},{"location":"completion/git_completion/#function-calls_16","text":"\u2514\u2500 __git_remotes \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_is_configured_remote","text":"function __git_is_configured_remote() { local remote for remote in $(__git_remotes); do if [ \"$remote\" = \"$1\" ]; then return 0 fi done return 1 }","title":"&gt;&gt; __git_is_configured_remote():"},{"location":"completion/git_completion/#function-calls_17","text":"\u2514\u2500 __git_is_configured_remote \u2514\u2500 __git_remotes \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_list_merge_strategies","text":"function __git_list_merge_strategies() { LANG=C LC_ALL=C git merge -s help 2>&1 | sed -n -e '/[Aa]vailable strategies are: /,/^$/{ s/\\.$// s/.*:// s/^[ ]*// s/[ ]*$// p }' } __git_merge_strategies=","title":"&gt;&gt; __git_list_merge_strategies():"},{"location":"completion/git_completion/#__git_compute_merge_strategies","text":"function __git_compute_merge_strategies() { test -n \"$__git_merge_strategies\" || __git_merge_strategies=$(__git_list_merge_strategies) }","title":"&gt;&gt; __git_compute_merge_strategies():"},{"location":"completion/git_completion/#function-calls_18","text":"\u2514\u2500 __git_compute_merge_strategies \u2514\u2500 __git_list_merge_strategies","title":"Function Calls:"},{"location":"completion/git_completion/#__git_complete_revlist_file","text":"function __git_complete_revlist_file() { local dequoted_word pfx ls ref cur_=\"$cur\" case \"$cur_\" in *..?*:*) return ;; ?*:*) ref=\"${cur_%%:*}\" cur_=\"${cur_#*:}\" __git_dequote \"$cur_\" case \"$dequoted_word\" in ?*/*) pfx=\"${dequoted_word%/*}\" cur_=\"${dequoted_word##*/}\" ls=\"$ref:$pfx\" pfx=\"$pfx/\" ;; *) cur_=\"$dequoted_word\" ls=\"$ref\" ;; esac case \"$COMP_WORDBREAKS\" in *:*) : great ;; *) pfx=\"$ref:$pfx\" ;; esac __gitcomp_file \"$(__git ls-tree \"$ls\" \\ | sed 's/^.* // s/$//')\" \\ \"$pfx\" \"$cur_\" ;; *...*) pfx=\"${cur_%...*}...\" cur_=\"${cur_#*...}\" __git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\" ;; *..*) pfx=\"${cur_%..*}..\" cur_=\"${cur_#*..}\" __git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\" ;; *) __git_complete_refs ;; esac }","title":"&gt;&gt; __git_complete_revlist_file():"},{"location":"completion/git_completion/#function-calls_19","text":"\u2514\u2500 __git_complete_revlist_file \u251c\u2500 __git \u251c\u2500 __git_dequote \u251c\u2500 __gitcomp_file | \u2514\u2500 __gitcompadd \u251c\u2500 __git_complete_refs | \u251c\u2500 __gitcomp_direct | \u2514\u2500 __git_refs \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_complete_file","text":"function __git_complete_file() { __git_complete_revlist_file }","title":"&gt;&gt; __git_complete_file():"},{"location":"completion/git_completion/#__git_complete_revlist","text":"function __git_complete_revlist() { __git_complete_revlist_file }","title":"&gt;&gt; __git_complete_revlist():"},{"location":"completion/git_completion/#__git_complete_remote_or_refspec","text":"function __git_complete_remote_or_refspec() { local cur_=\"$cur\" cmd=\"${words[1]}\" local i c=2 remote=\"\" pfx=\"\" lhs=1 no_complete_refspec=0 if [ \"$cmd\" = \"remote\" ]; then ((c++)) fi while [ $c -lt $cword ]; do i=\"${words[c]}\" case \"$i\" in --mirror) [ \"$cmd\" = \"push\" ] && no_complete_refspec=1 ;; -d|--delete) [ \"$cmd\" = \"push\" ] && lhs=0 ;; --all) case \"$cmd\" in push) no_complete_refspec=1 ;; fetch) return ;; *) ;; esac ;; --multiple) no_complete_refspec=1; break ;; -*) ;; *) remote=\"$i\"; break ;; esac ((c++)) done if [ -z \"$remote\" ]; then __gitcomp_nl \"$(__git_remotes)\" return fi if [ $no_complete_refspec = 1 ]; then return fi [ \"$remote\" = \".\" ] && remote= case \"$cur_\" in *:*) case \"$COMP_WORDBREAKS\" in *:*) : great ;; *) pfx=\"${cur_%%:*}:\" ;; esac cur_=\"${cur_#*:}\" lhs=0 ;; +*) pfx=\"+\" cur_=\"${cur_#+}\" ;; esac case \"$cmd\" in fetch) if [ $lhs = 1 ]; then __git_complete_fetch_refspecs \"$remote\" \"$pfx\" \"$cur_\" else __git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\" fi ;; pull|remote) if [ $lhs = 1 ]; then __git_complete_refs --remote=\"$remote\" --pfx=\"$pfx\" --cur=\"$cur_\" else __git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\" fi ;; push) if [ $lhs = 1 ]; then __git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\" else __git_complete_refs --remote=\"$remote\" --pfx=\"$pfx\" --cur=\"$cur_\" fi ;; esac }","title":"&gt;&gt; __git_complete_remote_or_refspec():"},{"location":"completion/git_completion/#function-calls_20","text":"\u2514\u2500 __git_complete_remote_or_refspec \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u251c\u2500 __git_complete_refs | \u251c\u2500 __gitcomp_direct | \u2514\u2500 __git_refs \u251c\u2500 __git_complete_fetch_refspecs | \u251c\u2500 __gitcomp_direct | \u2514\u2500 __git_refs \u2514\u2500 __git_remotes \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_complete_strategy","text":"function __git_complete_strategy() { __git_compute_merge_strategies case \"$prev\" in -s|--strategy) __gitcomp \"$__git_merge_strategies\" return 0 esac case \"$cur\" in --strategy=*) __gitcomp \"$__git_merge_strategies\" \"\" \"${cur##--strategy=}\" return 0 ;; esac return 1 } __git_all_commands=","title":"&gt;&gt; __git_complete_strategy():"},{"location":"completion/git_completion/#function-calls_21","text":"\u2514\u2500 __git_complete_strategy \u2514\u2500 __gitcomp","title":"Function Calls:"},{"location":"completion/git_completion/#__git_compute_all_commands","text":"function __git_compute_all_commands() { test -n \"$__git_all_commands\" || __git_all_commands=$(git --list-cmds=main,others,alias,nohelpers) }","title":"&gt;&gt; __git_compute_all_commands():"},{"location":"completion/git_completion/#__git_get_config_variables","text":"function __git_get_config_variables() { local section=\"$1\" i IFS=$'\\n' for i in $(__git config --name-only --get-regexp \"^$section\\..*\"); do echo \"${i#$section.}\" done }","title":"&gt;&gt; __git_get_config_variables():"},{"location":"completion/git_completion/#function-calls_22","text":"\u2514\u2500 __git_get_config_variables \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_pretty_aliases","text":"function __git_pretty_aliases() { __git_get_config_variables \"pretty\" }","title":"&gt;&gt; __git_pretty_aliases():"},{"location":"completion/git_completion/#function-calls_23","text":"\u2514\u2500 __git_pretty_aliases \u2514\u2500 __git_get_config_variables \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_aliased_command","text":"function __git_aliased_command() { local word cmdline=$(__git config --get \"alias.$1\") for word in $cmdline; do case \"$word\" in \\!gitk|gitk) echo \"gitk\" return ;; \\!*) : shell command alias ;; -*) : option ;; *=*) : setting env ;; git) : git itself ;; \\(\\)) : skip parens of shell function definition ;; {) : skip start of shell helper function ;; :) : skip null command ;; \\'*) : skip opening quote after sh -c ;; *) echo \"$word\" return esac done }","title":"&gt;&gt; __git_aliased_command():"},{"location":"completion/git_completion/#function-calls_24","text":"\u2514\u2500 __git_aliased_command \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_find_on_cmdline","text":"function __git_find_on_cmdline() { local word subcommand c=1 while [ $c -lt $cword ]; do word=\"${words[c]}\" for subcommand in $1; do if [ \"$subcommand\" = \"$word\" ]; then echo \"$subcommand\" return fi done ((c++)) done }","title":"&gt;&gt; __git_find_on_cmdline():"},{"location":"completion/git_completion/#__git_get_option_value","text":"function __git_get_option_value() { local c short_opt long_opt val local result= values config_key word short_opt=\"$1\" long_opt=\"$2\" values=\"$3\" config_key=\"$4\" ((c = $cword - 1)) while [ $c -ge 0 ]; do word=\"${words[c]}\" for val in $values; do if [ \"$short_opt$val\" = \"$word\" ] || [ \"$long_opt$val\" = \"$word\" ]; then result=\"$val\" break 2 fi done ((c--)) done if [ -n \"$config_key\" ] && [ -z \"$result\" ]; then result=\"$(__git config \"$config_key\")\" fi echo \"$result\" }","title":"&gt;&gt; __git_get_option_value():"},{"location":"completion/git_completion/#function-calls_25","text":"\u2514\u2500 __git_get_option_value \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_has_doubledash","text":"function __git_has_doubledash() { local c=1 while [ $c -lt $cword ]; do if [ \"--\" = \"${words[c]}\" ]; then return 0 fi ((c++)) done return 1 }","title":"&gt;&gt; __git_has_doubledash():"},{"location":"completion/git_completion/#__git_count_arguments","text":"function __git_count_arguments() { local word i c=0 for ((i=1; i < ${#words[@]}; i++)); do word=\"${words[i]}\" case \"$word\" in --) ((c = 0)) ;; \"$1\") ((c = 0)) ;; ?*) ((c++)) ;; esac done printf \"%d\" $c } __git_whitespacelist=\"nowarn warn error error-all fix\" __git_am_inprogress_options=\"--skip --continue --resolved --abort --quit --show-current-patch\"","title":"&gt;&gt; __git_count_arguments():"},{"location":"completion/git_completion/#_git_am","text":"function _git_am() { __git_find_repo_path if [ -d \"$__git_repo_path\"/rebase-apply ]; then __gitcomp \"$__git_am_inprogress_options\" return fi case \"$cur\" in --whitespace=*) __gitcomp \"$__git_whitespacelist\" \"\" \"${cur##--whitespace=}\" return ;; --*) __gitcomp_builtin am \"\" \\ \"$__git_am_inprogress_options\" return esac }","title":"&gt;&gt; _git_am():"},{"location":"completion/git_completion/#function-calls_26","text":"\u2514\u2500 _git_am \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_apply","text":"function _git_apply() { case \"$cur\" in --whitespace=*) __gitcomp \"$__git_whitespacelist\" \"\" \"${cur##--whitespace=}\" return ;; --*) __gitcomp_builtin apply return esac }","title":"&gt;&gt; _git_apply():"},{"location":"completion/git_completion/#function-calls_27","text":"\u2514\u2500 _git_apply \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_add","text":"function _git_add() { case \"$cur\" in --*) __gitcomp_builtin add return esac local complete_opt=\"--others --modified --directory --no-empty-directory\" if test -n \"$(__git_find_on_cmdline \"-u --update\")\" then complete_opt=\"--modified\" fi __git_complete_index_file \"$complete_opt\" }","title":"&gt;&gt; _git_add():"},{"location":"completion/git_completion/#function-calls_28","text":"\u2514\u2500 _git_add \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_complete_index_file | \u251c\u2500 __git_dequote | \u251c\u2500 __gitcomp_file_direct | \u2514\u2500 __git_index_files \u2514\u2500 __git_find_on_cmdline","title":"Function Calls:"},{"location":"completion/git_completion/#_git_archive","text":"function _git_archive() { case \"$cur\" in --format=*) __gitcomp \"$(git archive --list)\" \"\" \"${cur##--format=}\" return ;; --remote=*) __gitcomp_nl \"$(__git_remotes)\" \"\" \"${cur##--remote=}\" return ;; --*) __gitcomp \" --format= --list --verbose --prefix= --remote= --exec= --output \" return ;; esac __git_complete_file }","title":"&gt;&gt; _git_archive():"},{"location":"completion/git_completion/#function-calls_29","text":"\u2514\u2500 _git_archive \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u2514\u2500 __git_remotes \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_bisect","text":"function _git_bisect() { __git_has_doubledash && return local subcommands=\"start bad good skip reset visualize replay log run\" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if [ -z \"$subcommand\" ]; then __git_find_repo_path if [ -f \"$__git_repo_path\"/BISECT_START ]; then __gitcomp \"$subcommands\" else __gitcomp \"replay start\" fi return fi case \"$subcommand\" in bad|good|reset|skip|start) __git_complete_refs ;; *) ;; esac }","title":"&gt;&gt; _git_bisect():"},{"location":"completion/git_completion/#function-calls_30","text":"\u2514\u2500 _git_bisect \u251c\u2500 __gitcomp \u251c\u2500 __git_find_on_cmdline \u2514\u2500 __git_has_doubledash","title":"Function Calls:"},{"location":"completion/git_completion/#_git_branch","text":"function _git_branch() { local i c=1 only_local_ref=\"n\" has_r=\"n\" while [ $c -lt $cword ]; do i=\"${words[c]}\" case \"$i\" in -d|--delete|-m|--move) only_local_ref=\"y\" ;; -r|--remotes) has_r=\"y\" ;; esac ((c++)) done case \"$cur\" in --set-upstream-to=*) __git_complete_refs --cur=\"${cur##--set-upstream-to=}\" ;; --*) __gitcomp_builtin branch ;; *) if [ $only_local_ref = \"y\" -a $has_r = \"n\" ]; then __gitcomp_direct \"$(__git_heads \"\" \"$cur\" \" \")\" else __git_complete_refs fi ;; esac }","title":"&gt;&gt; _git_branch():"},{"location":"completion/git_completion/#function-calls_31","text":"\u2514\u2500 _git_branch \u251c\u2500 __gitcomp_direct \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_heads | \u251c\u2500 __git | \u2514\u2500 _git \u2514\u2500 __git_complete_refs \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_refs","title":"Function Calls:"},{"location":"completion/git_completion/#_git_bundle","text":"function _git_bundle() { local cmd=\"${words[2]}\" case \"$cword\" in 2) __gitcomp \"create list-heads verify unbundle\" ;; 3) ;; *) case \"$cmd\" in create) __git_complete_revlist ;; esac ;; esac }","title":"&gt;&gt; _git_bundle():"},{"location":"completion/git_completion/#function-calls_32","text":"\u2514\u2500 _git_bundle \u2514\u2500 __gitcomp","title":"Function Calls:"},{"location":"completion/git_completion/#_git_checkout","text":"function _git_checkout() { __git_has_doubledash && return case \"$cur\" in --conflict=*) __gitcomp \"diff3 merge\" \"\" \"${cur##--conflict=}\" ;; --*) __gitcomp_builtin checkout ;; *) local flags=\"--track --no-track --no-guess\" track_opt=\"--track\" if [ \"$GIT_COMPLETION_CHECKOUT_NO_GUESS\" = \"1\" ] || [ -n \"$(__git_find_on_cmdline \"$flags\")\" ]; then track_opt='' fi __git_complete_refs $track_opt ;; esac } __git_cherry_pick_inprogress_options=\"--continue --quit --abort\"","title":"&gt;&gt; _git_checkout():"},{"location":"completion/git_completion/#function-calls_33","text":"\u2514\u2500 _git_checkout \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_complete_refs | \u251c\u2500 __gitcomp_direct | \u2514\u2500 __git_refs \u251c\u2500 __git_find_on_cmdline \u2514\u2500 __git_has_doubledash","title":"Function Calls:"},{"location":"completion/git_completion/#_git_cherry_pick","text":"function _git_cherry_pick() { __git_find_repo_path if [ -f \"$__git_repo_path\"/CHERRY_PICK_HEAD ]; then __gitcomp \"$__git_cherry_pick_inprogress_options\" return fi case \"$cur\" in --*) __gitcomp_builtin cherry-pick \"\" \\ \"$__git_cherry_pick_inprogress_options\" ;; *) __git_complete_refs ;; esac }","title":"&gt;&gt; _git_cherry_pick():"},{"location":"completion/git_completion/#function-calls_34","text":"\u2514\u2500 _git_cherry_pick \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_clean","text":"function _git_clean() { case \"$cur\" in --*) __gitcomp_builtin clean return ;; esac __git_complete_index_file \"--others --directory\" }","title":"&gt;&gt; _git_clean():"},{"location":"completion/git_completion/#function-calls_35","text":"\u2514\u2500 _git_clean \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_complete_index_file \u251c\u2500 __git_dequote \u251c\u2500 __gitcomp_file_direct \u2514\u2500 __git_index_files","title":"Function Calls:"},{"location":"completion/git_completion/#_git_clone","text":"function _git_clone() { case \"$cur\" in --*) __gitcomp_builtin clone return ;; esac } __git_untracked_file_modes=\"all no normal\"","title":"&gt;&gt; _git_clone():"},{"location":"completion/git_completion/#function-calls_36","text":"\u2514\u2500 _git_clone \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_commit","text":"function _git_commit() { case \"$prev\" in -c|-C) __git_complete_refs return ;; esac case \"$cur\" in --cleanup=*) __gitcomp \"default scissors strip verbatim whitespace \" \"\" \"${cur##--cleanup=}\" return ;; --reuse-message=*|--reedit-message=*|\\ --fixup=*|--squash=*) __git_complete_refs --cur=\"${cur#*=}\" return ;; --untracked-files=*) __gitcomp \"$__git_untracked_file_modes\" \"\" \"${cur##--untracked-files=}\" return ;; --*) __gitcomp_builtin commit return esac if __git rev-parse --verify --quiet HEAD >/dev/null; then __git_complete_index_file \"--committable\" else __git_complete_index_file \"--cached\" fi }","title":"&gt;&gt; _git_commit():"},{"location":"completion/git_completion/#function-calls_37","text":"\u2514\u2500 _git_commit \u251c\u2500 __git \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_complete_index_file | \u251c\u2500 __git_dequote | \u251c\u2500 __gitcomp_file_direct | \u2514\u2500 __git_index_files \u251c\u2500 __git_complete_refs | \u251c\u2500 __gitcomp_direct | \u2514\u2500 __git_refs \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_describe","text":"function _git_describe() { case \"$cur\" in --*) __gitcomp_builtin describe return esac __git_complete_refs } __git_diff_algorithms=\"myers minimal patience histogram\" __git_diff_submodule_formats=\"diff log short\" __git_diff_common_options=\"--stat --numstat --shortstat --summary --patch-with-stat --name-only --name-status --color --no-color --color-words --no-renames --check --full-index --binary --abbrev --diff-filter= --find-copies-harder --ignore-cr-at-eol --text --ignore-space-at-eol --ignore-space-change --ignore-all-space --ignore-blank-lines --exit-code --quiet --ext-diff --no-ext-diff --no-prefix --src-prefix= --dst-prefix= --inter-hunk-context= --patience --histogram --minimal --raw --word-diff --word-diff-regex= --dirstat --dirstat= --dirstat-by-file --dirstat-by-file= --cumulative --diff-algorithm= --submodule --submodule= --ignore-submodules \"","title":"&gt;&gt; _git_describe():"},{"location":"completion/git_completion/#function-calls_38","text":"\u2514\u2500 _git_describe \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_diff","text":"function _git_diff() { __git_has_doubledash && return case \"$cur\" in --diff-algorithm=*) __gitcomp \"$__git_diff_algorithms\" \"\" \"${cur##--diff-algorithm=}\" return ;; --submodule=*) __gitcomp \"$__git_diff_submodule_formats\" \"\" \"${cur##--submodule=}\" return ;; --*) __gitcomp \"--cached --staged --pickaxe-all --pickaxe-regex --base --ours --theirs --no-index $__git_diff_common_options \" return ;; esac __git_complete_revlist_file } __git_mergetools_common=\"diffuse diffmerge ecmerge emerge kdiff3 meld opendiff tkdiff vimdiff gvimdiff xxdiff araxis p4merge bc codecompare \"","title":"&gt;&gt; _git_diff():"},{"location":"completion/git_completion/#function-calls_39","text":"\u2514\u2500 _git_diff \u251c\u2500 __gitcomp \u2514\u2500 __git_has_doubledash","title":"Function Calls:"},{"location":"completion/git_completion/#_git_difftool","text":"function _git_difftool() { __git_has_doubledash && return case \"$cur\" in --tool=*) __gitcomp \"$__git_mergetools_common kompare\" \"\" \"${cur##--tool=}\" return ;; --*) __gitcomp_builtin difftool \"$__git_diff_common_options --base --cached --ours --theirs --pickaxe-all --pickaxe-regex --relative --staged \" return ;; esac __git_complete_revlist_file } __git_fetch_recurse_submodules=\"yes on-demand no\"","title":"&gt;&gt; _git_difftool():"},{"location":"completion/git_completion/#function-calls_40","text":"\u2514\u2500 _git_difftool \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_has_doubledash","title":"Function Calls:"},{"location":"completion/git_completion/#_git_fetch","text":"function _git_fetch() { case \"$cur\" in --recurse-submodules=*) __gitcomp \"$__git_fetch_recurse_submodules\" \"\" \"${cur##--recurse-submodules=}\" return ;; --*) __gitcomp_builtin fetch return ;; esac __git_complete_remote_or_refspec } __git_format_patch_extra_options=\" --full-index --not --all --no-prefix --src-prefix= --dst-prefix= --notes \"","title":"&gt;&gt; _git_fetch():"},{"location":"completion/git_completion/#function-calls_41","text":"\u2514\u2500 _git_fetch \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_format_patch","text":"function _git_format_patch() { case \"$cur\" in --thread=*) __gitcomp \" deep shallow \" \"\" \"${cur##--thread=}\" return ;; --*) __gitcomp_builtin format-patch \"$__git_format_patch_extra_options\" return ;; esac __git_complete_revlist }","title":"&gt;&gt; _git_format_patch():"},{"location":"completion/git_completion/#function-calls_42","text":"\u2514\u2500 _git_format_patch \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_fsck","text":"function _git_fsck() { case \"$cur\" in --*) __gitcomp_builtin fsck return ;; esac }","title":"&gt;&gt; _git_fsck():"},{"location":"completion/git_completion/#function-calls_43","text":"\u2514\u2500 _git_fsck \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_gitk","text":"function _git_gitk() { _gitk }","title":"&gt;&gt; _git_gitk():"},{"location":"completion/git_completion/#__git_match_ctag","text":"function __git_match_ctag() { awk -v pfx=\"${3-}\" -v sfx=\"${4-}\" \" /^${1//\\//\\\\/}/ { print pfx \\$1 sfx } \" \"$2\" }","title":"&gt;&gt; __git_match_ctag():"},{"location":"completion/git_completion/#__git_complete_symbol","text":"function __git_complete_symbol() { local tags=tags pfx=\"\" cur_=\"${cur-}\" sfx=\" \" while test $# != 0; do case \"$1\" in --tags=*) tags=\"${1##--tags=}\" ;; --pfx=*) pfx=\"${1##--pfx=}\" ;; --cur=*) cur_=\"${1##--cur=}\" ;; --sfx=*) sfx=\"${1##--sfx=}\" ;; *) return 1 ;; esac shift done if test -r \"$tags\"; then __gitcomp_direct \"$(__git_match_ctag \"$cur_\" \"$tags\" \"$pfx\" \"$sfx\")\" fi }","title":"&gt;&gt; __git_complete_symbol():"},{"location":"completion/git_completion/#function-calls_44","text":"\u2514\u2500 __git_complete_symbol \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_match_ctag","title":"Function Calls:"},{"location":"completion/git_completion/#_git_grep","text":"function _git_grep() { __git_has_doubledash && return case \"$cur\" in --*) __gitcomp_builtin grep return ;; esac case \"$cword,$prev\" in 2,*|*,-*) __git_complete_symbol && return ;; esac __git_complete_refs }","title":"&gt;&gt; _git_grep():"},{"location":"completion/git_completion/#function-calls_45","text":"\u2514\u2500 _git_grep \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_has_doubledash \u2514\u2500 __git_complete_symbol \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_match_ctag","title":"Function Calls:"},{"location":"completion/git_completion/#_git_help","text":"function _git_help() { case \"$cur\" in --*) __gitcomp_builtin help return ;; esac if test -n \"$GIT_TESTING_ALL_COMMAND_LIST\" then __gitcomp \"$GIT_TESTING_ALL_COMMAND_LIST $(git --list-cmds=alias,list-guide) gitk\" else __gitcomp \"$(git --list-cmds=main,nohelpers,alias,list-guide) gitk\" fi }","title":"&gt;&gt; _git_help():"},{"location":"completion/git_completion/#function-calls_46","text":"\u2514\u2500 _git_help \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_init","text":"function _git_init() { case \"$cur\" in --shared=*) __gitcomp \" false true umask group all world everybody \" \"\" \"${cur##--shared=}\" return ;; --*) __gitcomp_builtin init return ;; esac }","title":"&gt;&gt; _git_init():"},{"location":"completion/git_completion/#function-calls_47","text":"\u2514\u2500 _git_init \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_ls_files","text":"function _git_ls_files() { case \"$cur\" in --*) __gitcomp_builtin ls-files return ;; esac __git_complete_index_file \"--cached\" }","title":"&gt;&gt; _git_ls_files():"},{"location":"completion/git_completion/#function-calls_48","text":"\u2514\u2500 _git_ls_files \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_complete_index_file \u251c\u2500 __git_dequote \u251c\u2500 __gitcomp_file_direct \u2514\u2500 __git_index_files","title":"Function Calls:"},{"location":"completion/git_completion/#_git_ls_remote","text":"function _git_ls_remote() { case \"$cur\" in --*) __gitcomp_builtin ls-remote return ;; esac __gitcomp_nl \"$(__git_remotes)\" } _git_ls_tree() { case \"$cur\" in --*) __gitcomp_builtin ls-tree return ;; esac __git_complete_file } __git_log_common_options=\" --not --all --branches --tags --remotes --first-parent --merges --no-merges --max-count= --max-age= --since= --after= --min-age= --until= --before= --min-parents= --max-parents= --no-min-parents --no-max-parents \" __git_log_gitk_options=\" --dense --sparse --full-history --simplify-merges --simplify-by-decoration --left-right --notes --no-notes \" __git_log_shortlog_options=\" --author= --committer= --grep= --all-match --invert-grep \" __git_log_pretty_formats=\"oneline short medium full fuller email raw format:\" __git_log_date_formats=\"relative iso8601 rfc2822 short local default raw\"","title":"&gt;&gt; _git_ls_remote():"},{"location":"completion/git_completion/#function-calls_49","text":"\u2514\u2500 _git_ls_remote \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u2514\u2500 __git_remotes \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_log","text":"function _git_log() { __git_has_doubledash && return __git_find_repo_path local merge=\"\" if [ -f \"$__git_repo_path/MERGE_HEAD\" ]; then merge=\"--merge\" fi case \"$prev,$cur\" in -L,:*:*) return # fall back to Bash filename completion ;; -L,:*) __git_complete_symbol --cur=\"${cur#:}\" --sfx=\":\" return ;; -G,*|-S,*) __git_complete_symbol return ;; esac case \"$cur\" in --pretty=*|--format=*) __gitcomp \"$__git_log_pretty_formats $(__git_pretty_aliases) \" \"\" \"${cur#*=}\" return ;; --date=*) __gitcomp \"$__git_log_date_formats\" \"\" \"${cur##--date=}\" return ;; --decorate=*) __gitcomp \"full short no\" \"\" \"${cur##--decorate=}\" return ;; --diff-algorithm=*) __gitcomp \"$__git_diff_algorithms\" \"\" \"${cur##--diff-algorithm=}\" return ;; --submodule=*) __gitcomp \"$__git_diff_submodule_formats\" \"\" \"${cur##--submodule=}\" return ;; --*) __gitcomp \" $__git_log_common_options $__git_log_shortlog_options $__git_log_gitk_options --root --topo-order --date-order --reverse --follow --full-diff --abbrev-commit --abbrev= --relative-date --date= --pretty= --format= --oneline --show-signature --cherry-mark --cherry-pick --graph --decorate --decorate= --walk-reflogs --parents --children $merge $__git_diff_common_options --pickaxe-all --pickaxe-regex \" return ;; -L:*:*) return # fall back to Bash filename completion ;; -L:*) __git_complete_symbol --cur=\"${cur#-L:}\" --sfx=\":\" return ;; -G*) __git_complete_symbol --pfx=\"-G\" --cur=\"${cur#-G}\" return ;; -S*) __git_complete_symbol --pfx=\"-S\" --cur=\"${cur#-S}\" return ;; esac __git_complete_revlist }","title":"&gt;&gt; _git_log():"},{"location":"completion/git_completion/#function-calls_50","text":"\u2514\u2500 _git_log \u251c\u2500 __gitcomp \u251c\u2500 __git_pretty_aliases | \u2514\u2500 __git_get_config_variables \u251c\u2500 __git_has_doubledash \u2514\u2500 __git_complete_symbol \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_match_ctag","title":"Function Calls:"},{"location":"completion/git_completion/#_git_merge","text":"function _git_merge() { __git_complete_strategy && return case \"$cur\" in --*) __gitcomp_builtin merge return esac __git_complete_refs }","title":"&gt;&gt; _git_merge():"},{"location":"completion/git_completion/#function-calls_51","text":"\u2514\u2500 _git_merge \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_complete_strategy \u2514\u2500 __gitcomp","title":"Function Calls:"},{"location":"completion/git_completion/#_git_mergetool","text":"function _git_mergetool() { case \"$cur\" in --tool=*) __gitcomp \"$__git_mergetools_common tortoisemerge\" \"\" \"${cur##--tool=}\" return ;; --*) __gitcomp \"--tool= --prompt --no-prompt --gui --no-gui\" return ;; esac }","title":"&gt;&gt; _git_mergetool():"},{"location":"completion/git_completion/#function-calls_52","text":"\u2514\u2500 _git_mergetool \u2514\u2500 __gitcomp","title":"Function Calls:"},{"location":"completion/git_completion/#_git_merge_base","text":"function _git_merge_base() { case \"$cur\" in --*) __gitcomp_builtin merge-base return ;; esac __git_complete_refs }","title":"&gt;&gt; _git_merge_base():"},{"location":"completion/git_completion/#function-calls_53","text":"\u2514\u2500 _git_merge_base \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_mv","text":"function _git_mv() { case \"$cur\" in --*) __gitcomp_builtin mv return ;; esac if [ $(__git_count_arguments \"mv\") -gt 0 ]; then __git_complete_index_file \"--cached --others --directory\" else __git_complete_index_file \"--cached\" fi }","title":"&gt;&gt; _git_mv():"},{"location":"completion/git_completion/#function-calls_54","text":"\u2514\u2500 _git_mv \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_complete_index_file | \u251c\u2500 __git_dequote | \u251c\u2500 __gitcomp_file_direct | \u2514\u2500 __git_index_files \u2514\u2500 __git_count_arguments","title":"Function Calls:"},{"location":"completion/git_completion/#_git_notes","text":"function _git_notes() { local subcommands='add append copy edit get-ref list merge prune remove show' local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" case \"$subcommand,$cur\" in ,--*) __gitcomp_builtin notes ;; ,*) case \"$prev\" in --ref) __git_complete_refs ;; *) __gitcomp \"$subcommands --ref\" ;; esac ;; *,--reuse-message=*|*,--reedit-message=*) __git_complete_refs --cur=\"${cur#*=}\" ;; *,--*) __gitcomp_builtin notes_$subcommand ;; prune,*|get-ref,*) ;; *) case \"$prev\" in -m|-F) ;; *) __git_complete_refs ;; esac ;; esac }","title":"&gt;&gt; _git_notes():"},{"location":"completion/git_completion/#function-calls_55","text":"\u2514\u2500 _git_notes \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_complete_refs | \u251c\u2500 __gitcomp_direct | \u2514\u2500 __git_refs \u2514\u2500 __git_find_on_cmdline","title":"Function Calls:"},{"location":"completion/git_completion/#_git_pull","text":"function _git_pull() { __git_complete_strategy && return case \"$cur\" in --recurse-submodules=*) __gitcomp \"$__git_fetch_recurse_submodules\" \"\" \"${cur##--recurse-submodules=}\" return ;; --*) __gitcomp_builtin pull return ;; esac __git_complete_remote_or_refspec } __git_push_recurse_submodules=\"check on-demand only\"","title":"&gt;&gt; _git_pull():"},{"location":"completion/git_completion/#function-calls_56","text":"\u2514\u2500 _git_pull \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_complete_strategy \u2514\u2500 __gitcomp","title":"Function Calls:"},{"location":"completion/git_completion/#__git_complete_force_with_lease","text":"function __git_complete_force_with_lease() { local cur_=$1 case \"$cur_\" in --*=) ;; *:*) __git_complete_refs --cur=\"${cur_#*:}\" ;; *) __git_complete_refs --cur=\"$cur_\" ;; esac }","title":"&gt;&gt; __git_complete_force_with_lease():"},{"location":"completion/git_completion/#function-calls_57","text":"\u2514\u2500 __git_complete_force_with_lease \u2514\u2500 __git_complete_refs \u251c\u2500 __gitcomp_direct \u2514\u2500 __git_refs","title":"Function Calls:"},{"location":"completion/git_completion/#_git_push","text":"function _git_push() { case \"$prev\" in --repo) __gitcomp_nl \"$(__git_remotes)\" return ;; --recurse-submodules) __gitcomp \"$__git_push_recurse_submodules\" return ;; esac case \"$cur\" in --repo=*) __gitcomp_nl \"$(__git_remotes)\" \"\" \"${cur##--repo=}\" return ;; --recurse-submodules=*) __gitcomp \"$__git_push_recurse_submodules\" \"\" \"${cur##--recurse-submodules=}\" return ;; --force-with-lease=*) __git_complete_force_with_lease \"${cur##--force-with-lease=}\" return ;; --*) __gitcomp_builtin push return ;; esac __git_complete_remote_or_refspec }","title":"&gt;&gt; _git_push():"},{"location":"completion/git_completion/#function-calls_58","text":"\u2514\u2500 _git_push \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u251c\u2500 __git_remotes | \u251c\u2500 __git | \u2514\u2500 _git \u2514\u2500 __git_complete_force_with_lease \u2514\u2500 __git_complete_refs","title":"Function Calls:"},{"location":"completion/git_completion/#_git_range_diff","text":"function _git_range_diff() { case \"$cur\" in --*) __gitcomp \" --creation-factor= --no-dual-color $__git_diff_common_options \" return ;; esac __git_complete_revlist }","title":"&gt;&gt; _git_range_diff():"},{"location":"completion/git_completion/#function-calls_59","text":"\u2514\u2500 _git_range_diff \u2514\u2500 __gitcomp","title":"Function Calls:"},{"location":"completion/git_completion/#_git_rebase","text":"function _git_rebase() { __git_find_repo_path if [ -f \"$__git_repo_path\"/rebase-merge/interactive ]; then __gitcomp \"--continue --skip --abort --quit --edit-todo --show-current-patch\" return elif [ -d \"$__git_repo_path\"/rebase-apply ] || \\ [ -d \"$__git_repo_path\"/rebase-merge ]; then __gitcomp \"--continue --skip --abort --quit --show-current-patch\" return fi __git_complete_strategy && return case \"$cur\" in --whitespace=*) __gitcomp \"$__git_whitespacelist\" \"\" \"${cur##--whitespace=}\" return ;; --*) __gitcomp \" --onto --merge --strategy --interactive --rebase-merges --preserve-merges --stat --no-stat --committer-date-is-author-date --ignore-date --ignore-whitespace --whitespace= --autosquash --no-autosquash --fork-point --no-fork-point --autostash --no-autostash --verify --no-verify --keep-empty --root --force-rebase --no-ff --rerere-autoupdate --exec \" return esac __git_complete_refs }","title":"&gt;&gt; _git_rebase():"},{"location":"completion/git_completion/#function-calls_60","text":"\u2514\u2500 _git_rebase \u251c\u2500 __gitcomp \u2514\u2500 __git_complete_strategy \u2514\u2500 __gitcomp","title":"Function Calls:"},{"location":"completion/git_completion/#_git_reflog","text":"function _git_reflog() { local subcommands=\"show delete expire\" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if [ -z \"$subcommand\" ]; then __gitcomp \"$subcommands\" else __git_complete_refs fi } __git_send_email_confirm_options=\"always never auto cc compose\" __git_send_email_suppresscc_options=\"author self cc bodycc sob cccmd body all\"","title":"&gt;&gt; _git_reflog():"},{"location":"completion/git_completion/#function-calls_61","text":"\u2514\u2500 _git_reflog \u251c\u2500 __gitcomp \u2514\u2500 __git_find_on_cmdline","title":"Function Calls:"},{"location":"completion/git_completion/#_git_send_email","text":"function _git_send_email () { case \"$prev\" in --to|--cc|--bcc|--from) __gitcomp \"$(__git send-email --dump-aliases)\" return ;; esac case \"$cur\" in --confirm=*) __gitcomp \" $__git_send_email_confirm_options \" \"\" \"${cur##--confirm=}\" return ;; --suppress-cc=*) __gitcomp \" $__git_send_email_suppresscc_options \" \"\" \"${cur##--suppress-cc=}\" return ;; --smtp-encryption=*) __gitcomp \"ssl tls\" \"\" \"${cur##--smtp-encryption=}\" return ;; --thread=*) __gitcomp \" deep shallow \" \"\" \"${cur##--thread=}\" return ;; --to=*|--cc=*|--bcc=*|--from=*) __gitcomp \"$(__git send-email --dump-aliases)\" \"\" \"${cur#--*=}\" return ;; --*) __gitcomp_builtin send-email \"--annotate --bcc --cc --cc-cmd --chain-reply-to --compose --confirm= --dry-run --envelope-sender --from --identity --in-reply-to --no-chain-reply-to --no-signed-off-by-cc --no-suppress-from --no-thread --quiet --reply-to --signed-off-by-cc --smtp-pass --smtp-server --smtp-server-port --smtp-encryption= --smtp-user --subject --suppress-cc= --suppress-from --thread --to --validate --no-validate $__git_format_patch_extra_options\" return ;; esac __git_complete_revlist }","title":"&gt;&gt; _git_send_email():"},{"location":"completion/git_completion/#function-calls_62","text":"\u2514\u2500 _git_send_email \u251c\u2500 __git \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_stage","text":"function _git_stage() { _git_add }","title":"&gt;&gt; _git_stage():"},{"location":"completion/git_completion/#_git_status","text":"function _git_status() { local complete_opt local untracked_state case \"$cur\" in --ignore-submodules=*) __gitcomp \"none untracked dirty all\" \"\" \"${cur##--ignore-submodules=}\" return ;; --untracked-files=*) __gitcomp \"$__git_untracked_file_modes\" \"\" \"${cur##--untracked-files=}\" return ;; --column=*) __gitcomp \" always never auto column row plain dense nodense \" \"\" \"${cur##--column=}\" return ;; --*) __gitcomp_builtin status return ;; esac untracked_state=\"$(__git_get_option_value \"-u\" \"--untracked-files=\" \\ \"$__git_untracked_file_modes\" \"status.showUntrackedFiles\")\" case \"$untracked_state\" in no) complete_opt= ;; all|normal|*) complete_opt=\"--cached --directory --no-empty-directory --others\" if [ -n \"$(__git_find_on_cmdline \"--ignored\")\" ]; then complete_opt=\"$complete_opt --ignored --exclude=*\" fi ;; esac __git_complete_index_file \"$complete_opt\" }","title":"&gt;&gt; _git_status():"},{"location":"completion/git_completion/#function-calls_63","text":"\u2514\u2500 _git_status \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __git_complete_index_file | \u251c\u2500 __git_dequote | \u251c\u2500 __gitcomp_file_direct | \u2514\u2500 __git_index_files \u251c\u2500 __git_find_on_cmdline \u2514\u2500 __git_get_option_value \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_config_get_set_variables","text":"function __git_config_get_set_variables() { local prevword word config_file= c=$cword while [ $c -gt 1 ]; do word=\"${words[c]}\" case \"$word\" in --system|--global|--local|--file=*) config_file=\"$word\" break ;; -f|--file) config_file=\"$word $prevword\" break ;; esac prevword=$word c=$((--c)) done __git config $config_file --name-only --list } __git_config_vars=","title":"&gt;&gt; __git_config_get_set_variables():"},{"location":"completion/git_completion/#function-calls_64","text":"\u2514\u2500 __git_config_get_set_variables \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_compute_config_vars","text":"function __git_compute_config_vars() { test -n \"$__git_config_vars\" || __git_config_vars=\"$(git help --config-for-completion | sort | uniq)\" }","title":"&gt;&gt; __git_compute_config_vars():"},{"location":"completion/git_completion/#_git_config","text":"function _git_config() { local varname if [ \"${BASH_VERSINFO[0]:-0}\" -ge 4 ]; then varname=\"${prev,,}\" else varname=\"$(echo \"$prev\" |tr A-Z a-z)\" fi case \"$varname\" in branch.*.remote|branch.*.pushremote) __gitcomp_nl \"$(__git_remotes)\" return ;; branch.*.merge) __git_complete_refs return ;; branch.*.rebase) __gitcomp \"false true merges preserve interactive\" return ;; remote.pushdefault) __gitcomp_nl \"$(__git_remotes)\" return ;; remote.*.fetch) local remote=\"${prev#remote.}\" remote=\"${remote%.fetch}\" if [ -z \"$cur\" ]; then __gitcomp_nl \"refs/heads/\" \"\" \"\" \"\" return fi __gitcomp_nl \"$(__git_refs_remotes \"$remote\")\" return ;; remote.*.push) local remote=\"${prev#remote.}\" remote=\"${remote%.push}\" __gitcomp_nl \"$(__git for-each-ref \\ --format='%(refname):%(refname)' refs/heads)\" return ;; pull.twohead|pull.octopus) __git_compute_merge_strategies __gitcomp \"$__git_merge_strategies\" return ;; color.branch|color.diff|color.interactive|\\ color.showbranch|color.status|color.ui) __gitcomp \"always never auto\" return ;; color.pager) __gitcomp \"false true\" return ;; color.*.*) __gitcomp \" normal black red green yellow blue magenta cyan white bold dim ul blink reverse \" return ;; diff.submodule) __gitcomp \"log short\" return ;; help.format) __gitcomp \"man info web html\" return ;; log.date) __gitcomp \"$__git_log_date_formats\" return ;; sendemail.aliasfiletype) __gitcomp \"mutt mailrc pine elm gnus\" return ;; sendemail.confirm) __gitcomp \"$__git_send_email_confirm_options\" return ;; sendemail.suppresscc) __gitcomp \"$__git_send_email_suppresscc_options\" return ;; sendemail.transferencoding) __gitcomp \"7bit 8bit quoted-printable base64\" return ;; --get|--get-all|--unset|--unset-all) __gitcomp_nl \"$(__git_config_get_set_variables)\" return ;; *.*) return ;; esac case \"$cur\" in --*) __gitcomp_builtin config return ;; branch.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \"remote pushRemote merge mergeOptions rebase\" \"$pfx\" \"$cur_\" return ;; branch.*) local pfx=\"${cur%.*}.\" cur_=\"${cur#*.}\" __gitcomp_direct \"$(__git_heads \"$pfx\" \"$cur_\" \".\")\" __gitcomp_nl_append $'autoSetupMerge\\nautoSetupRebase\\n' \"$pfx\" \"$cur_\" return ;; guitool.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \" argPrompt cmd confirm needsFile noConsole noRescan prompt revPrompt revUnmerged title \" \"$pfx\" \"$cur_\" return ;; difftool.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \"cmd path\" \"$pfx\" \"$cur_\" return ;; man.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \"cmd path\" \"$pfx\" \"$cur_\" return ;; mergetool.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \"cmd path trustExitCode\" \"$pfx\" \"$cur_\" return ;; pager.*) local pfx=\"${cur%.*}.\" cur_=\"${cur#*.}\" __git_compute_all_commands __gitcomp_nl \"$__git_all_commands\" \"$pfx\" \"$cur_\" return ;; remote.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \" url proxy fetch push mirror skipDefaultUpdate receivepack uploadpack tagOpt pushurl \" \"$pfx\" \"$cur_\" return ;; remote.*) local pfx=\"${cur%.*}.\" cur_=\"${cur#*.}\" __gitcomp_nl \"$(__git_remotes)\" \"$pfx\" \"$cur_\" \".\" __gitcomp_nl_append \"pushDefault\" \"$pfx\" \"$cur_\" return ;; url.*.*) local pfx=\"${cur%.*}.\" cur_=\"${cur##*.}\" __gitcomp \"insteadOf pushInsteadOf\" \"$pfx\" \"$cur_\" return ;; *.*) __git_compute_config_vars __gitcomp \"$__git_config_vars\" ;; *) __git_compute_config_vars __gitcomp \"$(echo \"$__git_config_vars\" | sed 's/\\.[^ ]*/./g')\" esac }","title":"&gt;&gt; _git_config():"},{"location":"completion/git_completion/#function-calls_65","text":"\u2514\u2500 _git_config \u251c\u2500 __git \u251c\u2500 __gitcomp_direct \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __gitcomp_nl_append | \u2514\u2500 __gitcompappend \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u251c\u2500 __git_heads | \u251c\u2500 __git | \u2514\u2500 _git \u251c\u2500 __git_refs_remotes | \u251c\u2500 __git | \u2514\u2500 _git \u251c\u2500 __git_remotes | \u251c\u2500 __git | \u2514\u2500 _git \u251c\u2500 __git_config_get_set_variables | \u251c\u2500 __git | \u2514\u2500 _git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_remote","text":"function _git_remote() { local subcommands=\" add rename remove set-head set-branches get-url set-url show prune update \" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if [ -z \"$subcommand\" ]; then case \"$cur\" in --*) __gitcomp_builtin remote ;; *) __gitcomp \"$subcommands\" ;; esac return fi case \"$subcommand,$cur\" in add,--*) __gitcomp_builtin remote_add ;; add,*) ;; set-head,--*) __gitcomp_builtin remote_set-head ;; set-branches,--*) __gitcomp_builtin remote_set-branches ;; set-head,*|set-branches,*) __git_complete_remote_or_refspec ;; update,--*) __gitcomp_builtin remote_update ;; update,*) __gitcomp \"$(__git_remotes) $(__git_get_config_variables \"remotes\")\" ;; set-url,--*) __gitcomp_builtin remote_set-url ;; get-url,--*) __gitcomp_builtin remote_get-url ;; prune,--*) __gitcomp_builtin remote_prune ;; *) __gitcomp_nl \"$(__git_remotes)\" ;; esac }","title":"&gt;&gt; _git_remote():"},{"location":"completion/git_completion/#function-calls_66","text":"\u2514\u2500 _git_remote \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u251c\u2500 __git_remotes | \u251c\u2500 __git | \u2514\u2500 _git \u251c\u2500 __git_get_config_variables | \u251c\u2500 __git | \u2514\u2500 _git \u2514\u2500 __git_find_on_cmdline","title":"Function Calls:"},{"location":"completion/git_completion/#_git_replace","text":"function _git_replace() { case \"$cur\" in --*) __gitcomp_builtin replace return ;; esac __git_complete_refs }","title":"&gt;&gt; _git_replace():"},{"location":"completion/git_completion/#function-calls_67","text":"\u2514\u2500 _git_replace \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_rerere","text":"function _git_rerere() { local subcommands=\"clear forget diff remaining status gc\" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if test -z \"$subcommand\" then __gitcomp \"$subcommands\" return fi }","title":"&gt;&gt; _git_rerere():"},{"location":"completion/git_completion/#function-calls_68","text":"\u2514\u2500 _git_rerere \u251c\u2500 __gitcomp \u2514\u2500 __git_find_on_cmdline","title":"Function Calls:"},{"location":"completion/git_completion/#_git_reset","text":"function _git_reset() { __git_has_doubledash && return case \"$cur\" in --*) __gitcomp_builtin reset return ;; esac __git_complete_refs } __git_revert_inprogress_options=\"--continue --quit --abort\"","title":"&gt;&gt; _git_reset():"},{"location":"completion/git_completion/#function-calls_69","text":"\u2514\u2500 _git_reset \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_has_doubledash","title":"Function Calls:"},{"location":"completion/git_completion/#_git_revert","text":"function _git_revert() { __git_find_repo_path if [ -f \"$__git_repo_path\"/REVERT_HEAD ]; then __gitcomp \"$__git_revert_inprogress_options\" return fi case \"$cur\" in --*) __gitcomp_builtin revert \"\" \\ \"$__git_revert_inprogress_options\" return ;; esac __git_complete_refs }","title":"&gt;&gt; _git_revert():"},{"location":"completion/git_completion/#function-calls_70","text":"\u2514\u2500 _git_revert \u251c\u2500 __gitcomp \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_rm","text":"function _git_rm() { case \"$cur\" in --*) __gitcomp_builtin rm return ;; esac __git_complete_index_file \"--cached\" }","title":"&gt;&gt; _git_rm():"},{"location":"completion/git_completion/#function-calls_71","text":"\u2514\u2500 _git_rm \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_complete_index_file \u251c\u2500 __git_dequote \u251c\u2500 __gitcomp_file_direct \u2514\u2500 __git_index_files","title":"Function Calls:"},{"location":"completion/git_completion/#_git_shortlog","text":"function _git_shortlog() { __git_has_doubledash && return case \"$cur\" in --*) __gitcomp \" $__git_log_common_options $__git_log_shortlog_options --numbered --summary --email \" return ;; esac __git_complete_revlist }","title":"&gt;&gt; _git_shortlog():"},{"location":"completion/git_completion/#function-calls_72","text":"\u2514\u2500 _git_shortlog \u251c\u2500 __gitcomp \u2514\u2500 __git_has_doubledash","title":"Function Calls:"},{"location":"completion/git_completion/#_git_show","text":"function _git_show() { __git_has_doubledash && return case \"$cur\" in --pretty=*|--format=*) __gitcomp \"$__git_log_pretty_formats $(__git_pretty_aliases) \" \"\" \"${cur#*=}\" return ;; --diff-algorithm=*) __gitcomp \"$__git_diff_algorithms\" \"\" \"${cur##--diff-algorithm=}\" return ;; --submodule=*) __gitcomp \"$__git_diff_submodule_formats\" \"\" \"${cur##--submodule=}\" return ;; --*) __gitcomp \"--pretty= --format= --abbrev-commit --oneline --show-signature $__git_diff_common_options \" return ;; esac __git_complete_revlist_file }","title":"&gt;&gt; _git_show():"},{"location":"completion/git_completion/#function-calls_73","text":"\u2514\u2500 _git_show \u251c\u2500 __gitcomp \u251c\u2500 __git_pretty_aliases | \u2514\u2500 __git_get_config_variables \u2514\u2500 __git_has_doubledash","title":"Function Calls:"},{"location":"completion/git_completion/#_git_show_branch","text":"function _git_show_branch() { case \"$cur\" in --*) __gitcomp_builtin show-branch return ;; esac __git_complete_revlist }","title":"&gt;&gt; _git_show_branch():"},{"location":"completion/git_completion/#function-calls_74","text":"\u2514\u2500 _git_show_branch \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_stash","text":"function _git_stash() { local save_opts='--all --keep-index --no-keep-index --quiet --patch --include-untracked' local subcommands='push list show apply clear drop pop create branch' local subcommand=\"$(__git_find_on_cmdline \"$subcommands save\")\" if [ -n \"$(__git_find_on_cmdline \"-p\")\" ]; then subcommand=\"push\" fi if [ -z \"$subcommand\" ]; then case \"$cur\" in --*) __gitcomp \"$save_opts\" ;; sa*) if [ -z \"$(__git_find_on_cmdline \"$save_opts\")\" ]; then __gitcomp \"save\" fi ;; *) if [ -z \"$(__git_find_on_cmdline \"$save_opts\")\" ]; then __gitcomp \"$subcommands\" fi ;; esac else case \"$subcommand,$cur\" in push,--*) __gitcomp \"$save_opts --message\" ;; save,--*) __gitcomp \"$save_opts\" ;; apply,--*|pop,--*) __gitcomp \"--index --quiet\" ;; drop,--*) __gitcomp \"--quiet\" ;; list,--*) __gitcomp \"--name-status --oneline --patch-with-stat\" ;; show,--*|branch,--*) ;; branch,*) if [ $cword -eq 3 ]; then __git_complete_refs else __gitcomp_nl \"$(__git stash list \\ | sed -n -e 's/:.*//p')\" fi ;; show,*|apply,*|drop,*|pop,*) __gitcomp_nl \"$(__git stash list \\ | sed -n -e 's/:.*//p')\" ;; *) ;; esac fi }","title":"&gt;&gt; _git_stash():"},{"location":"completion/git_completion/#function-calls_75","text":"\u2514\u2500 _git_stash \u251c\u2500 __git \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_nl | \u2514\u2500 __gitcomp_nl_append \u251c\u2500 __git_find_on_cmdline \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_submodule","text":"function _git_submodule() { __git_has_doubledash && return local subcommands=\"add status init deinit update summary foreach sync\" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if [ -z \"$subcommand\" ]; then case \"$cur\" in --*) __gitcomp \"--quiet\" ;; *) __gitcomp \"$subcommands\" ;; esac return fi case \"$subcommand,$cur\" in add,--*) __gitcomp \"--branch --force --name --reference --depth\" ;; status,--*) __gitcomp \"--cached --recursive\" ;; deinit,--*) __gitcomp \"--force --all\" ;; update,--*) __gitcomp \" --init --remote --no-fetch --recommend-shallow --no-recommend-shallow --force --rebase --merge --reference --depth --recursive --jobs \" ;; summary,--*) __gitcomp \"--cached --files --summary-limit\" ;; foreach,--*|sync,--*) __gitcomp \"--recursive\" ;; *) ;; esac }","title":"&gt;&gt; _git_submodule():"},{"location":"completion/git_completion/#function-calls_76","text":"\u2514\u2500 _git_submodule \u251c\u2500 __gitcomp \u251c\u2500 __git_find_on_cmdline \u2514\u2500 __git_has_doubledash","title":"Function Calls:"},{"location":"completion/git_completion/#_git_svn","text":"function _git_svn() { local subcommands=\" init fetch clone rebase dcommit log find-rev set-tree commit-diff info create-ignore propget proplist show-ignore show-externals branch tag blame migrate mkdirs reset gc \" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if [ -z \"$subcommand\" ]; then __gitcomp \"$subcommands\" else local remote_opts=\"--username= --config-dir= --no-auth-cache\" local fc_opts=\" --follow-parent --authors-file= --repack= --no-metadata --use-svm-props --use-svnsync-props --log-window-size= --no-checkout --quiet --repack-flags --use-log-author --localtime --add-author-from --ignore-paths= --include-paths= $remote_opts \" local init_opts=\" --template= --shared= --trunk= --tags= --branches= --stdlayout --minimize-url --no-metadata --use-svm-props --use-svnsync-props --rewrite-root= --prefix= $remote_opts \" local cmt_opts=\" --edit --rmdir --find-copies-harder --copy-similarity= \" case \"$subcommand,$cur\" in fetch,--*) __gitcomp \"--revision= --fetch-all $fc_opts\" ;; clone,--*) __gitcomp \"--revision= $fc_opts $init_opts\" ;; init,--*) __gitcomp \"$init_opts\" ;; dcommit,--*) __gitcomp \" --merge --strategy= --verbose --dry-run --fetch-all --no-rebase --commit-url --revision --interactive $cmt_opts $fc_opts \" ;; set-tree,--*) __gitcomp \"--stdin $cmt_opts $fc_opts\" ;; create-ignore,--*|propget,--*|proplist,--*|show-ignore,--*|\\ show-externals,--*|mkdirs,--*) __gitcomp \"--revision=\" ;; log,--*) __gitcomp \" --limit= --revision= --verbose --incremental --oneline --show-commit --non-recursive --authors-file= --color \" ;; rebase,--*) __gitcomp \" --merge --verbose --strategy= --local --fetch-all --dry-run $fc_opts \" ;; commit-diff,--*) __gitcomp \"--message= --file= --revision= $cmt_opts\" ;; info,--*) __gitcomp \"--url\" ;; branch,--*) __gitcomp \"--dry-run --message --tag\" ;; tag,--*) __gitcomp \"--dry-run --message\" ;; blame,--*) __gitcomp \"--git-format\" ;; migrate,--*) __gitcomp \" --config-dir= --ignore-paths= --minimize --no-auth-cache --username= \" ;; reset,--*) __gitcomp \"--revision= --parent\" ;; *) ;; esac fi }","title":"&gt;&gt; _git_svn():"},{"location":"completion/git_completion/#function-calls_77","text":"\u2514\u2500 _git_svn \u251c\u2500 __gitcomp \u2514\u2500 __git_find_on_cmdline","title":"Function Calls:"},{"location":"completion/git_completion/#_git_tag","text":"function _git_tag() { local i c=1 f=0 while [ $c -lt $cword ]; do i=\"${words[c]}\" case \"$i\" in -d|--delete|-v|--verify) __gitcomp_direct \"$(__git_tags \"\" \"$cur\" \" \")\" return ;; -f) f=1 ;; esac ((c++)) done case \"$prev\" in -m|-F) ;; -*|tag) if [ $f = 1 ]; then __gitcomp_direct \"$(__git_tags \"\" \"$cur\" \" \")\" fi ;; *) __git_complete_refs ;; esac case \"$cur\" in --*) __gitcomp_builtin tag ;; esac }","title":"&gt;&gt; _git_tag():"},{"location":"completion/git_completion/#function-calls_78","text":"\u2514\u2500 _git_tag \u251c\u2500 __gitcomp_direct \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_tags \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#_git_whatchanged","text":"function _git_whatchanged() { _git_log }","title":"&gt;&gt; _git_whatchanged():"},{"location":"completion/git_completion/#_git_worktree","text":"function _git_worktree() { local subcommands=\"add list lock move prune remove unlock\" local subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\" if [ -z \"$subcommand\" ]; then __gitcomp \"$subcommands\" else case \"$subcommand,$cur\" in add,--*) __gitcomp_builtin worktree_add ;; list,--*) __gitcomp_builtin worktree_list ;; lock,--*) __gitcomp_builtin worktree_lock ;; prune,--*) __gitcomp_builtin worktree_prune ;; remove,--*) __gitcomp \"--force\" ;; *) ;; esac fi }","title":"&gt;&gt; _git_worktree():"},{"location":"completion/git_completion/#function-calls_79","text":"\u2514\u2500 _git_worktree \u251c\u2500 __gitcomp \u251c\u2500 __gitcomp_builtin | \u251c\u2500 __git | \u251c\u2500 __gitcomp | \u2514\u2500 _git \u2514\u2500 __git_find_on_cmdline","title":"Function Calls:"},{"location":"completion/git_completion/#__git_complete_common","text":"function __git_complete_common() { local command=\"$1\" case \"$cur\" in --*) __gitcomp_builtin \"$command\" ;; esac } __git_cmds_with_parseopt_helper=","title":"&gt;&gt; __git_complete_common():"},{"location":"completion/git_completion/#function-calls_80","text":"\u2514\u2500 __git_complete_common \u2514\u2500 __gitcomp_builtin \u251c\u2500 __git \u251c\u2500 __gitcomp \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_support_parseopt_helper","text":"function __git_support_parseopt_helper() { test -n \"$__git_cmds_with_parseopt_helper\" || __git_cmds_with_parseopt_helper=\"$(__git --list-cmds=parseopt)\" case \" $__git_cmds_with_parseopt_helper \" in *\" $1 \"*) return 0 ;; *) return 1 ;; esac }","title":"&gt;&gt; __git_support_parseopt_helper():"},{"location":"completion/git_completion/#function-calls_81","text":"\u2514\u2500 __git_support_parseopt_helper \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_complete_command","text":"function __git_complete_command() { local command=\"$1\" local completion_func=\"_git_${command//-/_}\" if ! declare -f $completion_func >/dev/null 2>/dev/null && declare -f _completion_loader >/dev/null 2>/dev/null then _completion_loader \"git-$command\" fi if declare -f $completion_func >/dev/null 2>/dev/null then $completion_func return 0 elif __git_support_parseopt_helper \"$command\" then __git_complete_common \"$command\" return 0 else return 1 fi }","title":"&gt;&gt; __git_complete_command():"},{"location":"completion/git_completion/#function-calls_82","text":"\u2514\u2500 __git_complete_command \u251c\u2500 __git_complete_common | \u2514\u2500 __gitcomp_builtin \u2514\u2500 __git_support_parseopt_helper \u251c\u2500 __git \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_main","text":"function __git_main() { local i c=1 command __git_dir __git_repo_path local __git_C_args C_args_count=0 while [ $c -lt $cword ]; do i=\"${words[c]}\" case \"$i\" in --git-dir=*) __git_dir=\"${i#--git-dir=}\" ;; --git-dir) ((c++)) ; __git_dir=\"${words[c]}\" ;; --bare) __git_dir=\".\" ;; --help) command=\"help\"; break ;; -c|--work-tree|--namespace) ((c++)) ;; -C) __git_C_args[C_args_count++]=-C ((c++)) __git_C_args[C_args_count++]=\"${words[c]}\" ;; -*) ;; *) command=\"$i\"; break ;; esac ((c++)) done if [ -z \"$command\" ]; then case \"$prev\" in --git-dir|-C|--work-tree) return ;; -c|--namespace) return ;; esac case \"$cur\" in --*) __gitcomp \" --paginate --no-pager --git-dir= --bare --version --exec-path --exec-path= --html-path --man-path --info-path --work-tree= --namespace= --no-replace-objects --help \" ;; *) if test -n \"$GIT_TESTING_PORCELAIN_COMMAND_LIST\" then __gitcomp \"$GIT_TESTING_PORCELAIN_COMMAND_LIST\" else __gitcomp \"$(git --list-cmds=list-mainporcelain,others,nohelpers,alias,list-complete,config)\" fi ;; esac return fi __git_complete_command \"$command\" && return local expansion=$(__git_aliased_command \"$command\") if [ -n \"$expansion\" ]; then words[1]=$expansion __git_complete_command \"$expansion\" fi }","title":"&gt;&gt; __git_main():"},{"location":"completion/git_completion/#function-calls_83","text":"\u2514\u2500 __git_main \u251c\u2500 __gitcomp \u251c\u2500 __git_aliased_command | \u251c\u2500 __git | \u2514\u2500 _git \u2514\u2500 __git_complete_command \u251c\u2500 __git_complete_common \u2514\u2500 __git_support_parseopt_helper","title":"Function Calls:"},{"location":"completion/git_completion/#__gitk_main","text":"function __gitk_main() { __git_has_doubledash && return local __git_repo_path __git_find_repo_path local merge=\"\" if [ -f \"$__git_repo_path/MERGE_HEAD\" ]; then merge=\"--merge\" fi case \"$cur\" in --*) __gitcomp \" $__git_log_common_options $__git_log_gitk_options $merge \" return ;; esac __git_complete_revlist } if [[ -n ${ZSH_VERSION-} ]] && [[ -z ${GIT_SOURCING_ZSH_COMPLETION-} ]]; then echo \"WARNING: this script is deprecated, please see git-completion.zsh\" 1>&2 autoload -U +X compinit && compinit __gitcomp () { emulate -L zsh local cur_=\"${3-$cur}\" case \"$cur_\" in --*=) ;; *) local c IFS=$' \\t\\n' local -a array for c in ${=1}; do c=\"$c${4-}\" case $c in --*=*|*.) ;; *) c=\"$c \" ;; esac array[${#array[@]}+1]=\"$c\" done compset -P '*[=:]' compadd -Q -S '' -p \"${2-}\" -a -- array && _ret=0 ;; esac } __gitcomp_direct() { emulate -L zsh local IFS=$'\\n' compset -P '*[=:]' compadd -Q -- ${=1} && _ret=0 } __gitcomp_nl() { emulate -L zsh local IFS=$'\\n' compset -P '*[=:]' compadd -Q -S \"${4- }\" -p \"${2-}\" -- ${=1} && _ret=0 } __gitcomp_file_direct() { emulate -L zsh local IFS=$'\\n' compset -P '*[=:]' compadd -f -- ${=1} && _ret=0 } __gitcomp_file() { emulate -L zsh local IFS=$'\\n' compset -P '*[=:]' compadd -p \"${2-}\" -f -- ${=1} && _ret=0 } _git() { local _ret=1 cur cword prev cur=${words[CURRENT]} prev=${words[CURRENT-1]} let cword=CURRENT-1 emulate ksh -c __${service}_main let _ret && _default && _ret=0 return _ret } compdef _git git gitk return fi","title":"&gt;&gt; __gitk_main():"},{"location":"completion/git_completion/#function-calls_84","text":"\u2514\u2500 __gitk_main \u251c\u2500 __gitcomp \u251c\u2500 __git_has_doubledash \u2514\u2500 _git","title":"Function Calls:"},{"location":"completion/git_completion/#__git_func_wrap","text":"function __git_func_wrap() { local cur words cword prev _get_comp_words_by_ref -n =: cur words cword prev $1 }","title":"&gt;&gt; __git_func_wrap():"},{"location":"completion/git_completion/#__git_complete","text":"function __git_complete() { local wrapper=\"__git_wrap${2}\" eval \"$wrapper () { __git_func_wrap $2 ; }\" complete -o bashdefault -o default -o nospace -F $wrapper $1 2>/dev/null \\ || complete -o default -o nospace -F $wrapper $1 }","title":"&gt;&gt; __git_complete():"},{"location":"completion/git_completion/#function-calls_85","text":"\u2514\u2500 __git_complete \u2514\u2500 __git_func_wrap","title":"Function Calls:"},{"location":"completion/git_completion/#_git","text":"function _git () { __git_wrap__git_main }","title":"&gt;&gt; _git():"},{"location":"completion/git_completion/#_gitk","text":"function _gitk () { __git_wrap__gitk_main } __git_complete git __git_main __git_complete gitk __gitk_main if [ Cygwin = \"$(uname -o 2>/dev/null)\" ]; then __git_complete git.exe __git_main fi","title":"&gt;&gt; _gitk():"},{"location":"completion/git_completion/#function-calls_86","text":"\u2514\u2500 _gitk \u2514\u2500 __git_complete \u2514\u2500 __git_func_wrap","title":"Function Calls:"},{"location":"completion/terraform_completion/","text":"Terraform completions (in /home/bsgt/sys_bashrc/completions/terraform_completion.sh) Function Index 01 - _terraform >> _terraform(): function _terraform() { local cur prev words cword opts _get_comp_words_by_ref -n : cur prev words cword COMPREPLY=() opts=\"\" if [[ ${cword} -eq 1 ]] ; then opts=\"$(terraform --help | grep -E '^\\s\\s\\s\\s\\S' | awk '{print $1}')\" opts=\"${opts} --help --version\" elif [[ ${cword} -gt 1 ]] ; then if [[ ${cword} -eq 2 && ${prev} == '--help' ]] ; then opts=\"$(terraform --help | grep -E '^\\s\\s\\s\\s\\S' | awk '{print $1}')\" elif [[ ${words[1]} != \"--help\" && ${words[1]} != \"--version\" && ${words[1]} != \"version\" ]] ; then opts=\"$(terraform --help \"${words[1]}\" | grep -E '^\\s+-' | awk '{print $1}' | awk -F '=' '{ if ($0 ~ /=/) {print $1\"=\"} else {print $1} }')\" opts=\"${opts} $(terraform --help \"${words[1]}\" | grep -E '^\\s\\s\\s\\s\\S' | awk '{print $1}')\" opts=\"${opts} --help\" fi fi COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") ) if [[ ${#COMPREPLY[*]} -eq 1 ]] ; then if [[ ${COMPREPLY[0]} == *= ]] ; then compopt -o nospace fi fi return 0 } complete -F _terraform terraform","title":"terraform_completion"},{"location":"completion/terraform_completion/#terraform-completions","text":"(in /home/bsgt/sys_bashrc/completions/terraform_completion.sh)","title":"Terraform completions"},{"location":"completion/terraform_completion/#function-index","text":"01 - _terraform","title":"Function Index"},{"location":"completion/terraform_completion/#_terraform","text":"function _terraform() { local cur prev words cword opts _get_comp_words_by_ref -n : cur prev words cword COMPREPLY=() opts=\"\" if [[ ${cword} -eq 1 ]] ; then opts=\"$(terraform --help | grep -E '^\\s\\s\\s\\s\\S' | awk '{print $1}')\" opts=\"${opts} --help --version\" elif [[ ${cword} -gt 1 ]] ; then if [[ ${cword} -eq 2 && ${prev} == '--help' ]] ; then opts=\"$(terraform --help | grep -E '^\\s\\s\\s\\s\\S' | awk '{print $1}')\" elif [[ ${words[1]} != \"--help\" && ${words[1]} != \"--version\" && ${words[1]} != \"version\" ]] ; then opts=\"$(terraform --help \"${words[1]}\" | grep -E '^\\s+-' | awk '{print $1}' | awk -F '=' '{ if ($0 ~ /=/) {print $1\"=\"} else {print $1} }')\" opts=\"${opts} $(terraform --help \"${words[1]}\" | grep -E '^\\s\\s\\s\\s\\S' | awk '{print $1}')\" opts=\"${opts} --help\" fi fi COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") ) if [[ ${#COMPREPLY[*]} -eq 1 ]] ; then if [[ ${COMPREPLY[0]} == *= ]] ; then compopt -o nospace fi fi return 0 } complete -F _terraform terraform","title":"&gt;&gt; _terraform():"},{"location":"internal/internal_colour_defs/","text":"PS prompt color definitions (in /home/bsgt/sys_bashrc/internal/internal_colour_defs.sh)","title":"internal_colour_defs"},{"location":"internal/internal_colour_defs/#ps-prompt-color-definitions","text":"(in /home/bsgt/sys_bashrc/internal/internal_colour_defs.sh)","title":"PS prompt color definitions"},{"location":"internal/internal_colour_functions/","text":"Internal theme related functions (in /home/bsgt/sys_bashrc/internal/internal_colour_functions.sh) Function Index 01 - _check_integer 02 - _check_theme_range 03 - colsw 04 - colsw_path 05 - col_set_prompt_style 06 - csp1 07 - csp2 08 - csp3 09 - col_cp_root 10 - col_ssh 11 - _virtualenv_info 12 - _virtualenv_min_info 13 - _ssh_info 14 - _aws_info 15 - _pwdtail >> _check_integer(): about : Check if argument is an integer group : internal param : A putative integer example : _check_integer 42 function _check_integer() { local MYINT=\"$1\" local REX=^[0-9]*$ if [[ \"$MYINT\" =~ $REX ]]; then echo \"$MYINT\" else echo 0 fi } >> _check_theme_range(): about : Check if argument is an integer between 0 --> N group : internal param : 1. A test integer param : 2. Ma=x number in range example : _check_theme_range 56 1003 function _check_theme_range() { local MYINT=\"$1\" local MAX_LEN=\"$2\" if [ \"$MYINT\" -ge 0 -a \"$MYINT\" -lt \"$MAX_LEN\" ]; then echo \"$MYINT\" else echo 0 fi } >> colsw(): about : Switch PS1 prompt theme color scheme usining a integer, N. There is a upper limit to N group : internal param : 1. A integer corresponding to a theme color scheme. See internal_colour_defs.sh example : colsw 42 function colsw() { local NEWCOL_IDX=${1} local NEWCOL_IDX=$(_check_integer \"${NEWCOL_IDX}\") local NEWCOL_IDX=$(_check_theme_range \"${NEWCOL_IDX}\" \"$BARCOL_ARR_LEN\") cp ${HOME}/sys_bashrc/theme_settings.sh ${HOME}/sys_bashrc/theme_settings_BACKUP.sh local CURRCOL_IDX=$(grep \"SET_THEME_VAR=\" ${HOME}/sys_bashrc/theme_settings.sh | grep -v sed | tr '=' ' ' | awk '{print $2}') local CURRPATH_IDX=$(grep \"SET_PATHCOL_VAR=\" ${HOME}/sys_bashrc/theme_settings.sh | grep -v sed | tr '=' ' ' | awk '{print $2}' | sed 's/\\\"//g') SET_THEME_VAR=\"${SET_THEME_VAR:=0}\" SET_BARCOL=\"${SET_BARCOL:=\\[\\033[38;5;202m\\]}\" SET_TXTCOL=\"${SET_TXTCOL:=\\[\\033[38;5;221m\\]}\" SET_PATHCOL_VAR=\"${SET_PATHCOL_VAR:=1}\" SET_PATHCOL=\"${SET_PATHCOL:=\\[\\033[0;37m\\]}\" cat << BACON > ${HOME}/sys_bashrc/theme_settings.sh SET_THEME_VAR=\"${NEWCOL_IDX}\" SET_BARCOL=\"${BARCOL_ARR[${NEWCOL_IDX}]}\" SET_TXTCOL=\"${TXTCOL_ARR[${NEWCOL_IDX}]}\" SET_PATHCOL_VAR=\"${CURRPATH_IDX}\" SET_PATHCOL=\"${PATH_COLS_ARR[${CURRPATH_IDX}]}\" BACON PRINTCOLVAR=\"ON\" if [ $PRINTCOLVAR = \"ON\" ]; then PATHCOL_NAME=${PATH_COLS_ARR[${CURRPATH_IDX}]} BARCOL_NAME=${BARCOL_ARR[${THEME_VAR}]} TXTCOL_NAME=${TXTCOL_ARR[${THEME_VAR}]} echo \"BARCOL = ${BARCOL_NAME}\" echo \"TXTCOL = ${TXTCOL_NAME}\" echo \"PATHCOL = ${PATHCOL_NAME}\" fi source ${HOME}/sys_bashrc/_bashrc } Function Calls: \u2514\u2500 colsw \u251c\u2500 _check_integer \u2514\u2500 _check_theme_range >> colsw_path(): about : Fine Tune PS1 prompt theme $PATH_COL_VAR val color scheme usinng a integer, N. There is a upper limit to N group : internal param : 1. A integer corresponding to a theme color scheme. See internal_colour_defs.sh example : colscolsw_path 2 function colsw_path() { local NEWPATH_IDX=${1} NEWPATH_IDX=$(_check_integer \"${NEWPATH_IDX}\") NEWPATH_IDX=$(_check_theme_range \"${NEWPATH_IDX}\" \"$PATHCOLS_ARR_LEN\") cp ${HOME}/sys_bashrc/theme_settings.sh ${HOME}/sys_bashrc/theme_settings_BACKUP.sh local NEWPATH_COL=\"${PATH_COLS_ARR[${NEWPATH_IDX}]}\" sed -i \"/^SET_PATHCOL/d\" ${HOME}/sys_bashrc/theme_settings.sh cat << CHEESE >> ${HOME}/sys_bashrc/theme_settings.sh SET_PATHCOL_VAR=\"${NEWPATH_IDX}\" SET_PATHCOL=\"${NEWPATH_COL}\" CHEESE echo \"No of Themes: $BARCOL_ARR_LEN\" source ${HOME}/sys_bashrc/_bashrc } Function Calls: \u2514\u2500 colsw_path \u251c\u2500 _check_integer \u2514\u2500 _check_theme_range >> col_set_prompt_style(): about : Change prompt style between full (3-line), mid (2-line) & default (1-line primitive) group : internal param : 1. A integer from 1-3 example : col_set_prompt_style 1 function col_set_prompt_style() { local CHOICE=\"$1\" if [[ \"$CHOICE\" =~ (full|mid) ]]; then export SET_FULL_PROMPT=$CHOICE source ~/.bashrc else echo \"enter 'full' or 'mid'\" fi } >> csp1(): about : Change prompt style to full 3-line glory group : internal example : csp1 function csp1() { col_set_prompt_style full } Function Calls: \u2514\u2500 csp1 \u2514\u2500 col_set_prompt_style >> csp2(): about : Change prompt style to experimental 2-line worrying group : internal example : csp2 function csp2() { col_set_prompt_style mid } Function Calls: \u2514\u2500 csp2 \u2514\u2500 col_set_prompt_style >> csp3(): about : Change prompt style to a basic 1-line primitive level (default) group : internal example : csp3 function csp3() { unset SET_FULL_PROMPT export SET_FULL_PROMPT= source ~/.bashrc } >> col_cp_root(): about : Copies .bashrc to root home on current machine. Only affects things if full color prompt is set group : internal example : col_cp_root function col_cp_root() { sudo mv /root/.bashrc /root/.your_old_bashrc sudo cp -rf ${HOME}/sys_bashrc /root/ sudo ln -s /root/sys_bashrc/_bashrc /root/.bashrc sudo su root source /root/.bashrc } >> col_ssh(): about : Copy sys_bashrc PS1 prompt to remote host via rsync group : internal param : ${USERNAME}@${HOSTNAME} example : col_ssh ubuntu@mywebserver.com function col_ssh() { rsync -av ${HOME}/sys_bashrc ${1}:~/ ssh -A \"${1}\" 'mv ~/.bashrc ~/.your_old_bashrc; ln -s ${HOME}/sys_bashrc/_bashrc ~/.bashrc' } >> _virtualenv_info(): about : Get Virtual Env and display in PS prompt (full version) group : internal example : _virtualenv_min_info function _virtualenv_info() { local venv=$(_virtualenv_min_info) [[ -n \"$venv\" ]] && echo \"${BARCOL}\u2500${TXTCOL}[${HIRed}$venv${TXTCOL}]\" } Function Calls: \u2514\u2500 _virtualenv_info \u2514\u2500 _virtualenv_min_info >> _virtualenv_min_info(): about : Get Virtual Env and display in PS prompt (minimal version) group : internal example : _virtualenv_min_info function _virtualenv_min_info() { if [[ -n \"$VIRTUAL_ENV\" ]]; then local venv=\"${VIRTUAL_ENV##*/}\" else local venv=\"\" fi [[ -n \"$venv\" ]] && echo \"$venv\" } >> _ssh_info(): about : Display ssh in PS prompt if current seesion is via ssh group : internal example : _ssh_info function _ssh_info() { ssh_state=\"\" [[ -n \"$ssh_state\" ]] && echo \"${BARCOL}\u2500${TXTCOL}[${HIRed}${ssh_state}${TXTCOL}]\" } >> _aws_info(): about : Display the current AWS profile loaded in PS prompt group : internal example : _aws_info function _aws_info() { aws_profile=\"$(printenv AWS_PROFILE)\" if [[ -n \"${aws_profile}\" ]]; then set_aws_profile=${aws_profile} else set_aws_profile=\"\" fi [[ -n \"$set_aws_profile\" ]] && echo \"${BARCOL}\u2500${TXTCOL}[${HIRed}${set_aws_profile}${TXTCOL}]\" } >> _pwdtail(): about : Display last two directories from pwd in PS prompt group : internal example : _pwdtail function _pwdtail() { pwd | awk -F/ '{nlast = NF -1;print $nlast\"/\"$NF}' #TODO: Use for something? }","title":"internal_colour_functions"},{"location":"internal/internal_colour_functions/#internal-theme-related-functions","text":"(in /home/bsgt/sys_bashrc/internal/internal_colour_functions.sh)","title":"Internal theme related functions"},{"location":"internal/internal_colour_functions/#function-index","text":"01 - _check_integer 02 - _check_theme_range 03 - colsw 04 - colsw_path 05 - col_set_prompt_style 06 - csp1 07 - csp2 08 - csp3 09 - col_cp_root 10 - col_ssh 11 - _virtualenv_info 12 - _virtualenv_min_info 13 - _ssh_info 14 - _aws_info 15 - _pwdtail","title":"Function Index"},{"location":"internal/internal_colour_functions/#_check_integer","text":"about : Check if argument is an integer group : internal param : A putative integer example : _check_integer 42 function _check_integer() { local MYINT=\"$1\" local REX=^[0-9]*$ if [[ \"$MYINT\" =~ $REX ]]; then echo \"$MYINT\" else echo 0 fi }","title":"&gt;&gt; _check_integer():"},{"location":"internal/internal_colour_functions/#_check_theme_range","text":"about : Check if argument is an integer between 0 --> N group : internal param : 1. A test integer param : 2. Ma=x number in range example : _check_theme_range 56 1003 function _check_theme_range() { local MYINT=\"$1\" local MAX_LEN=\"$2\" if [ \"$MYINT\" -ge 0 -a \"$MYINT\" -lt \"$MAX_LEN\" ]; then echo \"$MYINT\" else echo 0 fi }","title":"&gt;&gt; _check_theme_range():"},{"location":"internal/internal_colour_functions/#colsw","text":"about : Switch PS1 prompt theme color scheme usining a integer, N. There is a upper limit to N group : internal param : 1. A integer corresponding to a theme color scheme. See internal_colour_defs.sh example : colsw 42 function colsw() { local NEWCOL_IDX=${1} local NEWCOL_IDX=$(_check_integer \"${NEWCOL_IDX}\") local NEWCOL_IDX=$(_check_theme_range \"${NEWCOL_IDX}\" \"$BARCOL_ARR_LEN\") cp ${HOME}/sys_bashrc/theme_settings.sh ${HOME}/sys_bashrc/theme_settings_BACKUP.sh local CURRCOL_IDX=$(grep \"SET_THEME_VAR=\" ${HOME}/sys_bashrc/theme_settings.sh | grep -v sed | tr '=' ' ' | awk '{print $2}') local CURRPATH_IDX=$(grep \"SET_PATHCOL_VAR=\" ${HOME}/sys_bashrc/theme_settings.sh | grep -v sed | tr '=' ' ' | awk '{print $2}' | sed 's/\\\"//g') SET_THEME_VAR=\"${SET_THEME_VAR:=0}\" SET_BARCOL=\"${SET_BARCOL:=\\[\\033[38;5;202m\\]}\" SET_TXTCOL=\"${SET_TXTCOL:=\\[\\033[38;5;221m\\]}\" SET_PATHCOL_VAR=\"${SET_PATHCOL_VAR:=1}\" SET_PATHCOL=\"${SET_PATHCOL:=\\[\\033[0;37m\\]}\" cat << BACON > ${HOME}/sys_bashrc/theme_settings.sh SET_THEME_VAR=\"${NEWCOL_IDX}\" SET_BARCOL=\"${BARCOL_ARR[${NEWCOL_IDX}]}\" SET_TXTCOL=\"${TXTCOL_ARR[${NEWCOL_IDX}]}\" SET_PATHCOL_VAR=\"${CURRPATH_IDX}\" SET_PATHCOL=\"${PATH_COLS_ARR[${CURRPATH_IDX}]}\" BACON PRINTCOLVAR=\"ON\" if [ $PRINTCOLVAR = \"ON\" ]; then PATHCOL_NAME=${PATH_COLS_ARR[${CURRPATH_IDX}]} BARCOL_NAME=${BARCOL_ARR[${THEME_VAR}]} TXTCOL_NAME=${TXTCOL_ARR[${THEME_VAR}]} echo \"BARCOL = ${BARCOL_NAME}\" echo \"TXTCOL = ${TXTCOL_NAME}\" echo \"PATHCOL = ${PATHCOL_NAME}\" fi source ${HOME}/sys_bashrc/_bashrc }","title":"&gt;&gt; colsw():"},{"location":"internal/internal_colour_functions/#function-calls","text":"\u2514\u2500 colsw \u251c\u2500 _check_integer \u2514\u2500 _check_theme_range","title":"Function Calls:"},{"location":"internal/internal_colour_functions/#colsw_path","text":"about : Fine Tune PS1 prompt theme $PATH_COL_VAR val color scheme usinng a integer, N. There is a upper limit to N group : internal param : 1. A integer corresponding to a theme color scheme. See internal_colour_defs.sh example : colscolsw_path 2 function colsw_path() { local NEWPATH_IDX=${1} NEWPATH_IDX=$(_check_integer \"${NEWPATH_IDX}\") NEWPATH_IDX=$(_check_theme_range \"${NEWPATH_IDX}\" \"$PATHCOLS_ARR_LEN\") cp ${HOME}/sys_bashrc/theme_settings.sh ${HOME}/sys_bashrc/theme_settings_BACKUP.sh local NEWPATH_COL=\"${PATH_COLS_ARR[${NEWPATH_IDX}]}\" sed -i \"/^SET_PATHCOL/d\" ${HOME}/sys_bashrc/theme_settings.sh cat << CHEESE >> ${HOME}/sys_bashrc/theme_settings.sh SET_PATHCOL_VAR=\"${NEWPATH_IDX}\" SET_PATHCOL=\"${NEWPATH_COL}\" CHEESE echo \"No of Themes: $BARCOL_ARR_LEN\" source ${HOME}/sys_bashrc/_bashrc }","title":"&gt;&gt; colsw_path():"},{"location":"internal/internal_colour_functions/#function-calls_1","text":"\u2514\u2500 colsw_path \u251c\u2500 _check_integer \u2514\u2500 _check_theme_range","title":"Function Calls:"},{"location":"internal/internal_colour_functions/#col_set_prompt_style","text":"about : Change prompt style between full (3-line), mid (2-line) & default (1-line primitive) group : internal param : 1. A integer from 1-3 example : col_set_prompt_style 1 function col_set_prompt_style() { local CHOICE=\"$1\" if [[ \"$CHOICE\" =~ (full|mid) ]]; then export SET_FULL_PROMPT=$CHOICE source ~/.bashrc else echo \"enter 'full' or 'mid'\" fi }","title":"&gt;&gt; col_set_prompt_style():"},{"location":"internal/internal_colour_functions/#csp1","text":"about : Change prompt style to full 3-line glory group : internal example : csp1 function csp1() { col_set_prompt_style full }","title":"&gt;&gt; csp1():"},{"location":"internal/internal_colour_functions/#function-calls_2","text":"\u2514\u2500 csp1 \u2514\u2500 col_set_prompt_style","title":"Function Calls:"},{"location":"internal/internal_colour_functions/#csp2","text":"about : Change prompt style to experimental 2-line worrying group : internal example : csp2 function csp2() { col_set_prompt_style mid }","title":"&gt;&gt; csp2():"},{"location":"internal/internal_colour_functions/#function-calls_3","text":"\u2514\u2500 csp2 \u2514\u2500 col_set_prompt_style","title":"Function Calls:"},{"location":"internal/internal_colour_functions/#csp3","text":"about : Change prompt style to a basic 1-line primitive level (default) group : internal example : csp3 function csp3() { unset SET_FULL_PROMPT export SET_FULL_PROMPT= source ~/.bashrc }","title":"&gt;&gt; csp3():"},{"location":"internal/internal_colour_functions/#col_cp_root","text":"about : Copies .bashrc to root home on current machine. Only affects things if full color prompt is set group : internal example : col_cp_root function col_cp_root() { sudo mv /root/.bashrc /root/.your_old_bashrc sudo cp -rf ${HOME}/sys_bashrc /root/ sudo ln -s /root/sys_bashrc/_bashrc /root/.bashrc sudo su root source /root/.bashrc }","title":"&gt;&gt; col_cp_root():"},{"location":"internal/internal_colour_functions/#col_ssh","text":"about : Copy sys_bashrc PS1 prompt to remote host via rsync group : internal param : ${USERNAME}@${HOSTNAME} example : col_ssh ubuntu@mywebserver.com function col_ssh() { rsync -av ${HOME}/sys_bashrc ${1}:~/ ssh -A \"${1}\" 'mv ~/.bashrc ~/.your_old_bashrc; ln -s ${HOME}/sys_bashrc/_bashrc ~/.bashrc' }","title":"&gt;&gt; col_ssh():"},{"location":"internal/internal_colour_functions/#_virtualenv_info","text":"about : Get Virtual Env and display in PS prompt (full version) group : internal example : _virtualenv_min_info function _virtualenv_info() { local venv=$(_virtualenv_min_info) [[ -n \"$venv\" ]] && echo \"${BARCOL}\u2500${TXTCOL}[${HIRed}$venv${TXTCOL}]\" }","title":"&gt;&gt; _virtualenv_info():"},{"location":"internal/internal_colour_functions/#function-calls_4","text":"\u2514\u2500 _virtualenv_info \u2514\u2500 _virtualenv_min_info","title":"Function Calls:"},{"location":"internal/internal_colour_functions/#_virtualenv_min_info","text":"about : Get Virtual Env and display in PS prompt (minimal version) group : internal example : _virtualenv_min_info function _virtualenv_min_info() { if [[ -n \"$VIRTUAL_ENV\" ]]; then local venv=\"${VIRTUAL_ENV##*/}\" else local venv=\"\" fi [[ -n \"$venv\" ]] && echo \"$venv\" }","title":"&gt;&gt; _virtualenv_min_info():"},{"location":"internal/internal_colour_functions/#_ssh_info","text":"about : Display ssh in PS prompt if current seesion is via ssh group : internal example : _ssh_info function _ssh_info() { ssh_state=\"\" [[ -n \"$ssh_state\" ]] && echo \"${BARCOL}\u2500${TXTCOL}[${HIRed}${ssh_state}${TXTCOL}]\" }","title":"&gt;&gt; _ssh_info():"},{"location":"internal/internal_colour_functions/#_aws_info","text":"about : Display the current AWS profile loaded in PS prompt group : internal example : _aws_info function _aws_info() { aws_profile=\"$(printenv AWS_PROFILE)\" if [[ -n \"${aws_profile}\" ]]; then set_aws_profile=${aws_profile} else set_aws_profile=\"\" fi [[ -n \"$set_aws_profile\" ]] && echo \"${BARCOL}\u2500${TXTCOL}[${HIRed}${set_aws_profile}${TXTCOL}]\" }","title":"&gt;&gt; _aws_info():"},{"location":"internal/internal_colour_functions/#_pwdtail","text":"about : Display last two directories from pwd in PS prompt group : internal example : _pwdtail function _pwdtail() { pwd | awk -F/ '{nlast = NF -1;print $nlast\"/\"$NF}' #TODO: Use for something? }","title":"&gt;&gt; _pwdtail():"},{"location":"internal/internal_git_functions/","text":"Internal PS prompt related git functions (in /home/bsgt/sys_bashrc/internal/internal_git_functions.sh) Function Index 01 - _parse_git 02 - _parse_git_minimal 03 - _find_git_branch 04 - _get_git_commid 05 - _find_git_dirty 06 - _git_com_diff 07 - _format_git_stats >> _parse_git(): about : Formats prompt: Calls functions to find various git attribiutes. See call graph. group : internal example : _parse_git() function _parse_git() { git_str=$(_find_git_branch) if [[ ! -z \"$git_str\" ]]; then git_str=\"${BARCOL}\u2500\u2500${TXTCOL}[$(_git_com_diff)${git_str}$(_find_git_dirty)\" git_str=\"${git_str}$(_format_git_stats)\" git_str=\"${git_str}${TXTCOL}]\" echo $git_str else echo \"\" fi } Function Calls: \u2514\u2500 _parse_git \u251c\u2500 _find_git_branch \u251c\u2500 _find_git_dirty \u251c\u2500 _git_com_diff \u2514\u2500 _format_git_stats >> _parse_git_minimal(): about : Formats prompt: Alternative option to _parse_git(). group : internal example : _parse_git_minimal() function _parse_git_minimal() { git_str=$(_find_git_branch) if [[ ! -z \"$git_str\" ]]; then git_str=\"${BARCOL}\u2500${TXTCOL}(${git_str}$(_find_git_dirty)\" git_str=\"${git_str}${TXTCOL})\" echo $git_str else echo \"\" fi } Function Calls: \u2514\u2500 _parse_git_minimal \u251c\u2500 _find_git_branch \u2514\u2500 _find_git_dirty >> _find_git_branch(): about : Print git branch if in a repo group : internal example : _find_git_branch() function _find_git_branch() { local branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null) if [[ ! -z \"$branch\" ]]; then if [[ \"$branch\" == \"HEAD\" ]]; then branch_fmt=\"${RED}!detached\" else branch_fmt=\"${TXTCOL}${branch}\" fi git_branch=\"${branch_fmt}\" else git_branch=\"\" fi echo $git_branch } >> _get_git_commid(): about : Print current and previous commit id group : internal example : _get_git_commid() function _get_git_commid() { curr_commitid=$(git rev-parse --short HEAD 2> /dev/null) prev_commitid=$(git rev-list --max-count=2 --abbrev-commit HEAD | tail -1) echo \"${BARCOL}\u2500\u2500${TXTCOL}[c~${curr_commitid}]${BARCOL}\u2500\u2500${TXTCOL}[p~${prev_commitid}]\" } >> _find_git_dirty(): about : Mark with a dirty yellow star* if there are uncommitted/unstaged entities in git group : internal example : _find_git_dirty() function _find_git_dirty() { gdirtstr=$(git status 2> /dev/null | tail -n1 | sed 's/,//' | awk '{print $1, $2, $3}') if [[ ${gdirtstr} == \"nothing to commit\" ]] then dirty_state=\"\" elif [[ ${gdirtstr} == \"\" ]] then dirty_state=\"\" else dirty_state='\\[\\033[01;38;5;221m\\]*' fi echo $dirty_state } >> _git_com_diff(): about : Calculate how far git branch is relative to origin. (Probably imperfect) group : internal example : _git_com_diff() function _git_com_diff() { gbranchrel=$(git status 2> /dev/null | grep \"Your branch is\") gup=$(echo $gbranchrel 2> /dev/null | grep ahead) gdown=$(echo $gbranchrel 2> /dev/null | grep behind) grelN=$(echo $gbranchrel | sed -nr 's/.*by ([0-9]+) commit?[a-z]./\\1/p') gupdown=\"\" if [[ $gup != \"\" ]]; then gupdown=\"${grelN}\u2191\" fi if [[ $gdown != \"\" ]]; then gupdown=\"${grelN}\u2193\" fi echo $gupdown } >> _format_git_stats(): about : Calcualte git stats & print out numbers to PS prompt indicating files taht are (u)ntracked, (a)dded, (m)odified, (am) & (d)deleted group : internal example : _format_git_stats() function _format_git_stats() { gporcelain=$(git status --porcelain 2> /dev/null) untrN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '??' | wc -l) # untracked addN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^A' | wc -l) # added modN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^M' | wc -l) # modified commN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^AM' | wc -l) # added & modified? delN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^D' | wc -l) # deleted gitlegend=\"\" gitstats_str=\"\" if [[ $untrN != \"0\" ]]; then gitlegend=\"${gitlegend}${TEAL}u\" gitstats_str=\"${gitstats_str}${TEAL}${untrN}\" fi if [[ $addN != \"0\" ]]; then gitlegend=\"${gitlegend}${LBLUE}a\" gitstats_str=\"${gitstats_str}${LBLUE}${addN}\" fi if [[ $modN != \"0\" ]]; then gitlegend=\"${gitlegend}${MAGENTA}m\" gitstats_str=\"${gitstats_str}${MAGENTA}${modN}\" fi if [[ $commN != \"0\" ]]; then gitlegend=\"${gitlegend}${HIGreen}c\" gitstats_str=\"${gitstats_str}${HIGreen}${commN}\" fi if [[ $delN != \"0\" ]]; then gitlegend=\"${gitlegend}${RED}d\" gitstats_str=\"${gitstats_str}${RED}${delN}\" fi gitlegend=\"${gitlegend}${SLATE}: \" if [[ $gitstats_str == \"\" ]]; then joined_gitstats=\"\" else joined_gitstats=\" ${gitlegend}${gitstats_str}\" fi echo \"${gupdown}${TXTCOL}${gbranchstr}${dirty_state}${joined_gitstats}\" }","title":"internal_git_functions"},{"location":"internal/internal_git_functions/#internal-ps-prompt-related-git-functions","text":"(in /home/bsgt/sys_bashrc/internal/internal_git_functions.sh)","title":"Internal PS prompt related git functions"},{"location":"internal/internal_git_functions/#function-index","text":"01 - _parse_git 02 - _parse_git_minimal 03 - _find_git_branch 04 - _get_git_commid 05 - _find_git_dirty 06 - _git_com_diff 07 - _format_git_stats","title":"Function Index"},{"location":"internal/internal_git_functions/#_parse_git","text":"about : Formats prompt: Calls functions to find various git attribiutes. See call graph. group : internal example : _parse_git() function _parse_git() { git_str=$(_find_git_branch) if [[ ! -z \"$git_str\" ]]; then git_str=\"${BARCOL}\u2500\u2500${TXTCOL}[$(_git_com_diff)${git_str}$(_find_git_dirty)\" git_str=\"${git_str}$(_format_git_stats)\" git_str=\"${git_str}${TXTCOL}]\" echo $git_str else echo \"\" fi }","title":"&gt;&gt; _parse_git():"},{"location":"internal/internal_git_functions/#function-calls","text":"\u2514\u2500 _parse_git \u251c\u2500 _find_git_branch \u251c\u2500 _find_git_dirty \u251c\u2500 _git_com_diff \u2514\u2500 _format_git_stats","title":"Function Calls:"},{"location":"internal/internal_git_functions/#_parse_git_minimal","text":"about : Formats prompt: Alternative option to _parse_git(). group : internal example : _parse_git_minimal() function _parse_git_minimal() { git_str=$(_find_git_branch) if [[ ! -z \"$git_str\" ]]; then git_str=\"${BARCOL}\u2500${TXTCOL}(${git_str}$(_find_git_dirty)\" git_str=\"${git_str}${TXTCOL})\" echo $git_str else echo \"\" fi }","title":"&gt;&gt; _parse_git_minimal():"},{"location":"internal/internal_git_functions/#function-calls_1","text":"\u2514\u2500 _parse_git_minimal \u251c\u2500 _find_git_branch \u2514\u2500 _find_git_dirty","title":"Function Calls:"},{"location":"internal/internal_git_functions/#_find_git_branch","text":"about : Print git branch if in a repo group : internal example : _find_git_branch() function _find_git_branch() { local branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null) if [[ ! -z \"$branch\" ]]; then if [[ \"$branch\" == \"HEAD\" ]]; then branch_fmt=\"${RED}!detached\" else branch_fmt=\"${TXTCOL}${branch}\" fi git_branch=\"${branch_fmt}\" else git_branch=\"\" fi echo $git_branch }","title":"&gt;&gt; _find_git_branch():"},{"location":"internal/internal_git_functions/#_get_git_commid","text":"about : Print current and previous commit id group : internal example : _get_git_commid() function _get_git_commid() { curr_commitid=$(git rev-parse --short HEAD 2> /dev/null) prev_commitid=$(git rev-list --max-count=2 --abbrev-commit HEAD | tail -1) echo \"${BARCOL}\u2500\u2500${TXTCOL}[c~${curr_commitid}]${BARCOL}\u2500\u2500${TXTCOL}[p~${prev_commitid}]\" }","title":"&gt;&gt; _get_git_commid():"},{"location":"internal/internal_git_functions/#_find_git_dirty","text":"about : Mark with a dirty yellow star* if there are uncommitted/unstaged entities in git group : internal example : _find_git_dirty() function _find_git_dirty() { gdirtstr=$(git status 2> /dev/null | tail -n1 | sed 's/,//' | awk '{print $1, $2, $3}') if [[ ${gdirtstr} == \"nothing to commit\" ]] then dirty_state=\"\" elif [[ ${gdirtstr} == \"\" ]] then dirty_state=\"\" else dirty_state='\\[\\033[01;38;5;221m\\]*' fi echo $dirty_state }","title":"&gt;&gt; _find_git_dirty():"},{"location":"internal/internal_git_functions/#_git_com_diff","text":"about : Calculate how far git branch is relative to origin. (Probably imperfect) group : internal example : _git_com_diff() function _git_com_diff() { gbranchrel=$(git status 2> /dev/null | grep \"Your branch is\") gup=$(echo $gbranchrel 2> /dev/null | grep ahead) gdown=$(echo $gbranchrel 2> /dev/null | grep behind) grelN=$(echo $gbranchrel | sed -nr 's/.*by ([0-9]+) commit?[a-z]./\\1/p') gupdown=\"\" if [[ $gup != \"\" ]]; then gupdown=\"${grelN}\u2191\" fi if [[ $gdown != \"\" ]]; then gupdown=\"${grelN}\u2193\" fi echo $gupdown }","title":"&gt;&gt; _git_com_diff():"},{"location":"internal/internal_git_functions/#_format_git_stats","text":"about : Calcualte git stats & print out numbers to PS prompt indicating files taht are (u)ntracked, (a)dded, (m)odified, (am) & (d)deleted group : internal example : _format_git_stats() function _format_git_stats() { gporcelain=$(git status --porcelain 2> /dev/null) untrN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '??' | wc -l) # untracked addN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^A' | wc -l) # added modN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^M' | wc -l) # modified commN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^AM' | wc -l) # added & modified? delN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^D' | wc -l) # deleted gitlegend=\"\" gitstats_str=\"\" if [[ $untrN != \"0\" ]]; then gitlegend=\"${gitlegend}${TEAL}u\" gitstats_str=\"${gitstats_str}${TEAL}${untrN}\" fi if [[ $addN != \"0\" ]]; then gitlegend=\"${gitlegend}${LBLUE}a\" gitstats_str=\"${gitstats_str}${LBLUE}${addN}\" fi if [[ $modN != \"0\" ]]; then gitlegend=\"${gitlegend}${MAGENTA}m\" gitstats_str=\"${gitstats_str}${MAGENTA}${modN}\" fi if [[ $commN != \"0\" ]]; then gitlegend=\"${gitlegend}${HIGreen}c\" gitstats_str=\"${gitstats_str}${HIGreen}${commN}\" fi if [[ $delN != \"0\" ]]; then gitlegend=\"${gitlegend}${RED}d\" gitstats_str=\"${gitstats_str}${RED}${delN}\" fi gitlegend=\"${gitlegend}${SLATE}: \" if [[ $gitstats_str == \"\" ]]; then joined_gitstats=\"\" else joined_gitstats=\" ${gitlegend}${gitstats_str}\" fi echo \"${gupdown}${TXTCOL}${gbranchstr}${dirty_state}${joined_gitstats}\" }","title":"&gt;&gt; _format_git_stats():"},{"location":"internal/internal_helper_functions/","text":"Internal bash helper functions (in /home/bsgt/sys_bashrc/internal/internal_helper_functions.sh) Function Index 01 - check_new_bashrc_vers >> check_new_bashrc_vers(): about : checks whether sys_bashrc is up-to-date group : internal example : check_new_bashrc_vers function check_new_bashrc_vers() { git --git-dir=${HOME}/sys_bashrc/.git fetch --quiet BASHRC_CURR_BRANCH=$(git --git-dir=${HOME}/sys_bashrc/.git rev-parse --abbrev-ref HEAD) BASHRC_COMMIT_DETAILS=$(git --git-dir=${HOME}/sys_bashrc/.git rev-list --left-right \\ --count origin/master...\"${BASHRC_CURR_BRANCH}\") BC_BEHIND=$(echo \"$BASHRC_COMMIT_DETAILS\" | awk '{print $1}' | sed 's/^[ \\t]*//;s/[ \\t]*$//') BC_AHEAD=$(echo \"$BASHRC_COMMIT_DETAILS\" | awk '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//') echo -e \"\\n${PureCHATREU}Your bashrc is ${PureBRed}${BC_BEHIND} ${PureCHATREU}commits behind origin/master and ${PureBBlue}${BC_AHEAD} ${PureCHATREU}commits ahead\\n${NOCOL}\" }","title":"internal_helper_functions"},{"location":"internal/internal_helper_functions/#internal-bash-helper-functions","text":"(in /home/bsgt/sys_bashrc/internal/internal_helper_functions.sh)","title":"Internal bash helper functions"},{"location":"internal/internal_helper_functions/#function-index","text":"01 - check_new_bashrc_vers","title":"Function Index"},{"location":"internal/internal_helper_functions/#check_new_bashrc_vers","text":"about : checks whether sys_bashrc is up-to-date group : internal example : check_new_bashrc_vers function check_new_bashrc_vers() { git --git-dir=${HOME}/sys_bashrc/.git fetch --quiet BASHRC_CURR_BRANCH=$(git --git-dir=${HOME}/sys_bashrc/.git rev-parse --abbrev-ref HEAD) BASHRC_COMMIT_DETAILS=$(git --git-dir=${HOME}/sys_bashrc/.git rev-list --left-right \\ --count origin/master...\"${BASHRC_CURR_BRANCH}\") BC_BEHIND=$(echo \"$BASHRC_COMMIT_DETAILS\" | awk '{print $1}' | sed 's/^[ \\t]*//;s/[ \\t]*$//') BC_AHEAD=$(echo \"$BASHRC_COMMIT_DETAILS\" | awk '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//') echo -e \"\\n${PureCHATREU}Your bashrc is ${PureBRed}${BC_BEHIND} ${PureCHATREU}commits behind origin/master and ${PureBBlue}${BC_AHEAD} ${PureCHATREU}commits ahead\\n${NOCOL}\" }","title":"&gt;&gt; check_new_bashrc_vers():"},{"location":"modules/aws_module/","text":"AWS helper functions (in /home/bsgt/sys_bashrc/modules/aws_module.sh) Function Index 01 - awskeys 02 - __awskeys_help 03 - __awskeys_region 04 - __awskeys_get 05 - __awskeys_list 06 - __awskeys_show 07 - __awskeys_export 08 - __awskeys_unset 09 - __awskeys_comp >> awskeys(): about : helper function for AWS credentials file group : aws function awskeys { if [[ ! -f \"${AWS_SHARED_CREDENTIALS_FILE}\" ]]; then echo \"AWS credentials file not found\" return 1 fi if [[ $# -eq 1 ]] && [[ \"$1\" = \"list\" ]]; then __awskeys_list \"$2\" elif [[ $# -eq 1 ]] && [[ \"$1\" = \"unset\" ]]; then __awskeys_unset \"$2\" elif [[ $# -eq 2 ]] && [[ \"$1\" = \"show\" ]]; then __awskeys_show \"$2\" elif [[ $# -eq 2 ]] && [[ \"$1\" = \"export\" ]]; then __awskeys_export \"$2\" elif [[ $# -eq 2 ]] && [[ \"$1\" = \"region\" ]]; then __awskeys_region \"$2\" else __awskeys_help fi } Function Calls: \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u251c\u2500 __awskeys_get | \u2514\u2500 __awskeys_list \u2514\u2500 __awskeys_unset >> __awskeys_help(): function __awskeys_help { echo -e \"Usage: awskeys [COMMAND] [profile]\\n\" echo -e \"Helper to AWS credentials file.\\n\" echo -e \"Commands:\\n\" echo \" help Show this help message\" echo \" list List available AWS credentials profiles\" echo \" show Show the AWS keys associated to a credentials profile\" echo \" export Export an AWS credentials profile keys as environment variables\" echo \" unset Unset the AWS keys variables from the environment\" echo \" region Change aws region which defaults to eu-west-1\" } Function Calls: \u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset >> __awskeys_region(): function __awskeys_region { local new_region=$1 if [[ -n \"${new_region}\" ]]; then echo \"AWS_DEFAULT_REGION='${new_region}'\" export AWS_DEFAULT_REGION=\"${new_region}\" fi } >> __awskeys_get(): function __awskeys_get { local ln=$(grep -n \"\\[ *$1 *\\]\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | cut -d \":\" -f 1) if [[ -n \"${ln}\" ]]; then local profile_line_idxs=$(grep -n \"\\[*\\]\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | tr \":\" \" \" | awk '{print $1}' | tr '\\n' ' ') local last_line=$(wc -l \"${AWS_SHARED_CREDENTIALS_FILE}\" | awk '{print $1}') local all_idxs=\"${profile_line_idxs}${last_line}\" local term_ln=$(echo \"$all_idxs\" | tr ' ' '\\n' | grep -w -A 1 \"$ln\" | tail -1) local match_strings=\"aws_access_key_id|aws_secret_access_key|aws_session_token|aws_default_region|aws_default_output|aws_profile|aws_role_session_name|aws_ca_bundle|AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY|AWS_SESSION_TOKEN|AWS_DEFAULT_REGION|AWS_DEFAULT_OUTPUT|AWS_PROFILE|AWS_ROLE_SESSION_NAME|AWS_CA_BUNDLE\" sed -n \"${ln},${term_ln}p\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | egrep \"${match_strings}\" fi } >> __awskeys_list(): function __awskeys_list { local credentials_list=\"$((egrep '^\\[ *[a-zA-Z0-9_-]+ *\\]$' \"${AWS_SHARED_CREDENTIALS_FILE}\"; grep \"\\[\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | sed \"s|\\[profile |\\[|g\") | sort | uniq)\" if [[ -n $\"{credentials_list}\" ]]; then echo -e \"Available credentials profiles:\\n\" for profile in ${credentials_list}; do echo \" $(echo ${profile} | tr -d \"[]\")\" done echo else echo \"No profiles found in credentials file\" fi } >> __awskeys_show(): function __awskeys_show { local p_keys=\"$(__awskeys_get $1)\" if [[ -n \"${p_keys}\" ]]; then echo \"${p_keys}\" else echo \"Profile $1 not found in credentials file\" fi } Function Calls: \u2514\u2500 __awskeys_show \u2514\u2500 __awskeys_get >> __awskeys_export(): function __awskeys_export { if [[ $(__awskeys_list) == *\"$1\"* ]]; then local p_keys=( $(__awskeys_get $1 | tr -d \" \") ) if [[ -n \"${p_keys}\" ]]; then for p_key in ${p_keys[@]}; do echo \"* $p_key\" local key=\"${p_key%=*}\" export \"$(echo ${key} | tr [:lower:] [:upper:])=${p_key#*=}\" done fi export AWS_PROFILE=\"$1\" else echo \"Profile $1 not found in credentials file\" fi } Function Calls: \u2514\u2500 __awskeys_export \u251c\u2500 __awskeys_get \u2514\u2500 __awskeys_list >> __awskeys_unset(): function __awskeys_unset { unset AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN } >> __awskeys_comp(): function __awskeys_comp { local cur prev opts prevprev COMPREPLY=() cur=\"${COMP_WORDS[COMP_CWORD]}\" prev=\"${COMP_WORDS[COMP_CWORD-1]}\" opts=\"help list show export unset region\" case \"${prev}\" in help|list|unset) return 0 ;; show|export) local profile_list=\"$(__awskeys_list | grep \" \")\" COMPREPLY=( $(compgen -W \"${profile_list}\" -- ${cur}) ) return 0 ;; esac COMPREPLY=( $(compgen -W \"${opts}\" -- ${cur}) ) return 0 } complete -F __awskeys_comp awskeys Function Calls: \u2514\u2500 __awskeys_comp \u2514\u2500 __awskeys_list","title":"aws_module"},{"location":"modules/aws_module/#aws-helper-functions","text":"(in /home/bsgt/sys_bashrc/modules/aws_module.sh)","title":"AWS helper functions"},{"location":"modules/aws_module/#function-index","text":"01 - awskeys 02 - __awskeys_help 03 - __awskeys_region 04 - __awskeys_get 05 - __awskeys_list 06 - __awskeys_show 07 - __awskeys_export 08 - __awskeys_unset 09 - __awskeys_comp","title":"Function Index"},{"location":"modules/aws_module/#awskeys","text":"about : helper function for AWS credentials file group : aws function awskeys { if [[ ! -f \"${AWS_SHARED_CREDENTIALS_FILE}\" ]]; then echo \"AWS credentials file not found\" return 1 fi if [[ $# -eq 1 ]] && [[ \"$1\" = \"list\" ]]; then __awskeys_list \"$2\" elif [[ $# -eq 1 ]] && [[ \"$1\" = \"unset\" ]]; then __awskeys_unset \"$2\" elif [[ $# -eq 2 ]] && [[ \"$1\" = \"show\" ]]; then __awskeys_show \"$2\" elif [[ $# -eq 2 ]] && [[ \"$1\" = \"export\" ]]; then __awskeys_export \"$2\" elif [[ $# -eq 2 ]] && [[ \"$1\" = \"region\" ]]; then __awskeys_region \"$2\" else __awskeys_help fi }","title":"&gt;&gt; awskeys():"},{"location":"modules/aws_module/#function-calls","text":"\u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u251c\u2500 __awskeys_get | \u2514\u2500 __awskeys_list \u2514\u2500 __awskeys_unset","title":"Function Calls:"},{"location":"modules/aws_module/#__awskeys_help","text":"function __awskeys_help { echo -e \"Usage: awskeys [COMMAND] [profile]\\n\" echo -e \"Helper to AWS credentials file.\\n\" echo -e \"Commands:\\n\" echo \" help Show this help message\" echo \" list List available AWS credentials profiles\" echo \" show Show the AWS keys associated to a credentials profile\" echo \" export Export an AWS credentials profile keys as environment variables\" echo \" unset Unset the AWS keys variables from the environment\" echo \" region Change aws region which defaults to eu-west-1\" }","title":"&gt;&gt; __awskeys_help():"},{"location":"modules/aws_module/#function-calls_1","text":"\u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset","title":"Function Calls:"},{"location":"modules/aws_module/#__awskeys_region","text":"function __awskeys_region { local new_region=$1 if [[ -n \"${new_region}\" ]]; then echo \"AWS_DEFAULT_REGION='${new_region}'\" export AWS_DEFAULT_REGION=\"${new_region}\" fi }","title":"&gt;&gt; __awskeys_region():"},{"location":"modules/aws_module/#__awskeys_get","text":"function __awskeys_get { local ln=$(grep -n \"\\[ *$1 *\\]\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | cut -d \":\" -f 1) if [[ -n \"${ln}\" ]]; then local profile_line_idxs=$(grep -n \"\\[*\\]\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | tr \":\" \" \" | awk '{print $1}' | tr '\\n' ' ') local last_line=$(wc -l \"${AWS_SHARED_CREDENTIALS_FILE}\" | awk '{print $1}') local all_idxs=\"${profile_line_idxs}${last_line}\" local term_ln=$(echo \"$all_idxs\" | tr ' ' '\\n' | grep -w -A 1 \"$ln\" | tail -1) local match_strings=\"aws_access_key_id|aws_secret_access_key|aws_session_token|aws_default_region|aws_default_output|aws_profile|aws_role_session_name|aws_ca_bundle|AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY|AWS_SESSION_TOKEN|AWS_DEFAULT_REGION|AWS_DEFAULT_OUTPUT|AWS_PROFILE|AWS_ROLE_SESSION_NAME|AWS_CA_BUNDLE\" sed -n \"${ln},${term_ln}p\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | egrep \"${match_strings}\" fi }","title":"&gt;&gt; __awskeys_get():"},{"location":"modules/aws_module/#__awskeys_list","text":"function __awskeys_list { local credentials_list=\"$((egrep '^\\[ *[a-zA-Z0-9_-]+ *\\]$' \"${AWS_SHARED_CREDENTIALS_FILE}\"; grep \"\\[\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | sed \"s|\\[profile |\\[|g\") | sort | uniq)\" if [[ -n $\"{credentials_list}\" ]]; then echo -e \"Available credentials profiles:\\n\" for profile in ${credentials_list}; do echo \" $(echo ${profile} | tr -d \"[]\")\" done echo else echo \"No profiles found in credentials file\" fi }","title":"&gt;&gt; __awskeys_list():"},{"location":"modules/aws_module/#__awskeys_show","text":"function __awskeys_show { local p_keys=\"$(__awskeys_get $1)\" if [[ -n \"${p_keys}\" ]]; then echo \"${p_keys}\" else echo \"Profile $1 not found in credentials file\" fi }","title":"&gt;&gt; __awskeys_show():"},{"location":"modules/aws_module/#function-calls_2","text":"\u2514\u2500 __awskeys_show \u2514\u2500 __awskeys_get","title":"Function Calls:"},{"location":"modules/aws_module/#__awskeys_export","text":"function __awskeys_export { if [[ $(__awskeys_list) == *\"$1\"* ]]; then local p_keys=( $(__awskeys_get $1 | tr -d \" \") ) if [[ -n \"${p_keys}\" ]]; then for p_key in ${p_keys[@]}; do echo \"* $p_key\" local key=\"${p_key%=*}\" export \"$(echo ${key} | tr [:lower:] [:upper:])=${p_key#*=}\" done fi export AWS_PROFILE=\"$1\" else echo \"Profile $1 not found in credentials file\" fi }","title":"&gt;&gt; __awskeys_export():"},{"location":"modules/aws_module/#function-calls_3","text":"\u2514\u2500 __awskeys_export \u251c\u2500 __awskeys_get \u2514\u2500 __awskeys_list","title":"Function Calls:"},{"location":"modules/aws_module/#__awskeys_unset","text":"function __awskeys_unset { unset AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN }","title":"&gt;&gt; __awskeys_unset():"},{"location":"modules/aws_module/#__awskeys_comp","text":"function __awskeys_comp { local cur prev opts prevprev COMPREPLY=() cur=\"${COMP_WORDS[COMP_CWORD]}\" prev=\"${COMP_WORDS[COMP_CWORD-1]}\" opts=\"help list show export unset region\" case \"${prev}\" in help|list|unset) return 0 ;; show|export) local profile_list=\"$(__awskeys_list | grep \" \")\" COMPREPLY=( $(compgen -W \"${profile_list}\" -- ${cur}) ) return 0 ;; esac COMPREPLY=( $(compgen -W \"${opts}\" -- ${cur}) ) return 0 } complete -F __awskeys_comp awskeys","title":"&gt;&gt; __awskeys_comp():"},{"location":"modules/aws_module/#function-calls_4","text":"\u2514\u2500 __awskeys_comp \u2514\u2500 __awskeys_list","title":"Function Calls:"},{"location":"modules/base_module/","text":"Base module (in /home/bsgt/sys_bashrc/modules/base_module.sh) Function Index 01 - ips 02 - down4me 03 - myip 04 - pickfrom 05 - passgen 06 - mkcd 07 - lsgrep 08 - usage 09 - comex 10 - buf 11 - del 12 - gedit 13 - nomacs 14 - Ngedit 15 - terminator 16 - grepo 17 - grepoall 18 - del_file_by_patt 19 - venv_create 20 - venv_activate >> ips(): about : display all ip addresses for this host group : base function ips() { if command -v ifconfig &>/dev/null then ifconfig | awk '/inet /{ gsub(/addr:/, \"\"); print $2 }' elif command -v ip &>/dev/null then ip addr | grep -oP 'inet \\K[\\d.]+' else echo \"You don't have ifconfig or ip command installed!\" fi } >> down4me(): about : checks whether a website is down for you, or everybody param : 1: website url example : $ down4me http://www.google.com group : base function down4me() { curl -Ls \"http://downforeveryoneorjustme.com/$1\" | sed '/just you/!d;s/<[^>]*>//g' } >> myip(): about : displays your ip address, as seen by the Internet group : base function myip() { list=(\"http://myip.dnsomatic.com/\" \"http://checkip.dyndns.com/\" \"http://checkip.dyndns.org/\") for url in ${list[*]} do res=$(curl -s \"${url}\") if [ $? -eq 0 ];then break; fi done res=$(echo \"$res\" | grep -Eo '[0-9\\.]+') echo -e \"Your public IP is: ${echo_bold_green} $res ${echo_normal}\" } >> pickfrom(): about : picks random line from file param : 1: filename example : $ pickfrom /usr/share/dict/words group : base function pickfrom() { local file=$1 [ -z \"$file\" ] && reference $FUNCNAME && return length=$(cat $file | wc -l) n=$(expr $RANDOM \\* $length \\/ 32768 + 1) head -n $n $file | tail -1 } >> passgen(): about : generates random password from dictionary words param : optional integer length param : if unset, defaults to 4 example : $ passgen example : $ passgen 6 group : base function passgen() { local i pass length=${1:-4} pass=$(echo $(for i in $(eval echo \"{1..$length}\"); do pickfrom /usr/share/dict/words; done)) echo \"With spaces (easier to memorize): $pass\" echo \"Without (use this as the password): $(echo $pass | tr -d ' ')\" } Function Calls: \u2514\u2500 passgen \u2514\u2500 pickfrom >> mkcd(): about : make one or more directories and cd into the last one param : one or more directories to create example : $ mkcd foo example : $ mkcd /tmp/img/photos/large example : $ mkcd foo foo1 foo2 fooN example : $ mkcd /tmp/img/photos/large /tmp/img/photos/self /tmp/img/photos/Beijing group : base function mkcd() { mkdir -p -- \"$@\" && eval cd -- \"\\\"\\$$#\\\"\" } >> lsgrep(): about : search through directory contents with grep group : base function lsgrep() { ls | grep \"$*\" } >> usage(): about : disk usage per directory, in Mac OS X and Linux param : 1: directory name group : base function usage() { if [ $(uname) = \"Darwin\" ]; then if [ -n \"$1\" ]; then du -hd 1 \"$1\" else du -hd 1 fi elif [ $(uname) = \"Linux\" ]; then if [ -n \"$1\" ]; then du -h --max-depth=1 \"$1\" else du -h --max-depth=1 fi fi } >> comex(): about : checks for existence of a command param : 1: command to check example : $ comex ls group : base function comex() { type \"$1\" #&> /dev/null ; } >> buf(): about : back up file with timestamp param : filename group : base function buf() { local filename=$1 local filetime=$(date +%Y%m%d_%H%M%S) cp -a \"${filename}\" \"${filename}_${filetime}\" } >> del(): about : move files to hidden folder in tmp, that gets cleared on each reboot param : file or folder to be deleted example : del ./file.txt group : base function del() { mkdir -p /tmp/.trash && mv \"$@\" /tmp/.trash; } >> gedit(): about : Opens non-blocking program from terminal group : base example : gedit $filename function gedit() { command gedit \"$@\" &>/dev/null & } >> nomacs(): about : Opens non-blocking program from terminal group : base example : nomacs $filename function nomacs() { command nomacs \"$@\" &>/dev/null & } >> Ngedit(): about : Opens non-blocking program from terminal group : base example : Ngedit $filename function Ngedit() { command gedit --new-window \"$@\" &>/dev/null & } Function Calls: \u2514\u2500 Ngedit \u2514\u2500 gedit >> terminator(): about : Opens non-blocking program from terminal group : base example : terminator $filename function terminator() { command terminator --geometry=945x1200+0+0 \"$@\" &>/dev/null & } >> grepo(): about : Find all files \"*\" recursively from current directory and grep within each file for a pattern group : base param : Pattern to grep for example : grepo $PATERN example : grepo import function grepo() { find ./ -not -path \"*/\\.*\" -not -path \"*venv/*\" -not -path \"*node_modules/*\" -name \"*\" -exec grep --color=auto -Isi \"$1\" {} \\; } >> grepoall(): about : Find all files \"*\" recursively from current directory and grep within each file for a pattern group : base param : 1. Pattern to grep for param : 2. File type to find in double quotes example : grepoall $PATERN example : grepoall import example : grepoall $PATERN $FILE_PATTERN example : grepoall import \"*.py\" function grepoall() { TXT_PATTERN=\"$1\" if [[ $# -eq 2 ]]; then FILE_SEARCH=\"$2\" else FILE_SEARCH=\"*\" fi find ./ -not -path \"*/\\.*\" -not -path \"*venv/*\" -not -path \"*node_modules/*\" -iname \"${FILE_SEARCH}\" -exec grep --color=auto -Isin \"$TXT_PATTERN\" {} /dev/null \\; } >> del_file_by_patt(): about : Delete all files matching a pattern group : base param : 1. Delete pattern example : del_file_by_patt $DEL_PATERN example : del_file_by_patt \"*.css\" function del_file_by_patt() { file_ext=\"$1\" find . -name \"$file_ext\" -exec rm -fv {} \\; } >> venv_create(): about : Create & activte a python virtual environment. Works with Python3 group : base param : python version findable on path. Test with $(which) example : venv_create python3.6 function venv_create() { if [[ $# -ge 1 ]]; then desired_py_version=$1 pyth_ver=$(which $desired_py_version) if [[ -z \"${pyth_ver}\" ]]; then echo \"python version $desired_py_version not found\" else $pyth_ver -m venv venv source venv/bin/activate fi else echo \"supply an arg\" fi } >> venv_activate(): about : Activte an existing python virtual environment group : base param : python version findable on path. Test with $(which) example : venv_activate function venv_activate() { source venv/bin/activate }","title":"base_module"},{"location":"modules/base_module/#base-module","text":"(in /home/bsgt/sys_bashrc/modules/base_module.sh)","title":"Base module"},{"location":"modules/base_module/#function-index","text":"01 - ips 02 - down4me 03 - myip 04 - pickfrom 05 - passgen 06 - mkcd 07 - lsgrep 08 - usage 09 - comex 10 - buf 11 - del 12 - gedit 13 - nomacs 14 - Ngedit 15 - terminator 16 - grepo 17 - grepoall 18 - del_file_by_patt 19 - venv_create 20 - venv_activate","title":"Function Index"},{"location":"modules/base_module/#ips","text":"about : display all ip addresses for this host group : base function ips() { if command -v ifconfig &>/dev/null then ifconfig | awk '/inet /{ gsub(/addr:/, \"\"); print $2 }' elif command -v ip &>/dev/null then ip addr | grep -oP 'inet \\K[\\d.]+' else echo \"You don't have ifconfig or ip command installed!\" fi }","title":"&gt;&gt; ips():"},{"location":"modules/base_module/#down4me","text":"about : checks whether a website is down for you, or everybody param : 1: website url example : $ down4me http://www.google.com group : base function down4me() { curl -Ls \"http://downforeveryoneorjustme.com/$1\" | sed '/just you/!d;s/<[^>]*>//g' }","title":"&gt;&gt; down4me():"},{"location":"modules/base_module/#myip","text":"about : displays your ip address, as seen by the Internet group : base function myip() { list=(\"http://myip.dnsomatic.com/\" \"http://checkip.dyndns.com/\" \"http://checkip.dyndns.org/\") for url in ${list[*]} do res=$(curl -s \"${url}\") if [ $? -eq 0 ];then break; fi done res=$(echo \"$res\" | grep -Eo '[0-9\\.]+') echo -e \"Your public IP is: ${echo_bold_green} $res ${echo_normal}\" }","title":"&gt;&gt; myip():"},{"location":"modules/base_module/#pickfrom","text":"about : picks random line from file param : 1: filename example : $ pickfrom /usr/share/dict/words group : base function pickfrom() { local file=$1 [ -z \"$file\" ] && reference $FUNCNAME && return length=$(cat $file | wc -l) n=$(expr $RANDOM \\* $length \\/ 32768 + 1) head -n $n $file | tail -1 }","title":"&gt;&gt; pickfrom():"},{"location":"modules/base_module/#passgen","text":"about : generates random password from dictionary words param : optional integer length param : if unset, defaults to 4 example : $ passgen example : $ passgen 6 group : base function passgen() { local i pass length=${1:-4} pass=$(echo $(for i in $(eval echo \"{1..$length}\"); do pickfrom /usr/share/dict/words; done)) echo \"With spaces (easier to memorize): $pass\" echo \"Without (use this as the password): $(echo $pass | tr -d ' ')\" }","title":"&gt;&gt; passgen():"},{"location":"modules/base_module/#function-calls","text":"\u2514\u2500 passgen \u2514\u2500 pickfrom","title":"Function Calls:"},{"location":"modules/base_module/#mkcd","text":"about : make one or more directories and cd into the last one param : one or more directories to create example : $ mkcd foo example : $ mkcd /tmp/img/photos/large example : $ mkcd foo foo1 foo2 fooN example : $ mkcd /tmp/img/photos/large /tmp/img/photos/self /tmp/img/photos/Beijing group : base function mkcd() { mkdir -p -- \"$@\" && eval cd -- \"\\\"\\$$#\\\"\" }","title":"&gt;&gt; mkcd():"},{"location":"modules/base_module/#lsgrep","text":"about : search through directory contents with grep group : base function lsgrep() { ls | grep \"$*\" }","title":"&gt;&gt; lsgrep():"},{"location":"modules/base_module/#usage","text":"about : disk usage per directory, in Mac OS X and Linux param : 1: directory name group : base function usage() { if [ $(uname) = \"Darwin\" ]; then if [ -n \"$1\" ]; then du -hd 1 \"$1\" else du -hd 1 fi elif [ $(uname) = \"Linux\" ]; then if [ -n \"$1\" ]; then du -h --max-depth=1 \"$1\" else du -h --max-depth=1 fi fi }","title":"&gt;&gt; usage():"},{"location":"modules/base_module/#comex","text":"about : checks for existence of a command param : 1: command to check example : $ comex ls group : base function comex() { type \"$1\" #&> /dev/null ; }","title":"&gt;&gt; comex():"},{"location":"modules/base_module/#buf","text":"about : back up file with timestamp param : filename group : base function buf() { local filename=$1 local filetime=$(date +%Y%m%d_%H%M%S) cp -a \"${filename}\" \"${filename}_${filetime}\" }","title":"&gt;&gt; buf():"},{"location":"modules/base_module/#del","text":"about : move files to hidden folder in tmp, that gets cleared on each reboot param : file or folder to be deleted example : del ./file.txt group : base function del() { mkdir -p /tmp/.trash && mv \"$@\" /tmp/.trash; }","title":"&gt;&gt; del():"},{"location":"modules/base_module/#gedit","text":"about : Opens non-blocking program from terminal group : base example : gedit $filename function gedit() { command gedit \"$@\" &>/dev/null & }","title":"&gt;&gt; gedit():"},{"location":"modules/base_module/#nomacs","text":"about : Opens non-blocking program from terminal group : base example : nomacs $filename function nomacs() { command nomacs \"$@\" &>/dev/null & }","title":"&gt;&gt; nomacs():"},{"location":"modules/base_module/#ngedit","text":"about : Opens non-blocking program from terminal group : base example : Ngedit $filename function Ngedit() { command gedit --new-window \"$@\" &>/dev/null & }","title":"&gt;&gt; Ngedit():"},{"location":"modules/base_module/#function-calls_1","text":"\u2514\u2500 Ngedit \u2514\u2500 gedit","title":"Function Calls:"},{"location":"modules/base_module/#terminator","text":"about : Opens non-blocking program from terminal group : base example : terminator $filename function terminator() { command terminator --geometry=945x1200+0+0 \"$@\" &>/dev/null & }","title":"&gt;&gt; terminator():"},{"location":"modules/base_module/#grepo","text":"about : Find all files \"*\" recursively from current directory and grep within each file for a pattern group : base param : Pattern to grep for example : grepo $PATERN example : grepo import function grepo() { find ./ -not -path \"*/\\.*\" -not -path \"*venv/*\" -not -path \"*node_modules/*\" -name \"*\" -exec grep --color=auto -Isi \"$1\" {} \\; }","title":"&gt;&gt; grepo():"},{"location":"modules/base_module/#grepoall","text":"about : Find all files \"*\" recursively from current directory and grep within each file for a pattern group : base param : 1. Pattern to grep for param : 2. File type to find in double quotes example : grepoall $PATERN example : grepoall import example : grepoall $PATERN $FILE_PATTERN example : grepoall import \"*.py\" function grepoall() { TXT_PATTERN=\"$1\" if [[ $# -eq 2 ]]; then FILE_SEARCH=\"$2\" else FILE_SEARCH=\"*\" fi find ./ -not -path \"*/\\.*\" -not -path \"*venv/*\" -not -path \"*node_modules/*\" -iname \"${FILE_SEARCH}\" -exec grep --color=auto -Isin \"$TXT_PATTERN\" {} /dev/null \\; }","title":"&gt;&gt; grepoall():"},{"location":"modules/base_module/#del_file_by_patt","text":"about : Delete all files matching a pattern group : base param : 1. Delete pattern example : del_file_by_patt $DEL_PATERN example : del_file_by_patt \"*.css\" function del_file_by_patt() { file_ext=\"$1\" find . -name \"$file_ext\" -exec rm -fv {} \\; }","title":"&gt;&gt; del_file_by_patt():"},{"location":"modules/base_module/#venv_create","text":"about : Create & activte a python virtual environment. Works with Python3 group : base param : python version findable on path. Test with $(which) example : venv_create python3.6 function venv_create() { if [[ $# -ge 1 ]]; then desired_py_version=$1 pyth_ver=$(which $desired_py_version) if [[ -z \"${pyth_ver}\" ]]; then echo \"python version $desired_py_version not found\" else $pyth_ver -m venv venv source venv/bin/activate fi else echo \"supply an arg\" fi }","title":"&gt;&gt; venv_create():"},{"location":"modules/base_module/#venv_activate","text":"about : Activte an existing python virtual environment group : base param : python version findable on path. Test with $(which) example : venv_activate function venv_activate() { source venv/bin/activate }","title":"&gt;&gt; venv_activate():"},{"location":"modules/composure/","text":"Composure module by Erichs: light-hearted functions for intuitive shell programming (in /home/bsgt/sys_bashrc/modules/composure.sh) Function Index 01 - _bootstrap_composure 02 - _get_composure_dir 03 - _get_author_name 04 - _composure_keywords 05 - _letterpress 06 - _determine_printf_cmd 07 - _longest_function_name_length 08 - _temp_filename_for 09 - _prompt 10 - _add_composure_file 11 - _transcribe 12 - _typeset_functions 13 - _typeset_functions_about 14 - _shell 15 - _generate_metadata_functions 16 - _list_composure_files 17 - _load_composed_functions 18 - _strip_trailing_whitespace 19 - _strip_semicolons 20 - cite 21 - draft 22 - glossary 23 - metafor 24 - reference(){ 25 - revise 26 - write >> _bootstrap_composure(): function _bootstrap_composure() { _generate_metadata_functions _load_composed_functions _determine_printf_cmd } >> _get_composure_dir(): function _get_composure_dir() { if [ -n \"$XDG_DATA_HOME\" ]; then echo \"$XDG_DATA_HOME/composure\" else echo \"$HOME/.local/composure\" fi } >> _get_author_name(): function _get_author_name() { typeset name localname localname=\"$(git --git-dir \"$(_get_composure_dir)/.git\" config --get user.name)\" for name in \"$GIT_AUTHOR_NAME\" \"$localname\"; do if [ -n \"$name\" ]; then echo \"$name\" break fi done } Function Calls: \u2514\u2500 _get_author_name \u2514\u2500 _get_composure_dir >> _composure_keywords(): function _composure_keywords() { echo \"about author example group param version\" } >> _letterpress(): function _letterpress() { typeset rightcol=\"$1\" leftcol=\"${2:- }\" leftwidth=\"${3:-20}\" if [ -z \"$rightcol\" ]; then return fi $_printf_cmd \"%-*s%s\\n\" \"$leftwidth\" \"$leftcol\" \"$rightcol\" } >> _determine_printf_cmd(): function _determine_printf_cmd() { if [ -z \"$_printf_cmd\" ]; then _printf_cmd=printf [ -x \"$(which gprintf 2>/dev/null)\" ] && _printf_cmd=gprintf export _printf_cmd fi } >> _longest_function_name_length(): function _longest_function_name_length() { echo \"$1\" | awk 'BEGIN{ maxlength=0 } { for(i=1;i<=NF;i++) if (length($i)>maxlength) { maxlength=length($i) } } END{ print maxlength}' } >> _temp_filename_for(): function _temp_filename_for() { typeset file=$(mktemp \"/tmp/$1.XXXX\") command rm \"$file\" 2>/dev/null # ensure file is unlinked prior to use echo \"$file\" } >> _prompt(): function _prompt() { typeset prompt=\"$1\" typeset result case \"$(_shell)\" in bash) read -r -e -p \"$prompt\" result;; *) echo -n \"$prompt\" >&2; read -r result;; esac echo \"$result\" } Function Calls: \u2514\u2500 _prompt \u2514\u2500 _shell >> _add_composure_file(): function _add_composure_file() { typeset func=\"$1\" typeset file=\"$2\" typeset operation=\"$3\" typeset comment=\"${4:-}\" typeset composure_dir=$(_get_composure_dir) ( if ! cd \"$composure_dir\"; then printf \"%s\\n\" \"Oops! Can't find $composure_dir!\" return fi if git rev-parse 2>/dev/null; then if [ ! -f \"$file\" ]; then printf \"%s\\n\" \"Oops! Couldn't find $file to version it for you...\" return fi cp \"$file\" \"$composure_dir/$func.inc\" git add --all . if [ -z \"$comment\" ]; then comment=\"$(_prompt 'Git Comment: ')\" fi git commit -m \"$operation $func: $comment\" fi ) } Function Calls: \u2514\u2500 _add_composure_file \u251c\u2500 _get_composure_dir \u2514\u2500 _prompt \u2514\u2500 _shell >> _transcribe(): function _transcribe() { typeset func=\"$1\" typeset file=\"$2\" typeset operation=\"$3\" typeset comment=\"${4:-}\" typeset composure_dir=$(_get_composure_dir) if git --version >/dev/null 2>&1; then if [ -d \"$composure_dir\" ]; then _add_composure_file \"$func\" \"$file\" \"$operation\" \"$comment\" else if [ \"$USE_COMPOSURE_REPO\" = \"0\" ]; then return # if you say so... fi printf \"%s\\n\" \"I see you don't have a $composure_dir repo...\" typeset input='' typeset valid=0 while [ $valid != 1 ]; do printf \"\\n%s\" 'would you like to create one? y/n: ' read -r input case $input in y|yes|Y|Yes|YES) ( echo 'creating git repository for your functions...' mkdir -p \"$composure_dir\" || return 1 cd \"$composure_dir\" || return 1 git init echo \"composure stores your function definitions here\" > README.txt git add README.txt git commit -m 'initial commit' ) _transcribe \"$func\" \"$file\" \"$operation\" \"$comment\" valid=1 ;; n|no|N|No|NO) printf \"%s\\n\" \"ok. add 'export USE_COMPOSURE_REPO=0' to your startup script to disable this message.\" valid=1 ;; *) printf \"%s\\n\" \"sorry, didn't get that...\" ;; esac done fi fi } Function Calls: \u2514\u2500 _transcribe \u251c\u2500 _get_composure_dir \u2514\u2500 _add_composure_file \u251c\u2500 _get_composure_dir \u2514\u2500 _prompt >> _typeset_functions(): function _typeset_functions() { case \"$(_shell)\" in sh|bash) typeset -F | awk '{print $3}' ;; *) typeset +f | sed 's/().*$//' ;; esac } Function Calls: \u2514\u2500 _typeset_functions \u2514\u2500 _shell >> _typeset_functions_about(): function _typeset_functions_about() { typeset f for f in $(_typeset_functions); do typeset -f -- \"$f\" | grep -qE \"^about[[:space:]]|[[:space:]]about[[:space:]]\" && echo -- \"$f\" done } Function Calls: \u2514\u2500 _typeset_functions_about \u2514\u2500 _typeset_functions \u2514\u2500 _shell >> _shell(): function _shell() { typeset this=$(ps -o comm -p $$ | tail -1 | awk '{print $NF}' | sed 's/^-*//') echo \"${this##*/}\" # e.g. /bin/bash => bash } >> _generate_metadata_functions(): function _generate_metadata_functions() { typeset f for f in $(_composure_keywords) do eval \"$f() { :; }\" done } Function Calls: \u2514\u2500 _generate_metadata_functions \u2514\u2500 _composure_keywords >> _list_composure_files(): function _list_composure_files() { typeset composure_dir=\"$(_get_composure_dir)\" [ -d \"$composure_dir\" ] && find \"$composure_dir\" -maxdepth 1 -name '*.inc' } Function Calls: \u2514\u2500 _list_composure_files \u2514\u2500 _get_composure_dir >> _load_composed_functions(): function _load_composed_functions() { if [ \"$LOAD_COMPOSED_FUNCTIONS\" = \"0\" ]; then return # if you say so... fi typeset inc for inc in $(_list_composure_files); do . \"$inc\" done } Function Calls: \u2514\u2500 _load_composed_functions \u2514\u2500 _list_composure_files \u2514\u2500 _get_composure_dir >> _strip_trailing_whitespace(): function _strip_trailing_whitespace() { sed -e 's/ \\+$//' } >> _strip_semicolons(): function _strip_semicolons() { sed -e 's/;$//' } >> cite(): about : creates one or more meta keywords for use in your functions param : one or more keywords example : $ cite url username example : $ url http://somewhere.com example : $ username alice group : composure function cite() { if [ -z \"$1\" ]; then printf '%s\\n' 'missing parameter(s)' reference cite return fi typeset keyword for keyword in \"$@\"; do eval \"$keyword() { :; }\" done } >> draft(): about : wraps command from history into a new function, default is last command param : 1: name to give function param : 2: optional history line number example : $ ls example : $ draft list example : $ draft newfunc 1120 # wraps command at history line 1120 in newfunc() group : composure about param example` group function draft() { typeset func=$1 typeset num=$2 if [ -z \"$func\" ]; then printf '%s\\n' 'missing parameter(s)' reference draft return fi if type -a \"$func\" 2>/dev/null | grep -q 'is.*alias'; then printf '%s\\n' \"sorry, $(type -a \"$func\"). please choose another name.\" return fi typeset cmd if [ -z \"$num\" ]; then typeset lines=$(fc -ln -1 | grep -q draft && echo 2 || echo 1) cmd=$(fc -ln -$lines | head -1 | sed 's/^[[:blank:]]*//') else cmd=$(eval \"history | grep '^[[:blank:]]*$num' | head -1\" | sed 's/^[[:blank:][:digit:]]*//') fi eval \"function $func { author '$(_get_author_name)' $cmd; }\" typeset file=$(_temp_filename_for draft) typeset -f \"$func\" | _strip_trailing_whitespace | _strip_semicolons > \"$file\" _transcribe \"$func\" \"$file\" Draft \"Initial draft\" command rm \"$file\" 2>/dev/null revise \"$func\" } Function Calls: \u2514\u2500 draft \u251c\u2500 _get_author_name | \u2514\u2500 _get_composure_dir \u251c\u2500 _temp_filename_for \u251c\u2500 _transcribe | \u251c\u2500 _get_composure_dir | \u2514\u2500 _add_composure_file \u251c\u2500 _strip_trailing_whitespace \u251c\u2500 _strip_semicolons \u2514\u2500 revise \u251c\u2500 _get_composure_dir \u251c\u2500 _temp_filename_for \u2514\u2500 _transcribe >> glossary(): about : displays help summary for all functions, or summary for a group of functions param : 1: optional, group name example : $ glossary example : $ glossary misc group : composure function glossary() { typeset targetgroup=${1:-} typeset functionlist=\"$(_typeset_functions_about)\" typeset maxwidth=$(_longest_function_name_length \"$functionlist\" | awk '{print $1 + 5}') for func in $(echo $functionlist); do if [ \"X${targetgroup}X\" != \"XX\" ]; then typeset group=\"$(typeset -f -- $func | metafor group)\" if [ \"$group\" != \"$targetgroup\" ]; then continue # skip non-matching groups, if specified fi fi typeset about=\"$(typeset -f -- $func | metafor about)\" typeset aboutline= echo \"$about\" | fmt | while read -r aboutline; do _letterpress \"$aboutline\" \"$func\" \"$maxwidth\" func=\" \" # only display function name once done done } Function Calls: \u2514\u2500 glossary \u251c\u2500 _letterpress \u251c\u2500 _longest_function_name_length \u251c\u2500 _typeset_functions_about | \u2514\u2500 _typeset_functions \u2514\u2500 metafor \u2514\u2500 glossary >> metafor(): about : prints function metadata associated with keyword param : 1: meta keyword example : typeset -f glossary | metafor example group : composure function metafor() { typeset keyword=$1 if [ -z \"$keyword\" ]; then printf '%s\\n' 'missing parameter(s)' reference metafor return fi sed -n \"/$keyword / s/['\\\";]*\\$//;s/^[ ]*$keyword ['\\\"]*\\([^([].*\\)*\\$/\\1/p\" } Function Calls: \u2514\u2500 metafor \u2514\u2500 glossary \u251c\u2500 _letterpress \u251c\u2500 _longest_function_name_length \u251c\u2500 _typeset_functions_about \u2514\u2500 metafor >> reference(){(): about : displays apidoc help for a specific function param : 1: function name example : $ reference revise group : composure function reference(){ typeset func=$1 if [ -z \"$func\" ]; then printf '%s\\n' 'missing parameter(s)' reference reference return fi typeset line typeset about=\"$(typeset -f \"$func\" | metafor about)\" _letterpress \"$about\" \"$func\" typeset author=\"$(typeset -f $func | metafor author)\" if [ -n \"$author\" ]; then _letterpress \"$author\" 'author:' fi typeset version=\"$(typeset -f $func | metafor version)\" if [ -n \"$version\" ]; then _letterpress \"$version\" 'version:' fi if [ -n \"$(typeset -f $func | metafor param)\" ]; then printf \"parameters:\\n\" typeset -f $func | metafor param | while read -r line do _letterpress \"$line\" done fi if [ -n \"$(typeset -f $func | metafor example)\" ]; then printf \"examples:\\n\" typeset -f $func | metafor example | while read -r line do _letterpress \"$line\" done fi } Function Calls: \u2514\u2500 reference(){ \u251c\u2500 _letterpress \u2514\u2500 metafor \u2514\u2500 glossary >> revise(): about : loads function into editor for revision param : -e: revise version stored in ENV param : 1: name of function example : $ revise myfunction example : $ revise -e myfunction example : save a zero-length file to abort revision group : composure function revise() { typeset source='git' if [ \"$1\" = '-e' ]; then source='env' shift fi typeset func=$1 if [ -z \"$func\" ]; then printf '%s\\n' 'missing parameter(s)' reference revise return fi typeset composure_dir=$(_get_composure_dir) typeset temp=$(_temp_filename_for revise) if [ \"$source\" = 'env' ] || [ ! -f \"$composure_dir/$func.inc\" ]; then typeset -f $func > $temp else cat \"$composure_dir/$func.inc\" > \"$temp\" fi if [ -z \"$EDITOR\" ] then typeset EDITOR=vi fi $EDITOR \"$temp\" if [ -s \"$temp\" ]; then typeset edit='N' . \"$temp\" || edit='Y' while [ $edit = 'Y' ]; do echo -n \"Re-edit? Y/N: \" read -r edit case $edit in y|yes|Y|Yes|YES) edit='Y' $EDITOR \"$temp\" . \"$temp\" && edit='N';; *) edit='N';; esac done _transcribe \"$func\" \"$temp\" Revise else printf '%s\\n' 'zero-length file, revision aborted!' fi command rm \"$temp\" } Function Calls: \u2514\u2500 revise \u251c\u2500 _get_composure_dir \u251c\u2500 _temp_filename_for \u2514\u2500 _transcribe \u251c\u2500 _get_composure_dir \u2514\u2500 _add_composure_file >> write(): about : writes one or more composed function definitions to stdout param : one or more function names example : $ write finddown foo example : $ write finddown group : composure function write() { if [ -z \"$1\" ]; then printf '%s\\n' 'missing parameter(s)' reference write return fi echo \"#!/usr/bin/env ${SHELL##*/}\" cat <<END for f in $(_composure_keywords) do eval \"\\$f() { :; }\" done unset f END typeset -f cite \"$@\" cat <<END main() { echo \"edit me to do something useful!\" exit 0 } main \\$* END } _bootstrap_composure : <<EOF License: The MIT License Copyright \u00a9 2012, 2016 Erich Smith Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. EOF cite about-module Function Calls: \u2514\u2500 write \u251c\u2500 _composure_keywords \u2514\u2500 cite Aliases Alias Name Code Notes cref reference","title":"composure"},{"location":"modules/composure/#composure-module-by-erichs-light-hearted-functions-for-intuitive-shell-programming","text":"(in /home/bsgt/sys_bashrc/modules/composure.sh)","title":"Composure module by Erichs: light-hearted functions for intuitive shell programming"},{"location":"modules/composure/#function-index","text":"01 - _bootstrap_composure 02 - _get_composure_dir 03 - _get_author_name 04 - _composure_keywords 05 - _letterpress 06 - _determine_printf_cmd 07 - _longest_function_name_length 08 - _temp_filename_for 09 - _prompt 10 - _add_composure_file 11 - _transcribe 12 - _typeset_functions 13 - _typeset_functions_about 14 - _shell 15 - _generate_metadata_functions 16 - _list_composure_files 17 - _load_composed_functions 18 - _strip_trailing_whitespace 19 - _strip_semicolons 20 - cite 21 - draft 22 - glossary 23 - metafor 24 - reference(){ 25 - revise 26 - write","title":"Function Index"},{"location":"modules/composure/#_bootstrap_composure","text":"function _bootstrap_composure() { _generate_metadata_functions _load_composed_functions _determine_printf_cmd }","title":"&gt;&gt; _bootstrap_composure():"},{"location":"modules/composure/#_get_composure_dir","text":"function _get_composure_dir() { if [ -n \"$XDG_DATA_HOME\" ]; then echo \"$XDG_DATA_HOME/composure\" else echo \"$HOME/.local/composure\" fi }","title":"&gt;&gt; _get_composure_dir():"},{"location":"modules/composure/#_get_author_name","text":"function _get_author_name() { typeset name localname localname=\"$(git --git-dir \"$(_get_composure_dir)/.git\" config --get user.name)\" for name in \"$GIT_AUTHOR_NAME\" \"$localname\"; do if [ -n \"$name\" ]; then echo \"$name\" break fi done }","title":"&gt;&gt; _get_author_name():"},{"location":"modules/composure/#function-calls","text":"\u2514\u2500 _get_author_name \u2514\u2500 _get_composure_dir","title":"Function Calls:"},{"location":"modules/composure/#_composure_keywords","text":"function _composure_keywords() { echo \"about author example group param version\" }","title":"&gt;&gt; _composure_keywords():"},{"location":"modules/composure/#_letterpress","text":"function _letterpress() { typeset rightcol=\"$1\" leftcol=\"${2:- }\" leftwidth=\"${3:-20}\" if [ -z \"$rightcol\" ]; then return fi $_printf_cmd \"%-*s%s\\n\" \"$leftwidth\" \"$leftcol\" \"$rightcol\" }","title":"&gt;&gt; _letterpress():"},{"location":"modules/composure/#_determine_printf_cmd","text":"function _determine_printf_cmd() { if [ -z \"$_printf_cmd\" ]; then _printf_cmd=printf [ -x \"$(which gprintf 2>/dev/null)\" ] && _printf_cmd=gprintf export _printf_cmd fi }","title":"&gt;&gt; _determine_printf_cmd():"},{"location":"modules/composure/#_longest_function_name_length","text":"function _longest_function_name_length() { echo \"$1\" | awk 'BEGIN{ maxlength=0 } { for(i=1;i<=NF;i++) if (length($i)>maxlength) { maxlength=length($i) } } END{ print maxlength}' }","title":"&gt;&gt; _longest_function_name_length():"},{"location":"modules/composure/#_temp_filename_for","text":"function _temp_filename_for() { typeset file=$(mktemp \"/tmp/$1.XXXX\") command rm \"$file\" 2>/dev/null # ensure file is unlinked prior to use echo \"$file\" }","title":"&gt;&gt; _temp_filename_for():"},{"location":"modules/composure/#_prompt","text":"function _prompt() { typeset prompt=\"$1\" typeset result case \"$(_shell)\" in bash) read -r -e -p \"$prompt\" result;; *) echo -n \"$prompt\" >&2; read -r result;; esac echo \"$result\" }","title":"&gt;&gt; _prompt():"},{"location":"modules/composure/#function-calls_1","text":"\u2514\u2500 _prompt \u2514\u2500 _shell","title":"Function Calls:"},{"location":"modules/composure/#_add_composure_file","text":"function _add_composure_file() { typeset func=\"$1\" typeset file=\"$2\" typeset operation=\"$3\" typeset comment=\"${4:-}\" typeset composure_dir=$(_get_composure_dir) ( if ! cd \"$composure_dir\"; then printf \"%s\\n\" \"Oops! Can't find $composure_dir!\" return fi if git rev-parse 2>/dev/null; then if [ ! -f \"$file\" ]; then printf \"%s\\n\" \"Oops! Couldn't find $file to version it for you...\" return fi cp \"$file\" \"$composure_dir/$func.inc\" git add --all . if [ -z \"$comment\" ]; then comment=\"$(_prompt 'Git Comment: ')\" fi git commit -m \"$operation $func: $comment\" fi ) }","title":"&gt;&gt; _add_composure_file():"},{"location":"modules/composure/#function-calls_2","text":"\u2514\u2500 _add_composure_file \u251c\u2500 _get_composure_dir \u2514\u2500 _prompt \u2514\u2500 _shell","title":"Function Calls:"},{"location":"modules/composure/#_transcribe","text":"function _transcribe() { typeset func=\"$1\" typeset file=\"$2\" typeset operation=\"$3\" typeset comment=\"${4:-}\" typeset composure_dir=$(_get_composure_dir) if git --version >/dev/null 2>&1; then if [ -d \"$composure_dir\" ]; then _add_composure_file \"$func\" \"$file\" \"$operation\" \"$comment\" else if [ \"$USE_COMPOSURE_REPO\" = \"0\" ]; then return # if you say so... fi printf \"%s\\n\" \"I see you don't have a $composure_dir repo...\" typeset input='' typeset valid=0 while [ $valid != 1 ]; do printf \"\\n%s\" 'would you like to create one? y/n: ' read -r input case $input in y|yes|Y|Yes|YES) ( echo 'creating git repository for your functions...' mkdir -p \"$composure_dir\" || return 1 cd \"$composure_dir\" || return 1 git init echo \"composure stores your function definitions here\" > README.txt git add README.txt git commit -m 'initial commit' ) _transcribe \"$func\" \"$file\" \"$operation\" \"$comment\" valid=1 ;; n|no|N|No|NO) printf \"%s\\n\" \"ok. add 'export USE_COMPOSURE_REPO=0' to your startup script to disable this message.\" valid=1 ;; *) printf \"%s\\n\" \"sorry, didn't get that...\" ;; esac done fi fi }","title":"&gt;&gt; _transcribe():"},{"location":"modules/composure/#function-calls_3","text":"\u2514\u2500 _transcribe \u251c\u2500 _get_composure_dir \u2514\u2500 _add_composure_file \u251c\u2500 _get_composure_dir \u2514\u2500 _prompt","title":"Function Calls:"},{"location":"modules/composure/#_typeset_functions","text":"function _typeset_functions() { case \"$(_shell)\" in sh|bash) typeset -F | awk '{print $3}' ;; *) typeset +f | sed 's/().*$//' ;; esac }","title":"&gt;&gt; _typeset_functions():"},{"location":"modules/composure/#function-calls_4","text":"\u2514\u2500 _typeset_functions \u2514\u2500 _shell","title":"Function Calls:"},{"location":"modules/composure/#_typeset_functions_about","text":"function _typeset_functions_about() { typeset f for f in $(_typeset_functions); do typeset -f -- \"$f\" | grep -qE \"^about[[:space:]]|[[:space:]]about[[:space:]]\" && echo -- \"$f\" done }","title":"&gt;&gt; _typeset_functions_about():"},{"location":"modules/composure/#function-calls_5","text":"\u2514\u2500 _typeset_functions_about \u2514\u2500 _typeset_functions \u2514\u2500 _shell","title":"Function Calls:"},{"location":"modules/composure/#_shell","text":"function _shell() { typeset this=$(ps -o comm -p $$ | tail -1 | awk '{print $NF}' | sed 's/^-*//') echo \"${this##*/}\" # e.g. /bin/bash => bash }","title":"&gt;&gt; _shell():"},{"location":"modules/composure/#_generate_metadata_functions","text":"function _generate_metadata_functions() { typeset f for f in $(_composure_keywords) do eval \"$f() { :; }\" done }","title":"&gt;&gt; _generate_metadata_functions():"},{"location":"modules/composure/#function-calls_6","text":"\u2514\u2500 _generate_metadata_functions \u2514\u2500 _composure_keywords","title":"Function Calls:"},{"location":"modules/composure/#_list_composure_files","text":"function _list_composure_files() { typeset composure_dir=\"$(_get_composure_dir)\" [ -d \"$composure_dir\" ] && find \"$composure_dir\" -maxdepth 1 -name '*.inc' }","title":"&gt;&gt; _list_composure_files():"},{"location":"modules/composure/#function-calls_7","text":"\u2514\u2500 _list_composure_files \u2514\u2500 _get_composure_dir","title":"Function Calls:"},{"location":"modules/composure/#_load_composed_functions","text":"function _load_composed_functions() { if [ \"$LOAD_COMPOSED_FUNCTIONS\" = \"0\" ]; then return # if you say so... fi typeset inc for inc in $(_list_composure_files); do . \"$inc\" done }","title":"&gt;&gt; _load_composed_functions():"},{"location":"modules/composure/#function-calls_8","text":"\u2514\u2500 _load_composed_functions \u2514\u2500 _list_composure_files \u2514\u2500 _get_composure_dir","title":"Function Calls:"},{"location":"modules/composure/#_strip_trailing_whitespace","text":"function _strip_trailing_whitespace() { sed -e 's/ \\+$//' }","title":"&gt;&gt; _strip_trailing_whitespace():"},{"location":"modules/composure/#_strip_semicolons","text":"function _strip_semicolons() { sed -e 's/;$//' }","title":"&gt;&gt; _strip_semicolons():"},{"location":"modules/composure/#cite","text":"about : creates one or more meta keywords for use in your functions param : one or more keywords example : $ cite url username example : $ url http://somewhere.com example : $ username alice group : composure function cite() { if [ -z \"$1\" ]; then printf '%s\\n' 'missing parameter(s)' reference cite return fi typeset keyword for keyword in \"$@\"; do eval \"$keyword() { :; }\" done }","title":"&gt;&gt; cite():"},{"location":"modules/composure/#draft","text":"about : wraps command from history into a new function, default is last command param : 1: name to give function param : 2: optional history line number example : $ ls example : $ draft list example : $ draft newfunc 1120 # wraps command at history line 1120 in newfunc() group : composure about param example` group function draft() { typeset func=$1 typeset num=$2 if [ -z \"$func\" ]; then printf '%s\\n' 'missing parameter(s)' reference draft return fi if type -a \"$func\" 2>/dev/null | grep -q 'is.*alias'; then printf '%s\\n' \"sorry, $(type -a \"$func\"). please choose another name.\" return fi typeset cmd if [ -z \"$num\" ]; then typeset lines=$(fc -ln -1 | grep -q draft && echo 2 || echo 1) cmd=$(fc -ln -$lines | head -1 | sed 's/^[[:blank:]]*//') else cmd=$(eval \"history | grep '^[[:blank:]]*$num' | head -1\" | sed 's/^[[:blank:][:digit:]]*//') fi eval \"function $func { author '$(_get_author_name)' $cmd; }\" typeset file=$(_temp_filename_for draft) typeset -f \"$func\" | _strip_trailing_whitespace | _strip_semicolons > \"$file\" _transcribe \"$func\" \"$file\" Draft \"Initial draft\" command rm \"$file\" 2>/dev/null revise \"$func\" }","title":"&gt;&gt; draft():"},{"location":"modules/composure/#function-calls_9","text":"\u2514\u2500 draft \u251c\u2500 _get_author_name | \u2514\u2500 _get_composure_dir \u251c\u2500 _temp_filename_for \u251c\u2500 _transcribe | \u251c\u2500 _get_composure_dir | \u2514\u2500 _add_composure_file \u251c\u2500 _strip_trailing_whitespace \u251c\u2500 _strip_semicolons \u2514\u2500 revise \u251c\u2500 _get_composure_dir \u251c\u2500 _temp_filename_for \u2514\u2500 _transcribe","title":"Function Calls:"},{"location":"modules/composure/#glossary","text":"about : displays help summary for all functions, or summary for a group of functions param : 1: optional, group name example : $ glossary example : $ glossary misc group : composure function glossary() { typeset targetgroup=${1:-} typeset functionlist=\"$(_typeset_functions_about)\" typeset maxwidth=$(_longest_function_name_length \"$functionlist\" | awk '{print $1 + 5}') for func in $(echo $functionlist); do if [ \"X${targetgroup}X\" != \"XX\" ]; then typeset group=\"$(typeset -f -- $func | metafor group)\" if [ \"$group\" != \"$targetgroup\" ]; then continue # skip non-matching groups, if specified fi fi typeset about=\"$(typeset -f -- $func | metafor about)\" typeset aboutline= echo \"$about\" | fmt | while read -r aboutline; do _letterpress \"$aboutline\" \"$func\" \"$maxwidth\" func=\" \" # only display function name once done done }","title":"&gt;&gt; glossary():"},{"location":"modules/composure/#function-calls_10","text":"\u2514\u2500 glossary \u251c\u2500 _letterpress \u251c\u2500 _longest_function_name_length \u251c\u2500 _typeset_functions_about | \u2514\u2500 _typeset_functions \u2514\u2500 metafor \u2514\u2500 glossary","title":"Function Calls:"},{"location":"modules/composure/#metafor","text":"about : prints function metadata associated with keyword param : 1: meta keyword example : typeset -f glossary | metafor example group : composure function metafor() { typeset keyword=$1 if [ -z \"$keyword\" ]; then printf '%s\\n' 'missing parameter(s)' reference metafor return fi sed -n \"/$keyword / s/['\\\";]*\\$//;s/^[ ]*$keyword ['\\\"]*\\([^([].*\\)*\\$/\\1/p\" }","title":"&gt;&gt; metafor():"},{"location":"modules/composure/#function-calls_11","text":"\u2514\u2500 metafor \u2514\u2500 glossary \u251c\u2500 _letterpress \u251c\u2500 _longest_function_name_length \u251c\u2500 _typeset_functions_about \u2514\u2500 metafor","title":"Function Calls:"},{"location":"modules/composure/#reference","text":"about : displays apidoc help for a specific function param : 1: function name example : $ reference revise group : composure function reference(){ typeset func=$1 if [ -z \"$func\" ]; then printf '%s\\n' 'missing parameter(s)' reference reference return fi typeset line typeset about=\"$(typeset -f \"$func\" | metafor about)\" _letterpress \"$about\" \"$func\" typeset author=\"$(typeset -f $func | metafor author)\" if [ -n \"$author\" ]; then _letterpress \"$author\" 'author:' fi typeset version=\"$(typeset -f $func | metafor version)\" if [ -n \"$version\" ]; then _letterpress \"$version\" 'version:' fi if [ -n \"$(typeset -f $func | metafor param)\" ]; then printf \"parameters:\\n\" typeset -f $func | metafor param | while read -r line do _letterpress \"$line\" done fi if [ -n \"$(typeset -f $func | metafor example)\" ]; then printf \"examples:\\n\" typeset -f $func | metafor example | while read -r line do _letterpress \"$line\" done fi }","title":"&gt;&gt; reference(){():"},{"location":"modules/composure/#function-calls_12","text":"\u2514\u2500 reference(){ \u251c\u2500 _letterpress \u2514\u2500 metafor \u2514\u2500 glossary","title":"Function Calls:"},{"location":"modules/composure/#revise","text":"about : loads function into editor for revision param : -e: revise version stored in ENV param : 1: name of function example : $ revise myfunction example : $ revise -e myfunction example : save a zero-length file to abort revision group : composure function revise() { typeset source='git' if [ \"$1\" = '-e' ]; then source='env' shift fi typeset func=$1 if [ -z \"$func\" ]; then printf '%s\\n' 'missing parameter(s)' reference revise return fi typeset composure_dir=$(_get_composure_dir) typeset temp=$(_temp_filename_for revise) if [ \"$source\" = 'env' ] || [ ! -f \"$composure_dir/$func.inc\" ]; then typeset -f $func > $temp else cat \"$composure_dir/$func.inc\" > \"$temp\" fi if [ -z \"$EDITOR\" ] then typeset EDITOR=vi fi $EDITOR \"$temp\" if [ -s \"$temp\" ]; then typeset edit='N' . \"$temp\" || edit='Y' while [ $edit = 'Y' ]; do echo -n \"Re-edit? Y/N: \" read -r edit case $edit in y|yes|Y|Yes|YES) edit='Y' $EDITOR \"$temp\" . \"$temp\" && edit='N';; *) edit='N';; esac done _transcribe \"$func\" \"$temp\" Revise else printf '%s\\n' 'zero-length file, revision aborted!' fi command rm \"$temp\" }","title":"&gt;&gt; revise():"},{"location":"modules/composure/#function-calls_13","text":"\u2514\u2500 revise \u251c\u2500 _get_composure_dir \u251c\u2500 _temp_filename_for \u2514\u2500 _transcribe \u251c\u2500 _get_composure_dir \u2514\u2500 _add_composure_file","title":"Function Calls:"},{"location":"modules/composure/#write","text":"about : writes one or more composed function definitions to stdout param : one or more function names example : $ write finddown foo example : $ write finddown group : composure function write() { if [ -z \"$1\" ]; then printf '%s\\n' 'missing parameter(s)' reference write return fi echo \"#!/usr/bin/env ${SHELL##*/}\" cat <<END for f in $(_composure_keywords) do eval \"\\$f() { :; }\" done unset f END typeset -f cite \"$@\" cat <<END main() { echo \"edit me to do something useful!\" exit 0 } main \\$* END } _bootstrap_composure : <<EOF License: The MIT License Copyright \u00a9 2012, 2016 Erich Smith Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. EOF cite about-module","title":"&gt;&gt; write():"},{"location":"modules/composure/#function-calls_14","text":"\u2514\u2500 write \u251c\u2500 _composure_keywords \u2514\u2500 cite","title":"Function Calls:"},{"location":"modules/composure/#aliases","text":"Alias Name Code Notes cref reference","title":"Aliases"},{"location":"modules/docker-compose_module/","text":"Helper functions for using docker-compose (in /home/bsgt/sys_bashrc/modules/docker-compose_module.sh) Function Index 01 - docker-compose-fresh >> docker-compose-fresh(): about : Shut down, remove and start again the docker-compose setup, then tail the logs group : docker-compose param : 1: name of the docker-compose.yaml file to use (optional). Default: docker-compose.yaml example : docker-compose-fresh docker-compose-foo.yaml function docker-compose-fresh() { local DCO_FILE_PARAM=\"\" if [ -n \"$1\" ]; then echo \"Using docker-compose file: $1\" DCO_FILE_PARAM=\"--file $1\" fi docker-compose $DCO_FILE_PARAM stop docker-compose $DCO_FILE_PARAM rm -f docker-compose $DCO_FILE_PARAM up -d docker-compose $DCO_FILE_PARAM logs -f --tail 100 }","title":"docker-compose_module"},{"location":"modules/docker-compose_module/#helper-functions-for-using-docker-compose","text":"(in /home/bsgt/sys_bashrc/modules/docker-compose_module.sh)","title":"Helper functions for using docker-compose"},{"location":"modules/docker-compose_module/#function-index","text":"01 - docker-compose-fresh","title":"Function Index"},{"location":"modules/docker-compose_module/#docker-compose-fresh","text":"about : Shut down, remove and start again the docker-compose setup, then tail the logs group : docker-compose param : 1: name of the docker-compose.yaml file to use (optional). Default: docker-compose.yaml example : docker-compose-fresh docker-compose-foo.yaml function docker-compose-fresh() { local DCO_FILE_PARAM=\"\" if [ -n \"$1\" ]; then echo \"Using docker-compose file: $1\" DCO_FILE_PARAM=\"--file $1\" fi docker-compose $DCO_FILE_PARAM stop docker-compose $DCO_FILE_PARAM rm -f docker-compose $DCO_FILE_PARAM up -d docker-compose $DCO_FILE_PARAM logs -f --tail 100 }","title":"&gt;&gt; docker-compose-fresh():"},{"location":"modules/docker_module/","text":"Helpers to more easily work with Docker (in /home/bsgt/sys_bashrc/modules/docker_module.sh) Function Index 01 - docker-remove-most-recent-container 02 - docker-remove-most-recent-image 03 - docker-remove-stale-assets 04 - docker-enter 05 - docker-remove-images 06 - docker-image-dependencies 07 - docker-runtime-environment 08 - docker-archive-content >> docker-remove-most-recent-container(): about : attempt to remove the most recent container from docker ps -a group : docker function docker-remove-most-recent-container() { docker ps -ql | xargs docker rm } >> docker-remove-most-recent-image(): about : attempt to remove the most recent image from docker images group : docker function docker-remove-most-recent-image() { docker images -q | head -1 | xargs docker rmi } >> docker-remove-stale-assets(): about : attempt to remove exited containers and dangling images group : docker function docker-remove-stale-assets() { docker ps --filter status=exited -q | xargs docker rm --volumes docker images --filter dangling=true -q | xargs docker rmi } >> docker-enter(): about : enter the specified docker container using bash group : docker param : 1: Name of the container to enter example : docker-enter oracle-xe function docker-enter() { docker exec -it \"$@\" /bin/bash; } >> docker-remove-images(): about : attempt to remove images with supplied tags or all if no tags are supplied group : docker function docker-remove-images() { if [ -z \"$1\" ]; then docker rmi $(docker images -q) else DOCKER_IMAGES=\"\" for IMAGE_ID in $@; do DOCKER_IMAGES=\"$DOCKER_IMAGES\\|$IMAGE_ID\"; done ID_ARRAY=($(docker images | grep \"${DOCKER_IMAGES:2}\" | awk {'print $3'})) docker rmi $(echo ${ID_ARRAY[@]} | tr ' ' '\\n' | sort -u | tr '\\n' ' ') fi } >> docker-image-dependencies(): about : attempt to create a Graphiz image of the supplied image ID dependencies group : docker function docker-image-dependencies() { if hash dot 2>/dev/null; then OUT=$(mktemp -t docker-viz-XXXX.png) docker images -viz | dot -Tpng > $OUT case $OSTYPE in linux*) xdg-open $OUT ;; darwin*) open $OUT ;; esac else >&2 echo \"Can't show dependencies; Graphiz is not installed\" fi } >> docker-runtime-environment(): about : attempt to list the environmental variables of the supplied image ID group : docker function docker-runtime-environment() { docker run \"$@\" env } >> docker-archive-content(): about : show the content of the provided Docker image archive group : docker param : 1: image archive name example : docker-archive-content images.tar.gz function docker-archive-content() { if [ -n \"$1\" ]; then tar -xzOf $1 manifest.json | jq '[.[] | .RepoTags] | add' fi }","title":"docker_module"},{"location":"modules/docker_module/#helpers-to-more-easily-work-with-docker","text":"(in /home/bsgt/sys_bashrc/modules/docker_module.sh)","title":"Helpers to more easily work with Docker"},{"location":"modules/docker_module/#function-index","text":"01 - docker-remove-most-recent-container 02 - docker-remove-most-recent-image 03 - docker-remove-stale-assets 04 - docker-enter 05 - docker-remove-images 06 - docker-image-dependencies 07 - docker-runtime-environment 08 - docker-archive-content","title":"Function Index"},{"location":"modules/docker_module/#docker-remove-most-recent-container","text":"about : attempt to remove the most recent container from docker ps -a group : docker function docker-remove-most-recent-container() { docker ps -ql | xargs docker rm }","title":"&gt;&gt; docker-remove-most-recent-container():"},{"location":"modules/docker_module/#docker-remove-most-recent-image","text":"about : attempt to remove the most recent image from docker images group : docker function docker-remove-most-recent-image() { docker images -q | head -1 | xargs docker rmi }","title":"&gt;&gt; docker-remove-most-recent-image():"},{"location":"modules/docker_module/#docker-remove-stale-assets","text":"about : attempt to remove exited containers and dangling images group : docker function docker-remove-stale-assets() { docker ps --filter status=exited -q | xargs docker rm --volumes docker images --filter dangling=true -q | xargs docker rmi }","title":"&gt;&gt; docker-remove-stale-assets():"},{"location":"modules/docker_module/#docker-enter","text":"about : enter the specified docker container using bash group : docker param : 1: Name of the container to enter example : docker-enter oracle-xe function docker-enter() { docker exec -it \"$@\" /bin/bash; }","title":"&gt;&gt; docker-enter():"},{"location":"modules/docker_module/#docker-remove-images","text":"about : attempt to remove images with supplied tags or all if no tags are supplied group : docker function docker-remove-images() { if [ -z \"$1\" ]; then docker rmi $(docker images -q) else DOCKER_IMAGES=\"\" for IMAGE_ID in $@; do DOCKER_IMAGES=\"$DOCKER_IMAGES\\|$IMAGE_ID\"; done ID_ARRAY=($(docker images | grep \"${DOCKER_IMAGES:2}\" | awk {'print $3'})) docker rmi $(echo ${ID_ARRAY[@]} | tr ' ' '\\n' | sort -u | tr '\\n' ' ') fi }","title":"&gt;&gt; docker-remove-images():"},{"location":"modules/docker_module/#docker-image-dependencies","text":"about : attempt to create a Graphiz image of the supplied image ID dependencies group : docker function docker-image-dependencies() { if hash dot 2>/dev/null; then OUT=$(mktemp -t docker-viz-XXXX.png) docker images -viz | dot -Tpng > $OUT case $OSTYPE in linux*) xdg-open $OUT ;; darwin*) open $OUT ;; esac else >&2 echo \"Can't show dependencies; Graphiz is not installed\" fi }","title":"&gt;&gt; docker-image-dependencies():"},{"location":"modules/docker_module/#docker-runtime-environment","text":"about : attempt to list the environmental variables of the supplied image ID group : docker function docker-runtime-environment() { docker run \"$@\" env }","title":"&gt;&gt; docker-runtime-environment():"},{"location":"modules/docker_module/#docker-archive-content","text":"about : show the content of the provided Docker image archive group : docker param : 1: image archive name example : docker-archive-content images.tar.gz function docker-archive-content() { if [ -n \"$1\" ]; then tar -xzOf $1 manifest.json | jq '[.[] | .RepoTags] | add' fi }","title":"&gt;&gt; docker-archive-content():"},{"location":"modules/extract/","text":"one command to extract them all... (in /home/bsgt/sys_bashrc/modules/extract.sh) Function Index 01 - extract >> extract(): function extract() { local opt local OPTIND=1 while getopts \"hv\" opt; do case \"$opt\" in h) cat <<End-Of-Usage Usage: ${FUNCNAME[0]} [option] <archives> options: -h show this message and exit -v verbosely list files processed End-Of-Usage return ;; v) local -r verbose='v' ;; ?) extract -h >&2 return 1 ;; esac done shift $((OPTIND-1)) [ $# -eq 0 ] && extract -h && return 1 while [ $# -gt 0 ]; do if [[ ! -f \"$1\" ]]; then echo \"extract: '$1' is not a valid file\" >&2 shift continue fi local -r filename=$(basename -- $1) local -r filedirname=$(dirname -- $1) local targetdirname=$(sed 's/\\(\\.tar\\.bz2$\\|\\.tbz$\\|\\.tbz2$\\|\\.tar\\.gz$\\|\\.tgz$\\|\\.tar$\\|\\.tar\\.xz$\\|\\.txz$\\|\\.tar\\.Z$\\|\\.7z$\\)//g' <<< $filename) if [ \"$filename\" = \"$targetdirname\" ]; then targetdirname=\"\" else mkdir -v \"$filedirname/$targetdirname\" fi if [ -f \"$1\" ]; then case \"$1\" in *.tar.bz2|*.tbz|*.tbz2) tar \"x${verbose}jf\" \"$1\" -C \"$filedirname/$targetdirname\" ;; *.tar.gz|*.tgz) tar \"x${verbose}zf\" \"$1\" -C \"$filedirname/$targetdirname\" ;; *.tar.xz|*.txz) tar \"x${verbose}Jf\" \"$1\" -C \"$filedirname/$targetdirname\" ;; *.tar.Z) tar \"x${verbose}Zf\" \"$1\" -C \"$filedirname/$targetdirname\" ;; *.bz2) bunzip2 \"$1\" ;; *.deb) dpkg-deb -x${verbose} \"$1\" \"${1:0:-4}\" ;; *.pax.gz) gunzip \"$1\"; set -- \"$@\" \"${1:0:-3}\" ;; *.gz) gunzip \"$1\" ;; *.pax) pax -r -f \"$1\" ;; *.pkg) pkgutil --expand \"$1\" \"${1:0:-4}\" ;; *.rar) unrar x \"$1\" ;; *.rpm) rpm2cpio \"$1\" | cpio -idm${verbose} ;; *.tar) tar \"x${verbose}f\" \"$1\" -C \"$filedirname/$targetdirname\" ;; *.xz) xz --decompress \"$1\" ;; *.zip|*.war|*.jar) unzip \"$1\" ;; *.Z) uncompress \"$1\" ;; *.7z) 7za x \"$1\" ;; *) echo \"'$1' cannot be extracted via extract\" >&2;; esac fi shift done }","title":"extract"},{"location":"modules/extract/#one-command-to-extract-them-all","text":"(in /home/bsgt/sys_bashrc/modules/extract.sh)","title":"one command to extract them all..."},{"location":"modules/extract/#function-index","text":"01 - extract","title":"Function Index"},{"location":"modules/extract/#extract","text":"function extract() { local opt local OPTIND=1 while getopts \"hv\" opt; do case \"$opt\" in h) cat <<End-Of-Usage Usage: ${FUNCNAME[0]} [option] <archives> options: -h show this message and exit -v verbosely list files processed End-Of-Usage return ;; v) local -r verbose='v' ;; ?) extract -h >&2 return 1 ;; esac done shift $((OPTIND-1)) [ $# -eq 0 ] && extract -h && return 1 while [ $# -gt 0 ]; do if [[ ! -f \"$1\" ]]; then echo \"extract: '$1' is not a valid file\" >&2 shift continue fi local -r filename=$(basename -- $1) local -r filedirname=$(dirname -- $1) local targetdirname=$(sed 's/\\(\\.tar\\.bz2$\\|\\.tbz$\\|\\.tbz2$\\|\\.tar\\.gz$\\|\\.tgz$\\|\\.tar$\\|\\.tar\\.xz$\\|\\.txz$\\|\\.tar\\.Z$\\|\\.7z$\\)//g' <<< $filename) if [ \"$filename\" = \"$targetdirname\" ]; then targetdirname=\"\" else mkdir -v \"$filedirname/$targetdirname\" fi if [ -f \"$1\" ]; then case \"$1\" in *.tar.bz2|*.tbz|*.tbz2) tar \"x${verbose}jf\" \"$1\" -C \"$filedirname/$targetdirname\" ;; *.tar.gz|*.tgz) tar \"x${verbose}zf\" \"$1\" -C \"$filedirname/$targetdirname\" ;; *.tar.xz|*.txz) tar \"x${verbose}Jf\" \"$1\" -C \"$filedirname/$targetdirname\" ;; *.tar.Z) tar \"x${verbose}Zf\" \"$1\" -C \"$filedirname/$targetdirname\" ;; *.bz2) bunzip2 \"$1\" ;; *.deb) dpkg-deb -x${verbose} \"$1\" \"${1:0:-4}\" ;; *.pax.gz) gunzip \"$1\"; set -- \"$@\" \"${1:0:-3}\" ;; *.gz) gunzip \"$1\" ;; *.pax) pax -r -f \"$1\" ;; *.pkg) pkgutil --expand \"$1\" \"${1:0:-4}\" ;; *.rar) unrar x \"$1\" ;; *.rpm) rpm2cpio \"$1\" | cpio -idm${verbose} ;; *.tar) tar \"x${verbose}f\" \"$1\" -C \"$filedirname/$targetdirname\" ;; *.xz) xz --decompress \"$1\" ;; *.zip|*.war|*.jar) unzip \"$1\" ;; *.Z) uncompress \"$1\" ;; *.7z) 7za x \"$1\" ;; *) echo \"'$1' cannot be extracted via extract\" >&2;; esac fi shift done }","title":"&gt;&gt; extract():"},{"location":"modules/git_module/","text":"git helper functions (in /home/bsgt/sys_bashrc/modules/git_module.sh) Function Index 01 - git_remote 02 - git_first_push 03 - git_pub 04 - git_revert 05 - _is_clean 06 - _commit_exists 07 - _keep_changes 08 - git_rollback 09 - git_remove_missing_files 10 - local-ignore 11 - git_info 12 - git_stats 13 - gittowork 14 - gitignore-reload 15 - git_greedy_get >> git_remote(): about : adds remote $GIT_HOSTING:$1 to current repo group : git function git_remote() { echo \"Running: git remote add origin ${GIT_HOSTING}:$1.git\" git remote add origin $GIT_HOSTING:$1.git } >> git_first_push(): about : push into origin refs/heads/master group : git function git_first_push() { echo \"Running: git push origin master:refs/heads/master\" git push origin master:refs/heads/master } >> git_pub(): about : publishes current branch to remote origin group : git function git_pub() { BRANCH=$(git rev-parse --abbrev-ref HEAD) echo \"Publishing ${BRANCH} to remote origin\" git push -u origin $BRANCH } >> git_revert(): about : applies changes to HEAD that revert all changes after this commit group : git function git_revert() { git reset $1 git reset --soft HEAD@{1} git commit -m \"Revert to ${1}\" git reset --hard } >> _is_clean(): function _is_clean() { if [[ $(git diff --shortstat 2> /dev/null | tail -n1) != \"\" ]]; then echo \"Your branch is dirty, please commit your changes\" kill -INT $$ fi } >> _commit_exists(): function _commit_exists() { git rev-list --quiet $1 status=$? if [ $status -ne 0 ]; then echo \"Commit ${1} does not exist\" kill -INT $$ fi } >> _keep_changes(): function _keep_changes() { while true do read -p \"Do you want to keep all changes from rolled back revisions in your working tree? [Y/N]\" RESP case $RESP in [yY]) echo \"Rolling back to commit ${1} with unstaged changes\" git reset $1 break ;; [nN]) echo \"Rolling back to commit ${1} with a clean working tree\" git reset --hard $1 break ;; *) echo \"Please enter Y or N\" esac done } >> git_rollback(): about : resets the current HEAD to this commit group : git function git_rollback() { if [ -n \"$(git symbolic-ref HEAD 2> /dev/null)\" ]; then _is_clean _commit_exists $1 while true do read -p \"WARNING: This will change your history and move the current HEAD back to commit ${1}, continue? [Y/N]\" RESP case $RESP in [yY]) _keep_changes $1 break ;; [nN]) break ;; *) echo \"Please enter Y or N\" esac done else echo \"you're currently not in a git repository\" fi } Function Calls: \u2514\u2500 git_rollback \u251c\u2500 _commit_exists \u2514\u2500 _keep_changes >> git_remove_missing_files(): group : git function git_remove_missing_files() { git ls-files -d -z | xargs -0 git update-index --remove } >> local-ignore(): about : adds file or path to git exclude file param : 1: file or path fragment to ignore group : git function local-ignore() { echo \"$1\" >> .git/info/exclude } >> git_info(): about : overview for your git repo group : git function git_info() { if [ -n \"$(git symbolic-ref HEAD 2> /dev/null)\" ]; then echo \"git repo overview\" echo \"-----------------\" echo for remote in $(git remote show); do echo $remote: git remote show $remote echo done echo \"status:\" if [ -n \"$(git status -s 2> /dev/null)\" ]; then git status -s else echo \"working directory is clean\" fi echo echo \"log:\" git log -5 --oneline echo else echo \"you're currently not in a git repository\" fi } >> git_stats(): about : display stats per author group : git function git_stats() { if [ -n \"$(git symbolic-ref HEAD 2> /dev/null)\" ]; then echo \"Number of commits per author:\" git --no-pager shortlog -sn --all AUTHORS=$( git shortlog -sn --all | cut -f2 | cut -f1 -d' ') LOGOPTS=\"\" if [ \"$1\" == '-w' ]; then LOGOPTS=\"$LOGOPTS -w\" shift fi if [ \"$1\" == '-M' ]; then LOGOPTS=\"$LOGOPTS -M\" shift fi if [ \"$1\" == '-C' ]; then LOGOPTS=\"$LOGOPTS -C --find-copies-harder\" shift fi for a in $AUTHORS do echo '-------------------' echo \"Statistics for: $a\" echo -n \"Number of files changed: \" git log $LOGOPTS --all --numstat --format=\"%n\" --author=$a | cut -f3 | sort -iu | wc -l echo -n \"Number of lines added: \" git log $LOGOPTS --all --numstat --format=\"%n\" --author=$a | cut -f1 | awk '{s+=$1} END {print s}' echo -n \"Number of lines deleted: \" git log $LOGOPTS --all --numstat --format=\"%n\" --author=$a | cut -f2 | awk '{s+=$1} END {print s}' echo -n \"Number of merges: \" git log $LOGOPTS --all --merges --author=$a | grep -c '^commit' done else echo \"you're currently not in a git repository\" fi } >> gittowork(): about : Places the latest .gitignore file for a given project type in the current directory, or concatenates onto an existing .gitignore group : git param : 1: the language/type of the project, used for determining the contents of the .gitignore file example : gittowork java function gittowork() { result=$(curl -L \"https://www.gitignore.io/api/$1\" 2>/dev/null) if [[ $result =~ ERROR ]]; then echo \"Query '$1' has no match. See a list of possible queries with 'gittowork list'\" elif [[ $1 = list ]]; then echo \"$result\" else if [[ -f .gitignore ]]; then result=`echo \"$result\" | grep -v \"# Created by http://www.gitignore.io\"` echo \".gitignore already exists, appending...\" echo \"$result\" >> .gitignore else echo \"$result\" > .gitignore fi fi } >> gitignore-reload(): about : Empties the git cache, and readds all files not blacklisted by .gitignore group : git example : gitignore-reload function gitignore-reload() { git update-index -q --ignore-submodules --refresh err=0 if ! git diff-files --quiet --ignore-submodules -- then echo >&2 \"ERROR: Cannot reload .gitignore: Your index contains unstaged changes.\" git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2 err=1 fi if ! git diff-index --cached --quiet HEAD --ignore-submodules then echo >&2 \"ERROR: Cannot reload .gitignore: Your index contains uncommited changes.\" git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2 err=1 fi if [ $err = 1 ] then echo >&2 \"Please commit or stash them.\" fi if [ $err = 0 ]; then git rm -r --cached . echo >&2 \"Running git add .\" git add . echo >&2 \"Files readded. Commit your new changes now.\" fi } >> git_greedy_get(): about : Pulls all existing remote brachches when executed in an existing git repo group : git example : git_greedy_get function git_greedy_get() { git branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done git fetch --all git pull --all }","title":"git_module"},{"location":"modules/git_module/#git-helper-functions","text":"(in /home/bsgt/sys_bashrc/modules/git_module.sh)","title":"git helper functions"},{"location":"modules/git_module/#function-index","text":"01 - git_remote 02 - git_first_push 03 - git_pub 04 - git_revert 05 - _is_clean 06 - _commit_exists 07 - _keep_changes 08 - git_rollback 09 - git_remove_missing_files 10 - local-ignore 11 - git_info 12 - git_stats 13 - gittowork 14 - gitignore-reload 15 - git_greedy_get","title":"Function Index"},{"location":"modules/git_module/#git_remote","text":"about : adds remote $GIT_HOSTING:$1 to current repo group : git function git_remote() { echo \"Running: git remote add origin ${GIT_HOSTING}:$1.git\" git remote add origin $GIT_HOSTING:$1.git }","title":"&gt;&gt; git_remote():"},{"location":"modules/git_module/#git_first_push","text":"about : push into origin refs/heads/master group : git function git_first_push() { echo \"Running: git push origin master:refs/heads/master\" git push origin master:refs/heads/master }","title":"&gt;&gt; git_first_push():"},{"location":"modules/git_module/#git_pub","text":"about : publishes current branch to remote origin group : git function git_pub() { BRANCH=$(git rev-parse --abbrev-ref HEAD) echo \"Publishing ${BRANCH} to remote origin\" git push -u origin $BRANCH }","title":"&gt;&gt; git_pub():"},{"location":"modules/git_module/#git_revert","text":"about : applies changes to HEAD that revert all changes after this commit group : git function git_revert() { git reset $1 git reset --soft HEAD@{1} git commit -m \"Revert to ${1}\" git reset --hard }","title":"&gt;&gt; git_revert():"},{"location":"modules/git_module/#_is_clean","text":"function _is_clean() { if [[ $(git diff --shortstat 2> /dev/null | tail -n1) != \"\" ]]; then echo \"Your branch is dirty, please commit your changes\" kill -INT $$ fi }","title":"&gt;&gt; _is_clean():"},{"location":"modules/git_module/#_commit_exists","text":"function _commit_exists() { git rev-list --quiet $1 status=$? if [ $status -ne 0 ]; then echo \"Commit ${1} does not exist\" kill -INT $$ fi }","title":"&gt;&gt; _commit_exists():"},{"location":"modules/git_module/#_keep_changes","text":"function _keep_changes() { while true do read -p \"Do you want to keep all changes from rolled back revisions in your working tree? [Y/N]\" RESP case $RESP in [yY]) echo \"Rolling back to commit ${1} with unstaged changes\" git reset $1 break ;; [nN]) echo \"Rolling back to commit ${1} with a clean working tree\" git reset --hard $1 break ;; *) echo \"Please enter Y or N\" esac done }","title":"&gt;&gt; _keep_changes():"},{"location":"modules/git_module/#git_rollback","text":"about : resets the current HEAD to this commit group : git function git_rollback() { if [ -n \"$(git symbolic-ref HEAD 2> /dev/null)\" ]; then _is_clean _commit_exists $1 while true do read -p \"WARNING: This will change your history and move the current HEAD back to commit ${1}, continue? [Y/N]\" RESP case $RESP in [yY]) _keep_changes $1 break ;; [nN]) break ;; *) echo \"Please enter Y or N\" esac done else echo \"you're currently not in a git repository\" fi }","title":"&gt;&gt; git_rollback():"},{"location":"modules/git_module/#function-calls","text":"\u2514\u2500 git_rollback \u251c\u2500 _commit_exists \u2514\u2500 _keep_changes","title":"Function Calls:"},{"location":"modules/git_module/#git_remove_missing_files","text":"group : git function git_remove_missing_files() { git ls-files -d -z | xargs -0 git update-index --remove }","title":"&gt;&gt; git_remove_missing_files():"},{"location":"modules/git_module/#local-ignore","text":"about : adds file or path to git exclude file param : 1: file or path fragment to ignore group : git function local-ignore() { echo \"$1\" >> .git/info/exclude }","title":"&gt;&gt; local-ignore():"},{"location":"modules/git_module/#git_info","text":"about : overview for your git repo group : git function git_info() { if [ -n \"$(git symbolic-ref HEAD 2> /dev/null)\" ]; then echo \"git repo overview\" echo \"-----------------\" echo for remote in $(git remote show); do echo $remote: git remote show $remote echo done echo \"status:\" if [ -n \"$(git status -s 2> /dev/null)\" ]; then git status -s else echo \"working directory is clean\" fi echo echo \"log:\" git log -5 --oneline echo else echo \"you're currently not in a git repository\" fi }","title":"&gt;&gt; git_info():"},{"location":"modules/git_module/#git_stats","text":"about : display stats per author group : git function git_stats() { if [ -n \"$(git symbolic-ref HEAD 2> /dev/null)\" ]; then echo \"Number of commits per author:\" git --no-pager shortlog -sn --all AUTHORS=$( git shortlog -sn --all | cut -f2 | cut -f1 -d' ') LOGOPTS=\"\" if [ \"$1\" == '-w' ]; then LOGOPTS=\"$LOGOPTS -w\" shift fi if [ \"$1\" == '-M' ]; then LOGOPTS=\"$LOGOPTS -M\" shift fi if [ \"$1\" == '-C' ]; then LOGOPTS=\"$LOGOPTS -C --find-copies-harder\" shift fi for a in $AUTHORS do echo '-------------------' echo \"Statistics for: $a\" echo -n \"Number of files changed: \" git log $LOGOPTS --all --numstat --format=\"%n\" --author=$a | cut -f3 | sort -iu | wc -l echo -n \"Number of lines added: \" git log $LOGOPTS --all --numstat --format=\"%n\" --author=$a | cut -f1 | awk '{s+=$1} END {print s}' echo -n \"Number of lines deleted: \" git log $LOGOPTS --all --numstat --format=\"%n\" --author=$a | cut -f2 | awk '{s+=$1} END {print s}' echo -n \"Number of merges: \" git log $LOGOPTS --all --merges --author=$a | grep -c '^commit' done else echo \"you're currently not in a git repository\" fi }","title":"&gt;&gt; git_stats():"},{"location":"modules/git_module/#gittowork","text":"about : Places the latest .gitignore file for a given project type in the current directory, or concatenates onto an existing .gitignore group : git param : 1: the language/type of the project, used for determining the contents of the .gitignore file example : gittowork java function gittowork() { result=$(curl -L \"https://www.gitignore.io/api/$1\" 2>/dev/null) if [[ $result =~ ERROR ]]; then echo \"Query '$1' has no match. See a list of possible queries with 'gittowork list'\" elif [[ $1 = list ]]; then echo \"$result\" else if [[ -f .gitignore ]]; then result=`echo \"$result\" | grep -v \"# Created by http://www.gitignore.io\"` echo \".gitignore already exists, appending...\" echo \"$result\" >> .gitignore else echo \"$result\" > .gitignore fi fi }","title":"&gt;&gt; gittowork():"},{"location":"modules/git_module/#gitignore-reload","text":"about : Empties the git cache, and readds all files not blacklisted by .gitignore group : git example : gitignore-reload function gitignore-reload() { git update-index -q --ignore-submodules --refresh err=0 if ! git diff-files --quiet --ignore-submodules -- then echo >&2 \"ERROR: Cannot reload .gitignore: Your index contains unstaged changes.\" git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2 err=1 fi if ! git diff-index --cached --quiet HEAD --ignore-submodules then echo >&2 \"ERROR: Cannot reload .gitignore: Your index contains uncommited changes.\" git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2 err=1 fi if [ $err = 1 ] then echo >&2 \"Please commit or stash them.\" fi if [ $err = 0 ]; then git rm -r --cached . echo >&2 \"Running git add .\" git add . echo >&2 \"Files readded. Commit your new changes now.\" fi }","title":"&gt;&gt; gitignore-reload():"},{"location":"modules/git_module/#git_greedy_get","text":"about : Pulls all existing remote brachches when executed in an existing git repo group : git example : git_greedy_get function git_greedy_get() { git branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done git fetch --all git pull --all }","title":"&gt;&gt; git_greedy_get():"},{"location":"modules/history_module/","text":"History functions (in /home/bsgt/sys_bashrc/modules/history_module.sh) Function Index 01 - hist_nlines 02 - grep_history 03 - _chop_first_column 04 - _add_line_numbers 05 - _top_ten 06 - _unique_history 07 - ghf 08 - histdel 09 - histdeln >> hist_nlines(): about : Get last N entries from bash history. N default is 100 lines group : history param : 1: An integer corresponding to the number of history lines to tail example : $ hist_nlines 200 function hist_nlines() { if [ $# -eq 0 ]; then num_lines=100; else num_lines=$1; fi history | tail -n $num_lines; } >> grep_history(): about : Grep bash history group : history example : $ grep_history ls function grep_history() { history | grep \"$1\" ; } >> _chop_first_column(): function _chop_first_column() { awk '{for (i=2; i<NF; i++) printf $i \" \"; print $NF}' ; } >> _add_line_numbers(): function _add_line_numbers() { awk '{print NR \" \" $0}' ; } >> _top_ten(): function _top_ten() { sort | uniq -c | sort -r | head -n 10 ; } >> _unique_history(): function _unique_history() { _chop_first_column | _top_ten | _chop_first_column | _add_line_numbers ; } Function Calls: \u2514\u2500 _unique_history \u251c\u2500 _chop_first_column \u251c\u2500 _add_line_numbers \u2514\u2500 _top_ten >> ghf(): about : Grep bash history Function group : history param : 1: With no args supplied, ghf returns the top 10 most used commands param : 2: With 1 search strings ghf returns top 10 uses for that term param : 3: With 2 search strings ghf executes a further search filter to the top10 example : $ grep_history mkdir function ghf() { if [ $# -eq 0 ]; then hist_nlines | _unique_history; fi if [ $# -eq 1 ]; then grep_history \"$1\" | _unique_history; fi if [ $# -eq 2 ]; then $(grep_history \"$1\" | _unique_history | grep ^$2 | _chop_first_column) fi } Function Calls: \u2514\u2500 ghf \u251c\u2500 hist_nlines \u251c\u2500 grep_history \u2514\u2500 _unique_history \u251c\u2500 _chop_first_column \u251c\u2500 _add_line_numbers \u2514\u2500 _top_ten >> histdel(): about : Delete lines of history between N -> N+n. Excluding histdel iteself. group : history param : 1: starting line to delete param : 2: ending line to delete example : $ histdel 1000 1033 function histdel() { for h in $(seq $1 $2 | tac); do history -d $h done history -d $(history 1 | awk '{print $1}') } >> histdeln(): about : Delete last N lines of history including histdeln group : history param : 1: Number of lines to delete example : $ histdeln 10 function histdeln() { n=$(history 1 | awk '{print $1}') histdel $(( $n - $1 )) $(( $n - 1 )) } Function Calls: \u2514\u2500 histdeln \u2514\u2500 histdel Aliases Alias Name Code Notes hist history' shows all history gh history | grep ' grep all history","title":"history_module"},{"location":"modules/history_module/#history-functions","text":"(in /home/bsgt/sys_bashrc/modules/history_module.sh)","title":"History functions"},{"location":"modules/history_module/#function-index","text":"01 - hist_nlines 02 - grep_history 03 - _chop_first_column 04 - _add_line_numbers 05 - _top_ten 06 - _unique_history 07 - ghf 08 - histdel 09 - histdeln","title":"Function Index"},{"location":"modules/history_module/#hist_nlines","text":"about : Get last N entries from bash history. N default is 100 lines group : history param : 1: An integer corresponding to the number of history lines to tail example : $ hist_nlines 200 function hist_nlines() { if [ $# -eq 0 ]; then num_lines=100; else num_lines=$1; fi history | tail -n $num_lines; }","title":"&gt;&gt; hist_nlines():"},{"location":"modules/history_module/#grep_history","text":"about : Grep bash history group : history example : $ grep_history ls function grep_history() { history | grep \"$1\" ; }","title":"&gt;&gt; grep_history():"},{"location":"modules/history_module/#_chop_first_column","text":"function _chop_first_column() { awk '{for (i=2; i<NF; i++) printf $i \" \"; print $NF}' ; }","title":"&gt;&gt; _chop_first_column():"},{"location":"modules/history_module/#_add_line_numbers","text":"function _add_line_numbers() { awk '{print NR \" \" $0}' ; }","title":"&gt;&gt; _add_line_numbers():"},{"location":"modules/history_module/#_top_ten","text":"function _top_ten() { sort | uniq -c | sort -r | head -n 10 ; }","title":"&gt;&gt; _top_ten():"},{"location":"modules/history_module/#_unique_history","text":"function _unique_history() { _chop_first_column | _top_ten | _chop_first_column | _add_line_numbers ; }","title":"&gt;&gt; _unique_history():"},{"location":"modules/history_module/#function-calls","text":"\u2514\u2500 _unique_history \u251c\u2500 _chop_first_column \u251c\u2500 _add_line_numbers \u2514\u2500 _top_ten","title":"Function Calls:"},{"location":"modules/history_module/#ghf","text":"about : Grep bash history Function group : history param : 1: With no args supplied, ghf returns the top 10 most used commands param : 2: With 1 search strings ghf returns top 10 uses for that term param : 3: With 2 search strings ghf executes a further search filter to the top10 example : $ grep_history mkdir function ghf() { if [ $# -eq 0 ]; then hist_nlines | _unique_history; fi if [ $# -eq 1 ]; then grep_history \"$1\" | _unique_history; fi if [ $# -eq 2 ]; then $(grep_history \"$1\" | _unique_history | grep ^$2 | _chop_first_column) fi }","title":"&gt;&gt; ghf():"},{"location":"modules/history_module/#function-calls_1","text":"\u2514\u2500 ghf \u251c\u2500 hist_nlines \u251c\u2500 grep_history \u2514\u2500 _unique_history \u251c\u2500 _chop_first_column \u251c\u2500 _add_line_numbers \u2514\u2500 _top_ten","title":"Function Calls:"},{"location":"modules/history_module/#histdel","text":"about : Delete lines of history between N -> N+n. Excluding histdel iteself. group : history param : 1: starting line to delete param : 2: ending line to delete example : $ histdel 1000 1033 function histdel() { for h in $(seq $1 $2 | tac); do history -d $h done history -d $(history 1 | awk '{print $1}') }","title":"&gt;&gt; histdel():"},{"location":"modules/history_module/#histdeln","text":"about : Delete last N lines of history including histdeln group : history param : 1: Number of lines to delete example : $ histdeln 10 function histdeln() { n=$(history 1 | awk '{print $1}') histdel $(( $n - $1 )) $(( $n - 1 )) }","title":"&gt;&gt; histdeln():"},{"location":"modules/history_module/#function-calls_2","text":"\u2514\u2500 histdeln \u2514\u2500 histdel","title":"Function Calls:"},{"location":"modules/history_module/#aliases","text":"Alias Name Code Notes hist history' shows all history gh history | grep ' grep all history","title":"Aliases"},{"location":"modules/installer_module/","text":"Install additional packages (in /home/bsgt/sys_bashrc/modules/installer_module.sh) Function Index 01 - get-latest-gh-release 02 - install-usr-local >> get-latest-gh-release(): about : Download & extract the latest package release from gihub releases page to /tmp. Use install-usr-local() to install correct file group : installers param : 1: package name. This is used to search an internal dictionary for github connection details example : $ get-latest-gh-release ccat function get-latest-gh-release() { local PACKAGE_NAME=$1 local GITHUB_USER=$(echo \"${GH_INSTALL_LIB[${PACKAGE_NAME}]}\" | cut -d, -f1) local GITHUB_REPO=$(echo \"${GH_INSTALL_LIB[${PACKAGE_NAME}]}\" | cut -d, -f2) local LNX_AMD64_RELEASE_URL=$(wget -q -nv -O- \"https://api.github.com/repos/$GITHUB_USER/$GITHUB_REPO/releases/latest\" 2>/dev/null | jq -r '.assets[] | select(.browser_download_url | contains(\"linux-amd64\")) | .browser_download_url') local REL_FILE=$(basename $LNX_AMD64_RELEASE_URL) echo \"Release file is: $REL_FILE\" wget -q -nv -O \"/tmp/${REL_FILE}\" $LNX_AMD64_RELEASE_URL if [ ! -f \"/tmp/${REL_FILE}\" ]; then echo -e \"\\nDidn't download $LNX_AMD64_RELEASE_URL properly. Where is /tmp/${REL_FILE}?\" exit 1 fi echo \"Now extracting $REL_FILE to /tmp\" cd /tmp extract $REL_FILE } >> install-usr-local(): about : Move program group : installers param : 1: Program file to move to /usr/local/bin. This function makes it executable example : $ install-usr-local ${SOME_PROG} function install-usr-local() { MYPROG=$1 sudo mv -fv $MYPROG /usr/local/bin sudo chmod -v +x /usr/local/bin/$(basename $MYPROG) }","title":"installer_module"},{"location":"modules/installer_module/#install-additional-packages","text":"(in /home/bsgt/sys_bashrc/modules/installer_module.sh)","title":"Install additional packages"},{"location":"modules/installer_module/#function-index","text":"01 - get-latest-gh-release 02 - install-usr-local","title":"Function Index"},{"location":"modules/installer_module/#get-latest-gh-release","text":"about : Download & extract the latest package release from gihub releases page to /tmp. Use install-usr-local() to install correct file group : installers param : 1: package name. This is used to search an internal dictionary for github connection details example : $ get-latest-gh-release ccat function get-latest-gh-release() { local PACKAGE_NAME=$1 local GITHUB_USER=$(echo \"${GH_INSTALL_LIB[${PACKAGE_NAME}]}\" | cut -d, -f1) local GITHUB_REPO=$(echo \"${GH_INSTALL_LIB[${PACKAGE_NAME}]}\" | cut -d, -f2) local LNX_AMD64_RELEASE_URL=$(wget -q -nv -O- \"https://api.github.com/repos/$GITHUB_USER/$GITHUB_REPO/releases/latest\" 2>/dev/null | jq -r '.assets[] | select(.browser_download_url | contains(\"linux-amd64\")) | .browser_download_url') local REL_FILE=$(basename $LNX_AMD64_RELEASE_URL) echo \"Release file is: $REL_FILE\" wget -q -nv -O \"/tmp/${REL_FILE}\" $LNX_AMD64_RELEASE_URL if [ ! -f \"/tmp/${REL_FILE}\" ]; then echo -e \"\\nDidn't download $LNX_AMD64_RELEASE_URL properly. Where is /tmp/${REL_FILE}?\" exit 1 fi echo \"Now extracting $REL_FILE to /tmp\" cd /tmp extract $REL_FILE }","title":"&gt;&gt; get-latest-gh-release():"},{"location":"modules/installer_module/#install-usr-local","text":"about : Move program group : installers param : 1: Program file to move to /usr/local/bin. This function makes it executable example : $ install-usr-local ${SOME_PROG} function install-usr-local() { MYPROG=$1 sudo mv -fv $MYPROG /usr/local/bin sudo chmod -v +x /usr/local/bin/$(basename $MYPROG) }","title":"&gt;&gt; install-usr-local():"},{"location":"modules/ssh_helper_module/","text":"Install additional packages (in /home/bsgt/sys_bashrc/modules/ssh_helper_module.sh) Function Index 01 - sshub 02 - sshec2 03 - sshbast 04 - qssh >> sshub(): about : Signs into AWS EC2 instance using pattern ubuntu@${address} group : ssh param : Ip address or FQDN example : sshub 172.17.0.1 function sshub() { HOST_ADDR=\"$1\" ssh -A ubuntu@${HOST_ADDR} } >> sshec2(): about : Signs into AWS EC2 instance using pattern ec2-user@${address} group : ssh param : Ip address or FQDN example : sshec2 172.17.0.1 function sshec2() { HOST_ADDR=\"$1\" ssh -A ec2-user@${HOST_ADDR} } >> sshbast(): about : ssh via jump host. You need to have added your .pem key via ssh-add -k. Edit this function ($USERNAME) to have the machine you want to jump to group : ssh param : Ip address or FQDN example : sshbast ${MachineYouWantToJumpTo} example : sshbast 185.22.33.68 function sshbast() { HOST_ADDR=\"$1\" ssh -A -J USERNAME@bastion.com ubuntu@${HOST_ADDR} } >> qssh(): about : Quick ssh using faster, less secure ssh ciphers group : ssh param : $username@$yourhost.com example : qssh $username@$yourhost.com example : qssh johng@185.22.33.68 function qssh() { USER_HOST_VAR=\"$1\" ssh -Y -C -c blowfish-cbc,arcfour $USER_HOST_VAR }","title":"ssh_helper_module"},{"location":"modules/ssh_helper_module/#install-additional-packages","text":"(in /home/bsgt/sys_bashrc/modules/ssh_helper_module.sh)","title":"Install additional packages"},{"location":"modules/ssh_helper_module/#function-index","text":"01 - sshub 02 - sshec2 03 - sshbast 04 - qssh","title":"Function Index"},{"location":"modules/ssh_helper_module/#sshub","text":"about : Signs into AWS EC2 instance using pattern ubuntu@${address} group : ssh param : Ip address or FQDN example : sshub 172.17.0.1 function sshub() { HOST_ADDR=\"$1\" ssh -A ubuntu@${HOST_ADDR} }","title":"&gt;&gt; sshub():"},{"location":"modules/ssh_helper_module/#sshec2","text":"about : Signs into AWS EC2 instance using pattern ec2-user@${address} group : ssh param : Ip address or FQDN example : sshec2 172.17.0.1 function sshec2() { HOST_ADDR=\"$1\" ssh -A ec2-user@${HOST_ADDR} }","title":"&gt;&gt; sshec2():"},{"location":"modules/ssh_helper_module/#sshbast","text":"about : ssh via jump host. You need to have added your .pem key via ssh-add -k. Edit this function ($USERNAME) to have the machine you want to jump to group : ssh param : Ip address or FQDN example : sshbast ${MachineYouWantToJumpTo} example : sshbast 185.22.33.68 function sshbast() { HOST_ADDR=\"$1\" ssh -A -J USERNAME@bastion.com ubuntu@${HOST_ADDR} }","title":"&gt;&gt; sshbast():"},{"location":"modules/ssh_helper_module/#qssh","text":"about : Quick ssh using faster, less secure ssh ciphers group : ssh param : $username@$yourhost.com example : qssh $username@$yourhost.com example : qssh johng@185.22.33.68 function qssh() { USER_HOST_VAR=\"$1\" ssh -Y -C -c blowfish-cbc,arcfour $USER_HOST_VAR }","title":"&gt;&gt; qssh():"},{"location":"undef/theme_settings/","text":"Undefined. Add composure cite-about to shell script file (in /home/bsgt/sys_bashrc/theme_settings.sh)","title":"Theme settings"},{"location":"undef/theme_settings/#undefined-add-composure-cite-about-to-shell-script-file","text":"(in /home/bsgt/sys_bashrc/theme_settings.sh)","title":"Undefined. Add composure cite-about to shell script file"}]}