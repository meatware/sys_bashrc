{
    "config": {
        "lang": [
            "en"
        ],
        "min_search_length": 3,
        "prebuild_index": false,
        "separator": "[\\s\\-]+"
    },
    "docs": [
        {
            "location": "",
            "text": "sys bashrc Premise Slimmed down sysadmin .bashrc that should hopefully have minimal system dependencies. Installation Clone repo, activate via symlink and backup your pre-existing .bashrc cd git clone https://github.com/meatware/sys_bashrc.git mv .bashrc .your_old_bashrc ln -fs ~/sys_bashrc/_bashrc ~/.bashrc source ~/.bashrc",
            "title": "Home"
        },
        {
            "location": "#sys-bashrc",
            "text": "",
            "title": "sys bashrc"
        },
        {
            "location": "#premise",
            "text": "Slimmed down sysadmin .bashrc that should hopefully have minimal system dependencies.",
            "title": "Premise"
        },
        {
            "location": "#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "#clone-repo-activate-via-symlink-and-backup-your-pre-existing-bashrc",
            "text": "cd git clone https://github.com/meatware/sys_bashrc.git mv .bashrc .your_old_bashrc ln -fs ~/sys_bashrc/_bashrc ~/.bashrc source ~/.bashrc",
            "title": "Clone repo, activate via symlink and backup your pre-existing .bashrc"
        },
        {
            "location": "aliases/_bash_aliases/",
            "text": "Undefined. Add composure cite-about to shell script file (in /home/bsgt/sys_bashrc/aliases/_bash_aliases.sh) Function Index 01 - check_alias_clashes() 02 - mkcd() 03 - up check_alias_clashes(): about : Check alias clashes group : aliases example : $ check_alias_clashes function check_alias_clashes() { alias | sed 's/^[^ ]* *\\|=.*$//g' | while read a; do printf \"%20.20s : %s\\n\" $a \"$(type -ta $a | tr '\\n' ' ')\" done | awk -F: '$2 ~ /file/' } Function Calls: \u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_show \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_export \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_comp \u2514\u2500 __awskeys_list \u2514\u2500 check_alias_clashes() \u2514\u2500 up mkcd(): about : Make a folder and go into it group : aliases param : 1: Name of the directory to create & enter example : mkcd my_new_dir function mkcd() { mkdir -p $1; cd $1 } Function Calls: \u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_show \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_export \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_comp \u2514\u2500 __awskeys_list \u2514\u2500 check_alias_clashes() \u2514\u2500 up \u2514\u2500 mkcd() \u2514\u2500 up up: about : Go up N directories in the file path group : aliases param : 1: Integer corresponding to number of directories to go up. example : $ up 3 function up () { local d=\"\" limit=$1 for ((i=1 ; i <= limit ; i++)) do d=$d/.. done d=$(echo $d | sed 's/^\\///') if [ -z \"$d\" ]; then d=.. fi cd $d } Function Calls: No functions called. Aliases Alias Name Code Descripion mkdir mkdir -p ls ls -ah --colo qs /bin/ls' fast ls with no options (many files in a directory) la ls -Alh' show hidden files lao ls -ld .?*' show ONLY hidden files lx ls -lXBh' sort by extension lk ls -lSrh' sort by size lc ls -lcrh' sort by change time lu ls -lurh' sort by access time lr ls -lRh' recursive ls lt ls -ltrh' sort by date lm ls -alh | less' pipe through 'less' lw ls -xAh' wide listing format ll ls -lth' long listing format labc ls -lap' alphabetical sort lf ls -l | egrep -v '^d'\" files only ldir ls -l | egrep '^d'\" directories only cd.. cd .. .. cd .. ... cd ../.. .... cd ../../.. ..... cd ../../../.. bashrc cd ${HOME}/sys_bashrc; ll' Switch to sys_bashrc directory in home and ls grep grep --colo egrep egrep --colo fgrep fgrep --colo quick-ssh ssh -Y -C -c blowfish-cbc,arcfour username@yourhost.com' Use faster ssh ciphers edbash gedit ~/.bashrc ~/sys_bashrc/bashrc_assets/*.sh & F5 source ~/.bashrc df df -x \"squashfs\"' Stop showing mounted snap in file system dfraw df\"' raw df with all options disabled",
            "title": "_bash_aliases"
        },
        {
            "location": "aliases/_bash_aliases/#undefined-add-composure-cite-about-to-shell-script-file",
            "text": "(in /home/bsgt/sys_bashrc/aliases/_bash_aliases.sh)",
            "title": "Undefined. Add composure cite-about to shell script file"
        },
        {
            "location": "aliases/_bash_aliases/#function-index",
            "text": "01 - check_alias_clashes() 02 - mkcd() 03 - up",
            "title": "Function Index"
        },
        {
            "location": "aliases/_bash_aliases/#check_alias_clashes",
            "text": "about : Check alias clashes group : aliases example : $ check_alias_clashes function check_alias_clashes() { alias | sed 's/^[^ ]* *\\|=.*$//g' | while read a; do printf \"%20.20s : %s\\n\" $a \"$(type -ta $a | tr '\\n' ' ')\" done | awk -F: '$2 ~ /file/' }",
            "title": "check_alias_clashes():"
        },
        {
            "location": "aliases/_bash_aliases/#function-calls",
            "text": "\u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_show \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_export \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_comp \u2514\u2500 __awskeys_list \u2514\u2500 check_alias_clashes() \u2514\u2500 up",
            "title": "Function Calls:"
        },
        {
            "location": "aliases/_bash_aliases/#mkcd",
            "text": "about : Make a folder and go into it group : aliases param : 1: Name of the directory to create & enter example : mkcd my_new_dir function mkcd() { mkdir -p $1; cd $1 }",
            "title": "mkcd():"
        },
        {
            "location": "aliases/_bash_aliases/#function-calls_1",
            "text": "\u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_show \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_export \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_comp \u2514\u2500 __awskeys_list \u2514\u2500 check_alias_clashes() \u2514\u2500 up \u2514\u2500 mkcd() \u2514\u2500 up",
            "title": "Function Calls:"
        },
        {
            "location": "aliases/_bash_aliases/#up",
            "text": "about : Go up N directories in the file path group : aliases param : 1: Integer corresponding to number of directories to go up. example : $ up 3 function up () { local d=\"\" limit=$1 for ((i=1 ; i <= limit ; i++)) do d=$d/.. done d=$(echo $d | sed 's/^\\///') if [ -z \"$d\" ]; then d=.. fi cd $d }",
            "title": "up:"
        },
        {
            "location": "aliases/_bash_aliases/#function-calls_2",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "aliases/_bash_aliases/#aliases",
            "text": "Alias Name Code Descripion mkdir mkdir -p ls ls -ah --colo qs /bin/ls' fast ls with no options (many files in a directory) la ls -Alh' show hidden files lao ls -ld .?*' show ONLY hidden files lx ls -lXBh' sort by extension lk ls -lSrh' sort by size lc ls -lcrh' sort by change time lu ls -lurh' sort by access time lr ls -lRh' recursive ls lt ls -ltrh' sort by date lm ls -alh | less' pipe through 'less' lw ls -xAh' wide listing format ll ls -lth' long listing format labc ls -lap' alphabetical sort lf ls -l | egrep -v '^d'\" files only ldir ls -l | egrep '^d'\" directories only cd.. cd .. .. cd .. ... cd ../.. .... cd ../../.. ..... cd ../../../.. bashrc cd ${HOME}/sys_bashrc; ll' Switch to sys_bashrc directory in home and ls grep grep --colo egrep egrep --colo fgrep fgrep --colo quick-ssh ssh -Y -C -c blowfish-cbc,arcfour username@yourhost.com' Use faster ssh ciphers edbash gedit ~/.bashrc ~/sys_bashrc/bashrc_assets/*.sh & F5 source ~/.bashrc df df -x \"squashfs\"' Stop showing mounted snap in file system dfraw df\"' raw df with all options disabled",
            "title": "Aliases"
        },
        {
            "location": "aliases/apt_aliases/",
            "text": "Apt & dpkg aliases for Ubuntu and Debian distros. (in /home/bsgt/sys_bashrc/aliases/apt_aliases.sh) Function Index 01 - ubupdate() ubupdate(): about : Ubdate & upgrade ubuntu via apt. Then run apt auto-remove group : base example : ubupdate function ubupdate() { sudo apt update sudo apt upgrade -y sudo apt auto-remove } Function Calls: No functions called. Aliases Alias Name Code Descripion apts apt-cache search aptshow apt-cache show aptinst sudo apt-get install -V aptupd sudo apt-get update aptupg sudo apt-get dist-upgrade -V && sudo apt-get autoremove aptupgd sudo apt-get update && sudo apt-get dist-upgrade -V && sudo apt-get autoremove aptrm sudo apt-get remove aptpurge sudo apt-get remove --purge chkup /usr/lib/update-notifier/apt-check -p --human-readable chkboot cat /var/run/reboot-required pkgfiles dpkg --listfiles",
            "title": "apt_aliases"
        },
        {
            "location": "aliases/apt_aliases/#apt-dpkg-aliases-for-ubuntu-and-debian-distros",
            "text": "(in /home/bsgt/sys_bashrc/aliases/apt_aliases.sh)",
            "title": "Apt &amp; dpkg aliases for Ubuntu and Debian distros."
        },
        {
            "location": "aliases/apt_aliases/#function-index",
            "text": "01 - ubupdate()",
            "title": "Function Index"
        },
        {
            "location": "aliases/apt_aliases/#ubupdate",
            "text": "about : Ubdate & upgrade ubuntu via apt. Then run apt auto-remove group : base example : ubupdate function ubupdate() { sudo apt update sudo apt upgrade -y sudo apt auto-remove }",
            "title": "ubupdate():"
        },
        {
            "location": "aliases/apt_aliases/#function-calls",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "aliases/apt_aliases/#aliases",
            "text": "Alias Name Code Descripion apts apt-cache search aptshow apt-cache show aptinst sudo apt-get install -V aptupd sudo apt-get update aptupg sudo apt-get dist-upgrade -V && sudo apt-get autoremove aptupgd sudo apt-get update && sudo apt-get dist-upgrade -V && sudo apt-get autoremove aptrm sudo apt-get remove aptpurge sudo apt-get remove --purge chkup /usr/lib/update-notifier/apt-check -p --human-readable chkboot cat /var/run/reboot-required pkgfiles dpkg --listfiles",
            "title": "Aliases"
        },
        {
            "location": "aliases/docker-compose_aliases/",
            "text": "docker-compose abbreviations (in /home/bsgt/sys_bashrc/aliases/docker-compose_aliases.sh) Aliases Alias Name Code Descripion dco docker-compose dcofresh docker-compose-fresh dcol docker-compose logs -f --tail 100 dcou docker-compose up dcod docker-compose down",
            "title": "docker-compose_aliases"
        },
        {
            "location": "aliases/docker-compose_aliases/#docker-compose-abbreviations",
            "text": "(in /home/bsgt/sys_bashrc/aliases/docker-compose_aliases.sh)",
            "title": "docker-compose abbreviations"
        },
        {
            "location": "aliases/docker-compose_aliases/#aliases",
            "text": "Alias Name Code Descripion dco docker-compose dcofresh docker-compose-fresh dcol docker-compose logs -f --tail 100 dcou docker-compose up dcod docker-compose down",
            "title": "Aliases"
        },
        {
            "location": "aliases/docker_aliases/",
            "text": "docker abbreviations (in /home/bsgt/sys_bashrc/aliases/docker_aliases.sh) Aliases Alias Name Code Descripion dk docker dklc docker ps -l' List last Docker container dklcid docker ps -l -q' List last Docker container ID dklcip docker inspect -f \"{{.NetworkSettings.IPAddress}}\" $(docker ps -l -q)' Get IP of last Docker container dkps docker ps' List running Docker containers dkpsa docker ps -a' List all Docker containers dki docker images' List Docker images dkrmac docker rm $(docker ps -a -q)' Delete all Docker containers dkelc docker exec -it $(dklcid) bash --login' Enter last container (works with Docker 1.3 and above) dkrmflast docker rm -f $(dklcid) dkbash dkelc dkex docker exec -it ' Useful to run any commands into container without leaving host dkri docker run --rm -i dkrit docker run --rm -it dkip docker image prune -a -f dkvp docker volume prune -f dksp docker system prune -a -f dkpruneall docker system prune -a -f --all --volumes dm docker-machine dmx docker-machine ssh dks docker service dkrm docker rm dkl docker logs dklf docker logs -f dkflush docker rm $(docker ps --no-trunc -aq) dkflush2 docker rmi $(docker images --filter \"danglin dkt docker stats --format \"table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.NetIO}}\" dkps docker ps",
            "title": "docker_aliases"
        },
        {
            "location": "aliases/docker_aliases/#docker-abbreviations",
            "text": "(in /home/bsgt/sys_bashrc/aliases/docker_aliases.sh)",
            "title": "docker abbreviations"
        },
        {
            "location": "aliases/docker_aliases/#aliases",
            "text": "Alias Name Code Descripion dk docker dklc docker ps -l' List last Docker container dklcid docker ps -l -q' List last Docker container ID dklcip docker inspect -f \"{{.NetworkSettings.IPAddress}}\" $(docker ps -l -q)' Get IP of last Docker container dkps docker ps' List running Docker containers dkpsa docker ps -a' List all Docker containers dki docker images' List Docker images dkrmac docker rm $(docker ps -a -q)' Delete all Docker containers dkelc docker exec -it $(dklcid) bash --login' Enter last container (works with Docker 1.3 and above) dkrmflast docker rm -f $(dklcid) dkbash dkelc dkex docker exec -it ' Useful to run any commands into container without leaving host dkri docker run --rm -i dkrit docker run --rm -it dkip docker image prune -a -f dkvp docker volume prune -f dksp docker system prune -a -f dkpruneall docker system prune -a -f --all --volumes dm docker-machine dmx docker-machine ssh dks docker service dkrm docker rm dkl docker logs dklf docker logs -f dkflush docker rm $(docker ps --no-trunc -aq) dkflush2 docker rmi $(docker images --filter \"danglin dkt docker stats --format \"table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.NetIO}}\" dkps docker ps",
            "title": "Aliases"
        },
        {
            "location": "aliases/git_aliases/",
            "text": "common git abbreviations (in /home/bsgt/sys_bashrc/aliases/git_aliases.sh) Aliases Alias Name Code Descripion gdiffh git diff HEAD gpllo git pull origin gpllocb git pull origin $(git rev-parse --abbrev-ref HEAD)' git pull origin current branch gp git push gpo git push origin gpocb git push origin $(git rev-parse --abbrev-ref HEAD)' git push origin current branch gcl git clone ga git add grm git rm gap git add -p gall git add -A gf git fetch --all --prune gft git fetch --all --prune --tags gfv git fetch --all --prune --verbose gftv git fetch --all --prune --tags --verbose gus git reset HEAD gpristine git reset --hard && git clean -dfx gclean git clean -fd gm git merge gmv git mv g git get git gs git status gss git status -s gsu git submodule update --init --recursive gl git pull glum git pull upstream master gpr git pull --rebase gpp git pull && git push gup git fetch && git rebase gp git push gpo git push origin gpu git push --set-upstream gpuo git push --set-upstream origin gpuoc git push --set-upstream origin $(git symbolic-ref --short HEAD) gpom git push origin master gr git remote grv git remote -v gra git remote add gd git diff gds git diff --staged gdv git diff -w \"$@\" | vim -R - gc git commit -v gca git commit -v -a gcm git commit -v -m gcam git commit -v -am gci git commit --interactive gb git branch gba git branch -a gbt git branch --track gbm git branch -m gbd git branch -d gbD git branch -D gcount git shortlog -sn gcp git cherry-pick gcpx git cherry-pick -x gco git checkout gcom git checkout master gcb git checkout -b gcob git checkout -b gct git checkout --track gcpd git checkout master; git pull; git branch -D gexport git archive --format zip --output gdel git branch -D gmu git fetch origin -v; git fetch upstream -v; git merge upstream/master gll git log --graph --prett gg git log --graph --prett ggs gg --stat gsl git shortlog -sn gwc git whatchanged gt git tag gta git tag -a gtd git tag -d gtl git tag -l gpatch git format-patch -1 gnew git log HEAD@{1}..HEAD@{0} gcaa git commit -a --amend -C HEAD ggui git gui gcsam git commit -S -am gst git stash gstb git stash branch gstd git stash drop gstl git stash list gstp git stash pop ght cd \"$(git rev-parse --show-toplevel)\" gu git ls-files . --exclude-standard --others",
            "title": "git_aliases"
        },
        {
            "location": "aliases/git_aliases/#common-git-abbreviations",
            "text": "(in /home/bsgt/sys_bashrc/aliases/git_aliases.sh)",
            "title": "common git abbreviations"
        },
        {
            "location": "aliases/git_aliases/#aliases",
            "text": "Alias Name Code Descripion gdiffh git diff HEAD gpllo git pull origin gpllocb git pull origin $(git rev-parse --abbrev-ref HEAD)' git pull origin current branch gp git push gpo git push origin gpocb git push origin $(git rev-parse --abbrev-ref HEAD)' git push origin current branch gcl git clone ga git add grm git rm gap git add -p gall git add -A gf git fetch --all --prune gft git fetch --all --prune --tags gfv git fetch --all --prune --verbose gftv git fetch --all --prune --tags --verbose gus git reset HEAD gpristine git reset --hard && git clean -dfx gclean git clean -fd gm git merge gmv git mv g git get git gs git status gss git status -s gsu git submodule update --init --recursive gl git pull glum git pull upstream master gpr git pull --rebase gpp git pull && git push gup git fetch && git rebase gp git push gpo git push origin gpu git push --set-upstream gpuo git push --set-upstream origin gpuoc git push --set-upstream origin $(git symbolic-ref --short HEAD) gpom git push origin master gr git remote grv git remote -v gra git remote add gd git diff gds git diff --staged gdv git diff -w \"$@\" | vim -R - gc git commit -v gca git commit -v -a gcm git commit -v -m gcam git commit -v -am gci git commit --interactive gb git branch gba git branch -a gbt git branch --track gbm git branch -m gbd git branch -d gbD git branch -D gcount git shortlog -sn gcp git cherry-pick gcpx git cherry-pick -x gco git checkout gcom git checkout master gcb git checkout -b gcob git checkout -b gct git checkout --track gcpd git checkout master; git pull; git branch -D gexport git archive --format zip --output gdel git branch -D gmu git fetch origin -v; git fetch upstream -v; git merge upstream/master gll git log --graph --prett gg git log --graph --prett ggs gg --stat gsl git shortlog -sn gwc git whatchanged gt git tag gta git tag -a gtd git tag -d gtl git tag -l gpatch git format-patch -1 gnew git log HEAD@{1}..HEAD@{0} gcaa git commit -a --amend -C HEAD ggui git gui gcsam git commit -S -am gst git stash gstb git stash branch gstd git stash drop gstl git stash list gstp git stash pop ght cd \"$(git rev-parse --show-toplevel)\" gu git ls-files . --exclude-standard --others",
            "title": "Aliases"
        },
        {
            "location": "aliases/kubectl_aliases/",
            "text": "kubectl aliases (in /home/bsgt/sys_bashrc/aliases/kubectl_aliases.sh) Aliases Alias Name Code Descripion kc kubectl kcgp kubectl get pods kcgd kubectl get deployments kcgn kubectl get nodes kcdp kubectl describe pod kcdd kubectl describe deployment kcdn kubectl describe node kcgpan kubectl get pods --all-namespaces kcgdan kubectl get deployments --all-namespaces kcnetshoot kubectl run --generato",
            "title": "kubectl_aliases"
        },
        {
            "location": "aliases/kubectl_aliases/#kubectl-aliases",
            "text": "(in /home/bsgt/sys_bashrc/aliases/kubectl_aliases.sh)",
            "title": "kubectl aliases"
        },
        {
            "location": "aliases/kubectl_aliases/#aliases",
            "text": "Alias Name Code Descripion kc kubectl kcgp kubectl get pods kcgd kubectl get deployments kcgn kubectl get nodes kcdp kubectl describe pod kcdd kubectl describe deployment kcdn kubectl describe node kcgpan kubectl get pods --all-namespaces kcgdan kubectl get deployments --all-namespaces kcnetshoot kubectl run --generato",
            "title": "Aliases"
        },
        {
            "location": "aliases/terraform_aliases/",
            "text": "Terraform abbreviations (in /home/bsgt/sys_bashrc/aliases/terraform_aliases.sh) Aliases Alias Name Code Descripion tf terraform tfv terraform validate tfp terraform plan tfa terraform apply tfd terraform destory",
            "title": "terraform_aliases"
        },
        {
            "location": "aliases/terraform_aliases/#terraform-abbreviations",
            "text": "(in /home/bsgt/sys_bashrc/aliases/terraform_aliases.sh)",
            "title": "Terraform abbreviations"
        },
        {
            "location": "aliases/terraform_aliases/#aliases",
            "text": "Alias Name Code Descripion tf terraform tfv terraform validate tfp terraform plan tfa terraform apply tfd terraform destory",
            "title": "Aliases"
        },
        {
            "location": "completion/awscli_completion/",
            "text": "AWS CLI Completions (in /home/bsgt/sys_bashrc/completions/awscli_completion.sh) Aliases Alias Name Code Descripion awsc aws configure",
            "title": "awscli_completion"
        },
        {
            "location": "completion/awscli_completion/#aws-cli-completions",
            "text": "(in /home/bsgt/sys_bashrc/completions/awscli_completion.sh)",
            "title": "AWS CLI Completions"
        },
        {
            "location": "completion/awscli_completion/#aliases",
            "text": "Alias Name Code Descripion awsc aws configure",
            "title": "Aliases"
        },
        {
            "location": "completion/docker-compose_completion/",
            "text": "docker-compose Completions (in /home/bsgt/sys_bashrc/completions/docker-compose_completion.sh)",
            "title": "docker-compose_completion"
        },
        {
            "location": "completion/docker-compose_completion/#docker-compose-completions",
            "text": "(in /home/bsgt/sys_bashrc/completions/docker-compose_completion.sh)",
            "title": "docker-compose Completions"
        },
        {
            "location": "completion/docker_completion/",
            "text": "Docker Completions (in /home/bsgt/sys_bashrc/completions/docker_completion.sh)",
            "title": "docker_completion"
        },
        {
            "location": "completion/docker_completion/#docker-completions",
            "text": "(in /home/bsgt/sys_bashrc/completions/docker_completion.sh)",
            "title": "Docker Completions"
        },
        {
            "location": "completion/git_completion/",
            "text": "GIT Completions (in /home/bsgt/sys_bashrc/completions/git_completion.sh)",
            "title": "git_completion"
        },
        {
            "location": "completion/git_completion/#git-completions",
            "text": "(in /home/bsgt/sys_bashrc/completions/git_completion.sh)",
            "title": "GIT Completions"
        },
        {
            "location": "completion/terraform_completion/",
            "text": "Terraform completions (in /home/bsgt/sys_bashrc/completions/terraform_completion.sh)",
            "title": "terraform_completion"
        },
        {
            "location": "completion/terraform_completion/#terraform-completions",
            "text": "(in /home/bsgt/sys_bashrc/completions/terraform_completion.sh)",
            "title": "Terraform completions"
        },
        {
            "location": "internal/internal_colour_defs/",
            "text": "Undefined. Add composure cite-about to shell script file (in /home/bsgt/sys_bashrc/bashrc_assets/internal_colour_defs.sh)",
            "title": "internal_colour_defs"
        },
        {
            "location": "internal/internal_colour_defs/#undefined-add-composure-cite-about-to-shell-script-file",
            "text": "(in /home/bsgt/sys_bashrc/bashrc_assets/internal_colour_defs.sh)",
            "title": "Undefined. Add composure cite-about to shell script file"
        },
        {
            "location": "internal/internal_colour_functions/",
            "text": "Undefined. Add composure cite-about to shell script file (in /home/bsgt/sys_bashrc/bashrc_assets/internal_colour_functions.sh) Function Index 01 - _check_integer() 02 - _check_theme_range() 03 - colsw(){ 04 - colsw_path(){ 05 - col_set_prompt_style() 06 - csp1() 07 - csp2() 08 - csp3() 09 - col_cp_root(){ 10 - col_ssh(){ 11 - _virtualenv_min_info(){ 12 - _virtualenv_info(){ 13 - _ssh_info(){ 14 - _aws_info(){ _check_integer(): function _check_integer() { local MYINT=\"$1\" local REX=^[0-9]*$ if [[ \"$MYINT\" =~ $REX ]]; then echo \"$MYINT\" else echo 0 fi } Function Calls: No functions called. _check_theme_range(): function _check_theme_range() { local MYINT=\"$1\" local MAX_LEN=\"$2\" if [ \"$MYINT\" -ge 0 -a \"$MYINT\" -lt \"$MAX_LEN\" ]; then echo \"$MYINT\" else echo 0 fi } Function Calls: No functions called. colsw(){: function colsw(){ local NEWCOL_IDX=${1} local NEWCOL_IDX=$(_check_integer \"${NEWCOL_IDX}\") local NEWCOL_IDX=$(_check_theme_range \"${NEWCOL_IDX}\" \"$BARCOL_ARR_LEN\") cp ${HOME}/sys_bashrc/theme_settings.sh ${HOME}/sys_bashrc/theme_settings_BACKUP.sh local CURRCOL_IDX=$(grep \"SET_THEME_VAR=\" ${HOME}/sys_bashrc/theme_settings.sh | grep -v sed | tr '=' ' ' | awk '{print $2}') local CURRPATH_IDX=$(grep \"SET_PATHCOL_VAR=\" ${HOME}/sys_bashrc/theme_settings.sh | grep -v sed | tr '=' ' ' | awk '{print $2}' | sed 's/\\\"//g') SET_THEME_VAR=\"${SET_THEME_VAR:=0}\" SET_BARCOL=\"${SET_BARCOL:=\\[\\033[38;5;202m\\]}\" SET_TXTCOL=\"${SET_TXTCOL:=\\[\\033[38;5;221m\\]}\" SET_PATHCOL_VAR=\"${SET_PATHCOL_VAR:=1}\" SET_PATHCOL=\"${SET_PATHCOL:=\\[\\033[0;37m\\]}\" cat << BACON > ${HOME}/sys_bashrc/theme_settings.sh SET_THEME_VAR=\"${NEWCOL_IDX}\" SET_BARCOL=\"${BARCOL_ARR[${NEWCOL_IDX}]}\" SET_TXTCOL=\"${TXTCOL_ARR[${NEWCOL_IDX}]}\" SET_PATHCOL_VAR=\"${CURRPATH_IDX}\" SET_PATHCOL=\"${PATH_COLS_ARR[${CURRPATH_IDX}]}\" BACON PRINTCOLVAR=\"ON\" if [ $PRINTCOLVAR = \"ON\" ]; then PATHCOL_NAME=${PATH_COLS_ARR[${CURRPATH_IDX}]} BARCOL_NAME=${BARCOL_ARR[${THEME_VAR}]} TXTCOL_NAME=${TXTCOL_ARR[${THEME_VAR}]} echo \"BARCOL = ${BARCOL_NAME}\" echo \"TXTCOL = ${TXTCOL_NAME}\" echo \"PATHCOL = ${PATHCOL_NAME}\" fi source ${HOME}/sys_bashrc/_bashrc } Function Calls: No functions called. colsw_path(){: function colsw_path(){ local NEWPATH_IDX=${1} NEWPATH_IDX=$(_check_integer \"${NEWPATH_IDX}\") NEWPATH_IDX=$(_check_theme_range \"${NEWPATH_IDX}\" \"$PATHCOLS_ARR_LEN\") cp ${HOME}/sys_bashrc/theme_settings.sh ${HOME}/sys_bashrc/theme_settings_BACKUP.sh local NEWPATH_COL=\"${PATH_COLS_ARR[${NEWPATH_IDX}]}\" sed -i \"/^SET_PATHCOL/d\" ${HOME}/sys_bashrc/theme_settings.sh cat << CHEESE >> ${HOME}/sys_bashrc/theme_settings.sh SET_PATHCOL_VAR=\"${NEWPATH_IDX}\" SET_PATHCOL=\"${NEWPATH_COL}\" CHEESE echo \"No of Themes: $BARCOL_ARR_LEN\" source ${HOME}/sys_bashrc/_bashrc } Function Calls: No functions called. col_set_prompt_style(): function col_set_prompt_style() { local CHOICE=\"$1\" if [[ \"$CHOICE\" =~ (full|mid) ]]; then export SET_FULL_PROMPT=$CHOICE source ~/.bashrc else echo \"enter 'full' or 'mid'\" fi } Function Calls: No functions called. csp1(): function csp1() { col_set_prompt_style full } Function Calls: No functions called. csp2(): function csp2() { col_set_prompt_style mid } Function Calls: No functions called. csp3(): function csp3() { unset SET_FULL_PROMPT export SET_FULL_PROMPT= source ~/.bashrc } Function Calls: No functions called. col_cp_root(){: function col_cp_root(){ sudo mv /root/.bashrc /root/.your_old_bashrc sudo cp -rf ${HOME}/sys_bashrc /root/ sudo ln -s /root/sys_bashrc/_bashrc /root/.bashrc sudo su root source /root/.bashrc } Function Calls: No functions called. col_ssh(){: function col_ssh(){ rsync -av ${HOME}/sys_bashrc ${1}:~/ ssh -A \"${1}\" 'mv ~/.bashrc ~/.your_old_bashrc; ln -s ${HOME}/sys_bashrc/_bashrc ~/.bashrc' } Function Calls: No functions called. _virtualenv_min_info(){: function _virtualenv_min_info(){ if [[ -n \"$VIRTUAL_ENV\" ]]; then local venv=\"${VIRTUAL_ENV##*/}\" else local venv=\"\" fi [[ -n \"$venv\" ]] && echo \"$venv\" } Function Calls: No functions called. _virtualenv_info(){: function _virtualenv_info(){ local venv=$(_virtualenv_min_info) [[ -n \"$venv\" ]] && echo \"${BARCOL}\u2500${TXTCOL}[${HIRed}$venv${TXTCOL}]\" } Function Calls: No functions called. _ssh_info(){: function _ssh_info(){ ssh_state=\"\" [[ -n \"$ssh_state\" ]] && echo \"${BARCOL}\u2500${TXTCOL}[${HIRed}${ssh_state}${TXTCOL}]\" } Function Calls: No functions called. _aws_info(){: function _aws_info(){ aws_profile=\"$(printenv AWS_PROFILE)\" if [[ -n \"${aws_profile}\" ]]; then set_aws_profile=${aws_profile} else set_aws_profile=\"\" fi [[ -n \"$set_aws_profile\" ]] && echo \"${BARCOL}\u2500${TXTCOL}[${HIRed}${set_aws_profile}${TXTCOL}]\" } _pwdtail () { pwd | awk -F/ '{nlast = NF -1;print $nlast\"/\"$NF}' #TODO: Use for something? } Function Calls: No functions called.",
            "title": "internal_colour_functions"
        },
        {
            "location": "internal/internal_colour_functions/#undefined-add-composure-cite-about-to-shell-script-file",
            "text": "(in /home/bsgt/sys_bashrc/bashrc_assets/internal_colour_functions.sh)",
            "title": "Undefined. Add composure cite-about to shell script file"
        },
        {
            "location": "internal/internal_colour_functions/#function-index",
            "text": "01 - _check_integer() 02 - _check_theme_range() 03 - colsw(){ 04 - colsw_path(){ 05 - col_set_prompt_style() 06 - csp1() 07 - csp2() 08 - csp3() 09 - col_cp_root(){ 10 - col_ssh(){ 11 - _virtualenv_min_info(){ 12 - _virtualenv_info(){ 13 - _ssh_info(){ 14 - _aws_info(){",
            "title": "Function Index"
        },
        {
            "location": "internal/internal_colour_functions/#_check_integer",
            "text": "function _check_integer() { local MYINT=\"$1\" local REX=^[0-9]*$ if [[ \"$MYINT\" =~ $REX ]]; then echo \"$MYINT\" else echo 0 fi }",
            "title": "_check_integer():"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_colour_functions/#_check_theme_range",
            "text": "function _check_theme_range() { local MYINT=\"$1\" local MAX_LEN=\"$2\" if [ \"$MYINT\" -ge 0 -a \"$MYINT\" -lt \"$MAX_LEN\" ]; then echo \"$MYINT\" else echo 0 fi }",
            "title": "_check_theme_range():"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls_1",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_colour_functions/#colsw",
            "text": "function colsw(){ local NEWCOL_IDX=${1} local NEWCOL_IDX=$(_check_integer \"${NEWCOL_IDX}\") local NEWCOL_IDX=$(_check_theme_range \"${NEWCOL_IDX}\" \"$BARCOL_ARR_LEN\") cp ${HOME}/sys_bashrc/theme_settings.sh ${HOME}/sys_bashrc/theme_settings_BACKUP.sh local CURRCOL_IDX=$(grep \"SET_THEME_VAR=\" ${HOME}/sys_bashrc/theme_settings.sh | grep -v sed | tr '=' ' ' | awk '{print $2}') local CURRPATH_IDX=$(grep \"SET_PATHCOL_VAR=\" ${HOME}/sys_bashrc/theme_settings.sh | grep -v sed | tr '=' ' ' | awk '{print $2}' | sed 's/\\\"//g') SET_THEME_VAR=\"${SET_THEME_VAR:=0}\" SET_BARCOL=\"${SET_BARCOL:=\\[\\033[38;5;202m\\]}\" SET_TXTCOL=\"${SET_TXTCOL:=\\[\\033[38;5;221m\\]}\" SET_PATHCOL_VAR=\"${SET_PATHCOL_VAR:=1}\" SET_PATHCOL=\"${SET_PATHCOL:=\\[\\033[0;37m\\]}\" cat << BACON > ${HOME}/sys_bashrc/theme_settings.sh SET_THEME_VAR=\"${NEWCOL_IDX}\" SET_BARCOL=\"${BARCOL_ARR[${NEWCOL_IDX}]}\" SET_TXTCOL=\"${TXTCOL_ARR[${NEWCOL_IDX}]}\" SET_PATHCOL_VAR=\"${CURRPATH_IDX}\" SET_PATHCOL=\"${PATH_COLS_ARR[${CURRPATH_IDX}]}\" BACON PRINTCOLVAR=\"ON\" if [ $PRINTCOLVAR = \"ON\" ]; then PATHCOL_NAME=${PATH_COLS_ARR[${CURRPATH_IDX}]} BARCOL_NAME=${BARCOL_ARR[${THEME_VAR}]} TXTCOL_NAME=${TXTCOL_ARR[${THEME_VAR}]} echo \"BARCOL = ${BARCOL_NAME}\" echo \"TXTCOL = ${TXTCOL_NAME}\" echo \"PATHCOL = ${PATHCOL_NAME}\" fi source ${HOME}/sys_bashrc/_bashrc }",
            "title": "colsw(){:"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls_2",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_colour_functions/#colsw_path",
            "text": "function colsw_path(){ local NEWPATH_IDX=${1} NEWPATH_IDX=$(_check_integer \"${NEWPATH_IDX}\") NEWPATH_IDX=$(_check_theme_range \"${NEWPATH_IDX}\" \"$PATHCOLS_ARR_LEN\") cp ${HOME}/sys_bashrc/theme_settings.sh ${HOME}/sys_bashrc/theme_settings_BACKUP.sh local NEWPATH_COL=\"${PATH_COLS_ARR[${NEWPATH_IDX}]}\" sed -i \"/^SET_PATHCOL/d\" ${HOME}/sys_bashrc/theme_settings.sh cat << CHEESE >> ${HOME}/sys_bashrc/theme_settings.sh SET_PATHCOL_VAR=\"${NEWPATH_IDX}\" SET_PATHCOL=\"${NEWPATH_COL}\" CHEESE echo \"No of Themes: $BARCOL_ARR_LEN\" source ${HOME}/sys_bashrc/_bashrc }",
            "title": "colsw_path(){:"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls_3",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_colour_functions/#col_set_prompt_style",
            "text": "function col_set_prompt_style() { local CHOICE=\"$1\" if [[ \"$CHOICE\" =~ (full|mid) ]]; then export SET_FULL_PROMPT=$CHOICE source ~/.bashrc else echo \"enter 'full' or 'mid'\" fi }",
            "title": "col_set_prompt_style():"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls_4",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_colour_functions/#csp1",
            "text": "function csp1() { col_set_prompt_style full }",
            "title": "csp1():"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls_5",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_colour_functions/#csp2",
            "text": "function csp2() { col_set_prompt_style mid }",
            "title": "csp2():"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls_6",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_colour_functions/#csp3",
            "text": "function csp3() { unset SET_FULL_PROMPT export SET_FULL_PROMPT= source ~/.bashrc }",
            "title": "csp3():"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls_7",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_colour_functions/#col_cp_root",
            "text": "function col_cp_root(){ sudo mv /root/.bashrc /root/.your_old_bashrc sudo cp -rf ${HOME}/sys_bashrc /root/ sudo ln -s /root/sys_bashrc/_bashrc /root/.bashrc sudo su root source /root/.bashrc }",
            "title": "col_cp_root(){:"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls_8",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_colour_functions/#col_ssh",
            "text": "function col_ssh(){ rsync -av ${HOME}/sys_bashrc ${1}:~/ ssh -A \"${1}\" 'mv ~/.bashrc ~/.your_old_bashrc; ln -s ${HOME}/sys_bashrc/_bashrc ~/.bashrc' }",
            "title": "col_ssh(){:"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls_9",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_colour_functions/#_virtualenv_min_info",
            "text": "function _virtualenv_min_info(){ if [[ -n \"$VIRTUAL_ENV\" ]]; then local venv=\"${VIRTUAL_ENV##*/}\" else local venv=\"\" fi [[ -n \"$venv\" ]] && echo \"$venv\" }",
            "title": "_virtualenv_min_info(){:"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls_10",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_colour_functions/#_virtualenv_info",
            "text": "function _virtualenv_info(){ local venv=$(_virtualenv_min_info) [[ -n \"$venv\" ]] && echo \"${BARCOL}\u2500${TXTCOL}[${HIRed}$venv${TXTCOL}]\" }",
            "title": "_virtualenv_info(){:"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls_11",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_colour_functions/#_ssh_info",
            "text": "function _ssh_info(){ ssh_state=\"\" [[ -n \"$ssh_state\" ]] && echo \"${BARCOL}\u2500${TXTCOL}[${HIRed}${ssh_state}${TXTCOL}]\" }",
            "title": "_ssh_info(){:"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls_12",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_colour_functions/#_aws_info",
            "text": "function _aws_info(){ aws_profile=\"$(printenv AWS_PROFILE)\" if [[ -n \"${aws_profile}\" ]]; then set_aws_profile=${aws_profile} else set_aws_profile=\"\" fi [[ -n \"$set_aws_profile\" ]] && echo \"${BARCOL}\u2500${TXTCOL}[${HIRed}${set_aws_profile}${TXTCOL}]\" } _pwdtail () { pwd | awk -F/ '{nlast = NF -1;print $nlast\"/\"$NF}' #TODO: Use for something? }",
            "title": "_aws_info(){:"
        },
        {
            "location": "internal/internal_colour_functions/#function-calls_13",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_git_functions/",
            "text": "Undefined. Add composure cite-about to shell script file (in /home/bsgt/sys_bashrc/bashrc_assets/internal_git_functions.sh) Function Index 01 - _parse_git() 02 - _parse_git_minimal() 03 - _find_git_branch() 04 - _get_git_commid() 05 - _find_git_dirty() 06 - _git_com_diff() 07 - _format_git_stats() _parse_git(): function _parse_git() { git_str=$(_find_git_branch) if [[ ! -z \"$git_str\" ]]; then git_str=\"${BARCOL}\u2500\u2500${TXTCOL}[$(_git_com_diff)${git_str}$(_find_git_dirty)\" git_str=\"${git_str}$(_format_git_stats)\" git_str=\"${git_str}${TXTCOL}]\" echo $git_str else echo \"\" fi } Function Calls: No functions called. _parse_git_minimal(): function _parse_git_minimal() { git_str=$(_find_git_branch) if [[ ! -z \"$git_str\" ]]; then git_str=\"${BARCOL}\u2500${TXTCOL}(${git_str}$(_find_git_dirty)\" git_str=\"${git_str}${TXTCOL})\" echo $git_str else echo \"\" fi } Function Calls: No functions called. _find_git_branch(): function _find_git_branch() { local branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null) if [[ ! -z \"$branch\" ]]; then if [[ \"$branch\" == \"HEAD\" ]]; then branch_fmt=\"${RED}!detached\" else branch_fmt=\"${TXTCOL}${branch}\" fi git_branch=\"${branch_fmt}\" else git_branch=\"\" fi echo $git_branch } Function Calls: No functions called. _get_git_commid(): function _get_git_commid() { curr_commitid=$(git rev-parse --short HEAD 2> /dev/null) prev_commitid=$(git rev-list --max-count=2 --abbrev-commit HEAD | tail -1) echo \"${BARCOL}\u2500\u2500${TXTCOL}[c~${curr_commitid}]${BARCOL}\u2500\u2500${TXTCOL}[p~${prev_commitid}]\" } Function Calls: No functions called. _find_git_dirty(): function _find_git_dirty() { gdirtstr=$(git status 2> /dev/null | tail -n1 | sed 's/,//' | awk '{print $1, $2, $3}') if [[ ${gdirtstr} == \"nothing to commit\" ]] then dirty_state=\"\" elif [[ ${gdirtstr} == \"\" ]] then dirty_state=\"\" else dirty_state='\\[\\033[01;38;5;221m\\]*' fi echo $dirty_state } Function Calls: No functions called. _git_com_diff(): function _git_com_diff() { gbranchrel=$(git status 2> /dev/null | grep \"Your branch is\") gup=$(echo $gbranchrel 2> /dev/null | grep ahead) gdown=$(echo $gbranchrel 2> /dev/null | grep behind) grelN=$(echo $gbranchrel | sed -nr 's/.*by ([0-9]+) commit?[a-z]./\\1/p') gupdown=\"\" if [[ $gup != \"\" ]]; then gupdown=\"${grelN}\u2191\" fi if [[ $gdown != \"\" ]]; then gupdown=\"${grelN}\u2193\" fi echo $gupdown } Function Calls: No functions called. _format_git_stats(): function _format_git_stats() { gporcelain=$(git status --porcelain 2> /dev/null) untrN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '??' | wc -l) # untracked addN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^A' | wc -l) # added modN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^M' | wc -l) # modified commN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^AM' | wc -l) # added & modified? delN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^D' | wc -l) # deleted gitlegend=\"\" gitstats_str=\"\" if [[ $untrN != \"0\" ]]; then gitlegend=\"${gitlegend}${TEAL}u\" gitstats_str=\"${gitstats_str}${TEAL}${untrN}\" fi if [[ $addN != \"0\" ]]; then gitlegend=\"${gitlegend}${LBLUE}a\" gitstats_str=\"${gitstats_str}${LBLUE}${addN}\" fi if [[ $modN != \"0\" ]]; then gitlegend=\"${gitlegend}${MAGENTA}m\" gitstats_str=\"${gitstats_str}${MAGENTA}${modN}\" fi if [[ $commN != \"0\" ]]; then gitlegend=\"${gitlegend}${HIGreen}c\" gitstats_str=\"${gitstats_str}${HIGreen}${commN}\" fi if [[ $delN != \"0\" ]]; then gitlegend=\"${gitlegend}${RED}d\" gitstats_str=\"${gitstats_str}${RED}${delN}\" fi gitlegend=\"${gitlegend}${SLATE}: \" if [[ $gitstats_str == \"\" ]]; then joined_gitstats=\"\" else joined_gitstats=\" ${gitlegend}${gitstats_str}\" fi echo \"${gupdown}${TXTCOL}${gbranchstr}${dirty_state}${joined_gitstats}\" } Function Calls: No functions called.",
            "title": "internal_git_functions"
        },
        {
            "location": "internal/internal_git_functions/#undefined-add-composure-cite-about-to-shell-script-file",
            "text": "(in /home/bsgt/sys_bashrc/bashrc_assets/internal_git_functions.sh)",
            "title": "Undefined. Add composure cite-about to shell script file"
        },
        {
            "location": "internal/internal_git_functions/#function-index",
            "text": "01 - _parse_git() 02 - _parse_git_minimal() 03 - _find_git_branch() 04 - _get_git_commid() 05 - _find_git_dirty() 06 - _git_com_diff() 07 - _format_git_stats()",
            "title": "Function Index"
        },
        {
            "location": "internal/internal_git_functions/#_parse_git",
            "text": "function _parse_git() { git_str=$(_find_git_branch) if [[ ! -z \"$git_str\" ]]; then git_str=\"${BARCOL}\u2500\u2500${TXTCOL}[$(_git_com_diff)${git_str}$(_find_git_dirty)\" git_str=\"${git_str}$(_format_git_stats)\" git_str=\"${git_str}${TXTCOL}]\" echo $git_str else echo \"\" fi }",
            "title": "_parse_git():"
        },
        {
            "location": "internal/internal_git_functions/#function-calls",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_git_functions/#_parse_git_minimal",
            "text": "function _parse_git_minimal() { git_str=$(_find_git_branch) if [[ ! -z \"$git_str\" ]]; then git_str=\"${BARCOL}\u2500${TXTCOL}(${git_str}$(_find_git_dirty)\" git_str=\"${git_str}${TXTCOL})\" echo $git_str else echo \"\" fi }",
            "title": "_parse_git_minimal():"
        },
        {
            "location": "internal/internal_git_functions/#function-calls_1",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_git_functions/#_find_git_branch",
            "text": "function _find_git_branch() { local branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null) if [[ ! -z \"$branch\" ]]; then if [[ \"$branch\" == \"HEAD\" ]]; then branch_fmt=\"${RED}!detached\" else branch_fmt=\"${TXTCOL}${branch}\" fi git_branch=\"${branch_fmt}\" else git_branch=\"\" fi echo $git_branch }",
            "title": "_find_git_branch():"
        },
        {
            "location": "internal/internal_git_functions/#function-calls_2",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_git_functions/#_get_git_commid",
            "text": "function _get_git_commid() { curr_commitid=$(git rev-parse --short HEAD 2> /dev/null) prev_commitid=$(git rev-list --max-count=2 --abbrev-commit HEAD | tail -1) echo \"${BARCOL}\u2500\u2500${TXTCOL}[c~${curr_commitid}]${BARCOL}\u2500\u2500${TXTCOL}[p~${prev_commitid}]\" }",
            "title": "_get_git_commid():"
        },
        {
            "location": "internal/internal_git_functions/#function-calls_3",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_git_functions/#_find_git_dirty",
            "text": "function _find_git_dirty() { gdirtstr=$(git status 2> /dev/null | tail -n1 | sed 's/,//' | awk '{print $1, $2, $3}') if [[ ${gdirtstr} == \"nothing to commit\" ]] then dirty_state=\"\" elif [[ ${gdirtstr} == \"\" ]] then dirty_state=\"\" else dirty_state='\\[\\033[01;38;5;221m\\]*' fi echo $dirty_state }",
            "title": "_find_git_dirty():"
        },
        {
            "location": "internal/internal_git_functions/#function-calls_4",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_git_functions/#_git_com_diff",
            "text": "function _git_com_diff() { gbranchrel=$(git status 2> /dev/null | grep \"Your branch is\") gup=$(echo $gbranchrel 2> /dev/null | grep ahead) gdown=$(echo $gbranchrel 2> /dev/null | grep behind) grelN=$(echo $gbranchrel | sed -nr 's/.*by ([0-9]+) commit?[a-z]./\\1/p') gupdown=\"\" if [[ $gup != \"\" ]]; then gupdown=\"${grelN}\u2191\" fi if [[ $gdown != \"\" ]]; then gupdown=\"${grelN}\u2193\" fi echo $gupdown }",
            "title": "_git_com_diff():"
        },
        {
            "location": "internal/internal_git_functions/#function-calls_5",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_git_functions/#_format_git_stats",
            "text": "function _format_git_stats() { gporcelain=$(git status --porcelain 2> /dev/null) untrN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '??' | wc -l) # untracked addN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^A' | wc -l) # added modN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^M' | wc -l) # modified commN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^AM' | wc -l) # added & modified? delN=$(echo $gporcelain | tr ' ' '\\n' | grep -w '^D' | wc -l) # deleted gitlegend=\"\" gitstats_str=\"\" if [[ $untrN != \"0\" ]]; then gitlegend=\"${gitlegend}${TEAL}u\" gitstats_str=\"${gitstats_str}${TEAL}${untrN}\" fi if [[ $addN != \"0\" ]]; then gitlegend=\"${gitlegend}${LBLUE}a\" gitstats_str=\"${gitstats_str}${LBLUE}${addN}\" fi if [[ $modN != \"0\" ]]; then gitlegend=\"${gitlegend}${MAGENTA}m\" gitstats_str=\"${gitstats_str}${MAGENTA}${modN}\" fi if [[ $commN != \"0\" ]]; then gitlegend=\"${gitlegend}${HIGreen}c\" gitstats_str=\"${gitstats_str}${HIGreen}${commN}\" fi if [[ $delN != \"0\" ]]; then gitlegend=\"${gitlegend}${RED}d\" gitstats_str=\"${gitstats_str}${RED}${delN}\" fi gitlegend=\"${gitlegend}${SLATE}: \" if [[ $gitstats_str == \"\" ]]; then joined_gitstats=\"\" else joined_gitstats=\" ${gitlegend}${gitstats_str}\" fi echo \"${gupdown}${TXTCOL}${gbranchstr}${dirty_state}${joined_gitstats}\" }",
            "title": "_format_git_stats():"
        },
        {
            "location": "internal/internal_git_functions/#function-calls_6",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_helper_functions/",
            "text": "Undefined. Add composure cite-about to shell script file (in /home/bsgt/sys_bashrc/bashrc_assets/internal_helper_functions.sh) Function Index 01 - check_new_bashrc_vers() 02 - gedit(){ 03 - nomacs(){ 04 - Ngedit(){ 05 - terminator(){ 06 - sshub(){ 07 - sshec2(){ 08 - sshbast(){ check_new_bashrc_vers(): function check_new_bashrc_vers() { git --git-dir=${HOME}/sys_bashrc/.git fetch --quiet BASHRC_CURR_BRANCH=$(git --git-dir=${HOME}/sys_bashrc/.git rev-parse --abbrev-ref HEAD) BASHRC_COMMIT_DETAILS=$(git --git-dir=${HOME}/sys_bashrc/.git rev-list --left-right \\ --count origin/master...\"${BASHRC_CURR_BRANCH}\") BC_BEHIND=$(echo \"$BASHRC_COMMIT_DETAILS\" | awk '{print $1}' | sed 's/^[ \\t]*//;s/[ \\t]*$//') BC_AHEAD=$(echo \"$BASHRC_COMMIT_DETAILS\" | awk '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//') echo -e \"\\n${PureCHATREU}Your bashrc is ${PureBRed}${BC_BEHIND} ${PureCHATREU}commits behind origin/master and ${PureBBlue}${BC_AHEAD} ${PureCHATREU}commits ahead\\n${NOCOL}\" } Function Calls: No functions called. gedit(){: function gedit(){ command gedit \"$@\" &>/dev/null & } Function Calls: No functions called. nomacs(){: function nomacs(){ command nomacs \"$@\" &>/dev/null & } Function Calls: No functions called. Ngedit(){: function Ngedit(){ command gedit --new-window \"$@\" &>/dev/null & } Function Calls: \u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ terminator(){: function terminator(){ command terminator --geometry=945x1200+0+0 \"$@\" &>/dev/null & } Function Calls: No functions called. sshub(){: function sshub(){ HOST_ADDR=\"$1\" ssh -A ubuntu@${HOST_ADDR} } Function Calls: No functions called. sshec2(){: function sshec2(){ HOST_ADDR=\"$1\" ssh -A ec2-user@${HOST_ADDR} } Function Calls: No functions called. sshbast(){: function sshbast(){ HOST_ADDR=\"$1\" ssh -A -J username@bastion.com ubuntu@${HOST_ADDR} } grepo() { find ./ -not -path \"*/\\.*\" -not -path \"*venv/*\" -not -path \"*node_modules/*\" -name \"*\" -exec grep --color=auto -Isi \"$1\" {} \\; } grepoall() { TXT_PATTERN=\"$1\" if [[ $# -eq 2 ]]; then FILE_SEARCH=\"$2\" else FILE_SEARCH=\"*\" fi find ./ -not -path \"*/\\.*\" -not -path \"*venv/*\" -not -path \"*node_modules/*\" -iname \"${FILE_SEARCH}\" -exec grep --color=auto -Isin \"$TXT_PATTERN\" {} /dev/null \\; } del_file_by_patt() { file_ext=\"$1\" find . -name \"$file_ext\" -exec rm -fv {} \\; } venv_create() { if [[ $# -ge 1 ]]; then desired_py_version=$1 pyth_ver=$(which $desired_py_version) if [[ -z \"${pyth_ver}\" ]]; then echo \"python version $desired_py_version not found\" else $pyth_ver -m venv venv source venv/bin/activate fi else echo \"supply an arg\" fi } venv_activate() { source venv/bin/activate } Function Calls: No functions called.",
            "title": "internal_helper_functions"
        },
        {
            "location": "internal/internal_helper_functions/#undefined-add-composure-cite-about-to-shell-script-file",
            "text": "(in /home/bsgt/sys_bashrc/bashrc_assets/internal_helper_functions.sh)",
            "title": "Undefined. Add composure cite-about to shell script file"
        },
        {
            "location": "internal/internal_helper_functions/#function-index",
            "text": "01 - check_new_bashrc_vers() 02 - gedit(){ 03 - nomacs(){ 04 - Ngedit(){ 05 - terminator(){ 06 - sshub(){ 07 - sshec2(){ 08 - sshbast(){",
            "title": "Function Index"
        },
        {
            "location": "internal/internal_helper_functions/#check_new_bashrc_vers",
            "text": "function check_new_bashrc_vers() { git --git-dir=${HOME}/sys_bashrc/.git fetch --quiet BASHRC_CURR_BRANCH=$(git --git-dir=${HOME}/sys_bashrc/.git rev-parse --abbrev-ref HEAD) BASHRC_COMMIT_DETAILS=$(git --git-dir=${HOME}/sys_bashrc/.git rev-list --left-right \\ --count origin/master...\"${BASHRC_CURR_BRANCH}\") BC_BEHIND=$(echo \"$BASHRC_COMMIT_DETAILS\" | awk '{print $1}' | sed 's/^[ \\t]*//;s/[ \\t]*$//') BC_AHEAD=$(echo \"$BASHRC_COMMIT_DETAILS\" | awk '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//') echo -e \"\\n${PureCHATREU}Your bashrc is ${PureBRed}${BC_BEHIND} ${PureCHATREU}commits behind origin/master and ${PureBBlue}${BC_AHEAD} ${PureCHATREU}commits ahead\\n${NOCOL}\" }",
            "title": "check_new_bashrc_vers():"
        },
        {
            "location": "internal/internal_helper_functions/#function-calls",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_helper_functions/#gedit",
            "text": "function gedit(){ command gedit \"$@\" &>/dev/null & }",
            "title": "gedit(){:"
        },
        {
            "location": "internal/internal_helper_functions/#function-calls_1",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_helper_functions/#nomacs",
            "text": "function nomacs(){ command nomacs \"$@\" &>/dev/null & }",
            "title": "nomacs(){:"
        },
        {
            "location": "internal/internal_helper_functions/#function-calls_2",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_helper_functions/#ngedit",
            "text": "function Ngedit(){ command gedit --new-window \"$@\" &>/dev/null & }",
            "title": "Ngedit(){:"
        },
        {
            "location": "internal/internal_helper_functions/#function-calls_3",
            "text": "\u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_helper_functions/#terminator",
            "text": "function terminator(){ command terminator --geometry=945x1200+0+0 \"$@\" &>/dev/null & }",
            "title": "terminator(){:"
        },
        {
            "location": "internal/internal_helper_functions/#function-calls_4",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_helper_functions/#sshub",
            "text": "function sshub(){ HOST_ADDR=\"$1\" ssh -A ubuntu@${HOST_ADDR} }",
            "title": "sshub(){:"
        },
        {
            "location": "internal/internal_helper_functions/#function-calls_5",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_helper_functions/#sshec2",
            "text": "function sshec2(){ HOST_ADDR=\"$1\" ssh -A ec2-user@${HOST_ADDR} }",
            "title": "sshec2(){:"
        },
        {
            "location": "internal/internal_helper_functions/#function-calls_6",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "internal/internal_helper_functions/#sshbast",
            "text": "function sshbast(){ HOST_ADDR=\"$1\" ssh -A -J username@bastion.com ubuntu@${HOST_ADDR} } grepo() { find ./ -not -path \"*/\\.*\" -not -path \"*venv/*\" -not -path \"*node_modules/*\" -name \"*\" -exec grep --color=auto -Isi \"$1\" {} \\; } grepoall() { TXT_PATTERN=\"$1\" if [[ $# -eq 2 ]]; then FILE_SEARCH=\"$2\" else FILE_SEARCH=\"*\" fi find ./ -not -path \"*/\\.*\" -not -path \"*venv/*\" -not -path \"*node_modules/*\" -iname \"${FILE_SEARCH}\" -exec grep --color=auto -Isin \"$TXT_PATTERN\" {} /dev/null \\; } del_file_by_patt() { file_ext=\"$1\" find . -name \"$file_ext\" -exec rm -fv {} \\; } venv_create() { if [[ $# -ge 1 ]]; then desired_py_version=$1 pyth_ver=$(which $desired_py_version) if [[ -z \"${pyth_ver}\" ]]; then echo \"python version $desired_py_version not found\" else $pyth_ver -m venv venv source venv/bin/activate fi else echo \"supply an arg\" fi } venv_activate() { source venv/bin/activate }",
            "title": "sshbast(){:"
        },
        {
            "location": "internal/internal_helper_functions/#function-calls_7",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/aws_module/",
            "text": "AWS helper functions (in /home/bsgt/sys_bashrc/modules/aws_module.sh) Function Index 01 - awskeys 02 - __awskeys_help 03 - __awskeys_region 04 - __awskeys_get 05 - __awskeys_list 06 - __awskeys_show 07 - __awskeys_export 08 - __awskeys_unset 09 - __awskeys_comp awskeys: about : helper function for AWS credentials file group : aws function awskeys { if [[ ! -f \"${AWS_SHARED_CREDENTIALS_FILE}\" ]]; then echo \"AWS credentials file not found\" return 1 fi if [[ $# -eq 1 ]] && [[ \"$1\" = \"list\" ]]; then __awskeys_list \"$2\" elif [[ $# -eq 1 ]] && [[ \"$1\" = \"unset\" ]]; then __awskeys_unset \"$2\" elif [[ $# -eq 2 ]] && [[ \"$1\" = \"show\" ]]; then __awskeys_show \"$2\" elif [[ $# -eq 2 ]] && [[ \"$1\" = \"export\" ]]; then __awskeys_export \"$2\" elif [[ $# -eq 2 ]] && [[ \"$1\" = \"region\" ]]; then __awskeys_region \"$2\" else __awskeys_help fi } Function Calls: \u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset __awskeys_help: function __awskeys_help { echo -e \"Usage: awskeys [COMMAND] [profile]\\n\" echo -e \"Helper to AWS credentials file.\\n\" echo -e \"Commands:\\n\" echo \" help Show this help message\" echo \" list List available AWS credentials profiles\" echo \" show Show the AWS keys associated to a credentials profile\" echo \" export Export an AWS credentials profile keys as environment variables\" echo \" unset Unset the AWS keys variables from the environment\" echo \" region Change aws region which defaults to eu-west-1\" } Function Calls: \u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset __awskeys_region: function __awskeys_region { local new_region=$1 if [[ -n \"${new_region}\" ]]; then echo \"AWS_DEFAULT_REGION='${new_region}'\" export AWS_DEFAULT_REGION=\"${new_region}\" fi } Function Calls: No functions called. __awskeys_get: function __awskeys_get { local ln=$(grep -n \"\\[ *$1 *\\]\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | cut -d \":\" -f 1) if [[ -n \"${ln}\" ]]; then local profile_line_idxs=$(grep -n \"\\[*\\]\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | tr \":\" \" \" | awk '{print $1}' | tr '\\n' ' ') local last_line=$(wc -l \"${AWS_SHARED_CREDENTIALS_FILE}\" | awk '{print $1}') local all_idxs=\"${profile_line_idxs}${last_line}\" local term_ln=$(echo \"$all_idxs\" | tr ' ' '\\n' | grep -w -A 1 \"$ln\" | tail -1) local match_strings=\"aws_access_key_id|aws_secret_access_key|aws_session_token|aws_default_region|aws_default_output|aws_profile|aws_role_session_name|aws_ca_bundle|AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY|AWS_SESSION_TOKEN|AWS_DEFAULT_REGION|AWS_DEFAULT_OUTPUT|AWS_PROFILE|AWS_ROLE_SESSION_NAME|AWS_CA_BUNDLE\" sed -n \"${ln},${term_ln}p\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | egrep \"${match_strings}\" fi } Function Calls: No functions called. __awskeys_list: function __awskeys_list { local credentials_list=\"$((egrep '^\\[ *[a-zA-Z0-9_-]+ *\\]$' \"${AWS_SHARED_CREDENTIALS_FILE}\"; grep \"\\[\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | sed \"s|\\[profile |\\[|g\") | sort | uniq)\" if [[ -n $\"{credentials_list}\" ]]; then echo -e \"Available credentials profiles:\\n\" for profile in ${credentials_list}; do echo \" $(echo ${profile} | tr -d \"[]\")\" done echo else echo \"No profiles found in credentials file\" fi } Function Calls: No functions called. __awskeys_show: function __awskeys_show { local p_keys=\"$(__awskeys_get $1)\" if [[ -n \"${p_keys}\" ]]; then echo \"${p_keys}\" else echo \"Profile $1 not found in credentials file\" fi } Function Calls: \u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_show \u2514\u2500 __awskeys_get __awskeys_export: function __awskeys_export { if [[ $(__awskeys_list) == *\"$1\"* ]]; then local p_keys=( $(__awskeys_get $1 | tr -d \" \") ) if [[ -n \"${p_keys}\" ]]; then for p_key in ${p_keys[@]}; do echo \"* $p_key\" local key=\"${p_key%=*}\" export \"$(echo ${key} | tr [:lower:] [:upper:])=${p_key#*=}\" done fi export AWS_PROFILE=\"$1\" else echo \"Profile $1 not found in credentials file\" fi } Function Calls: \u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_show \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_export \u2514\u2500 __awskeys_get __awskeys_unset: function __awskeys_unset { unset AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN } Function Calls: No functions called. __awskeys_comp: function __awskeys_comp { local cur prev opts prevprev COMPREPLY=() cur=\"${COMP_WORDS[COMP_CWORD]}\" prev=\"${COMP_WORDS[COMP_CWORD-1]}\" opts=\"help list show export unset region\" case \"${prev}\" in help|list|unset) return 0 ;; show|export) local profile_list=\"$(__awskeys_list | grep \" \")\" COMPREPLY=( $(compgen -W \"${profile_list}\" -- ${cur}) ) return 0 ;; esac COMPREPLY=( $(compgen -W \"${opts}\" -- ${cur}) ) return 0 } complete -F __awskeys_comp awskeys Function Calls: \u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_show \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_export \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_comp \u2514\u2500 __awskeys_list",
            "title": "aws_module"
        },
        {
            "location": "modules/aws_module/#aws-helper-functions",
            "text": "(in /home/bsgt/sys_bashrc/modules/aws_module.sh)",
            "title": "AWS helper functions"
        },
        {
            "location": "modules/aws_module/#function-index",
            "text": "01 - awskeys 02 - __awskeys_help 03 - __awskeys_region 04 - __awskeys_get 05 - __awskeys_list 06 - __awskeys_show 07 - __awskeys_export 08 - __awskeys_unset 09 - __awskeys_comp",
            "title": "Function Index"
        },
        {
            "location": "modules/aws_module/#awskeys",
            "text": "about : helper function for AWS credentials file group : aws function awskeys { if [[ ! -f \"${AWS_SHARED_CREDENTIALS_FILE}\" ]]; then echo \"AWS credentials file not found\" return 1 fi if [[ $# -eq 1 ]] && [[ \"$1\" = \"list\" ]]; then __awskeys_list \"$2\" elif [[ $# -eq 1 ]] && [[ \"$1\" = \"unset\" ]]; then __awskeys_unset \"$2\" elif [[ $# -eq 2 ]] && [[ \"$1\" = \"show\" ]]; then __awskeys_show \"$2\" elif [[ $# -eq 2 ]] && [[ \"$1\" = \"export\" ]]; then __awskeys_export \"$2\" elif [[ $# -eq 2 ]] && [[ \"$1\" = \"region\" ]]; then __awskeys_region \"$2\" else __awskeys_help fi }",
            "title": "awskeys:"
        },
        {
            "location": "modules/aws_module/#function-calls",
            "text": "\u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset",
            "title": "Function Calls:"
        },
        {
            "location": "modules/aws_module/#__awskeys_help",
            "text": "function __awskeys_help { echo -e \"Usage: awskeys [COMMAND] [profile]\\n\" echo -e \"Helper to AWS credentials file.\\n\" echo -e \"Commands:\\n\" echo \" help Show this help message\" echo \" list List available AWS credentials profiles\" echo \" show Show the AWS keys associated to a credentials profile\" echo \" export Export an AWS credentials profile keys as environment variables\" echo \" unset Unset the AWS keys variables from the environment\" echo \" region Change aws region which defaults to eu-west-1\" }",
            "title": "__awskeys_help:"
        },
        {
            "location": "modules/aws_module/#function-calls_1",
            "text": "\u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset",
            "title": "Function Calls:"
        },
        {
            "location": "modules/aws_module/#__awskeys_region",
            "text": "function __awskeys_region { local new_region=$1 if [[ -n \"${new_region}\" ]]; then echo \"AWS_DEFAULT_REGION='${new_region}'\" export AWS_DEFAULT_REGION=\"${new_region}\" fi }",
            "title": "__awskeys_region:"
        },
        {
            "location": "modules/aws_module/#function-calls_2",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/aws_module/#__awskeys_get",
            "text": "function __awskeys_get { local ln=$(grep -n \"\\[ *$1 *\\]\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | cut -d \":\" -f 1) if [[ -n \"${ln}\" ]]; then local profile_line_idxs=$(grep -n \"\\[*\\]\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | tr \":\" \" \" | awk '{print $1}' | tr '\\n' ' ') local last_line=$(wc -l \"${AWS_SHARED_CREDENTIALS_FILE}\" | awk '{print $1}') local all_idxs=\"${profile_line_idxs}${last_line}\" local term_ln=$(echo \"$all_idxs\" | tr ' ' '\\n' | grep -w -A 1 \"$ln\" | tail -1) local match_strings=\"aws_access_key_id|aws_secret_access_key|aws_session_token|aws_default_region|aws_default_output|aws_profile|aws_role_session_name|aws_ca_bundle|AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY|AWS_SESSION_TOKEN|AWS_DEFAULT_REGION|AWS_DEFAULT_OUTPUT|AWS_PROFILE|AWS_ROLE_SESSION_NAME|AWS_CA_BUNDLE\" sed -n \"${ln},${term_ln}p\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | egrep \"${match_strings}\" fi }",
            "title": "__awskeys_get:"
        },
        {
            "location": "modules/aws_module/#function-calls_3",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/aws_module/#__awskeys_list",
            "text": "function __awskeys_list { local credentials_list=\"$((egrep '^\\[ *[a-zA-Z0-9_-]+ *\\]$' \"${AWS_SHARED_CREDENTIALS_FILE}\"; grep \"\\[\" \"${AWS_SHARED_CREDENTIALS_FILE}\" | sed \"s|\\[profile |\\[|g\") | sort | uniq)\" if [[ -n $\"{credentials_list}\" ]]; then echo -e \"Available credentials profiles:\\n\" for profile in ${credentials_list}; do echo \" $(echo ${profile} | tr -d \"[]\")\" done echo else echo \"No profiles found in credentials file\" fi }",
            "title": "__awskeys_list:"
        },
        {
            "location": "modules/aws_module/#function-calls_4",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/aws_module/#__awskeys_show",
            "text": "function __awskeys_show { local p_keys=\"$(__awskeys_get $1)\" if [[ -n \"${p_keys}\" ]]; then echo \"${p_keys}\" else echo \"Profile $1 not found in credentials file\" fi }",
            "title": "__awskeys_show:"
        },
        {
            "location": "modules/aws_module/#function-calls_5",
            "text": "\u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_show \u2514\u2500 __awskeys_get",
            "title": "Function Calls:"
        },
        {
            "location": "modules/aws_module/#__awskeys_export",
            "text": "function __awskeys_export { if [[ $(__awskeys_list) == *\"$1\"* ]]; then local p_keys=( $(__awskeys_get $1 | tr -d \" \") ) if [[ -n \"${p_keys}\" ]]; then for p_key in ${p_keys[@]}; do echo \"* $p_key\" local key=\"${p_key%=*}\" export \"$(echo ${key} | tr [:lower:] [:upper:])=${p_key#*=}\" done fi export AWS_PROFILE=\"$1\" else echo \"Profile $1 not found in credentials file\" fi }",
            "title": "__awskeys_export:"
        },
        {
            "location": "modules/aws_module/#function-calls_6",
            "text": "\u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_show \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_export \u2514\u2500 __awskeys_get",
            "title": "Function Calls:"
        },
        {
            "location": "modules/aws_module/#__awskeys_unset",
            "text": "function __awskeys_unset { unset AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN }",
            "title": "__awskeys_unset:"
        },
        {
            "location": "modules/aws_module/#function-calls_7",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/aws_module/#__awskeys_comp",
            "text": "function __awskeys_comp { local cur prev opts prevprev COMPREPLY=() cur=\"${COMP_WORDS[COMP_CWORD]}\" prev=\"${COMP_WORDS[COMP_CWORD-1]}\" opts=\"help list show export unset region\" case \"${prev}\" in help|list|unset) return 0 ;; show|export) local profile_list=\"$(__awskeys_list | grep \" \")\" COMPREPLY=( $(compgen -W \"${profile_list}\" -- ${cur}) ) return 0 ;; esac COMPREPLY=( $(compgen -W \"${opts}\" -- ${cur}) ) return 0 } complete -F __awskeys_comp awskeys",
            "title": "__awskeys_comp:"
        },
        {
            "location": "modules/aws_module/#function-calls_8",
            "text": "\u2514\u2500 Ngedit(){ \u2514\u2500 gedit(){ \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show | \u2514\u2500 __awskeys_get \u251c\u2500 __awskeys_export | \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_help \u2514\u2500 awskeys \u251c\u2500 __awskeys_region \u251c\u2500 __awskeys_list \u251c\u2500 __awskeys_show \u251c\u2500 __awskeys_export \u2514\u2500 __awskeys_unset \u2514\u2500 __awskeys_show \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_export \u2514\u2500 __awskeys_get \u2514\u2500 __awskeys_comp \u2514\u2500 __awskeys_list",
            "title": "Function Calls:"
        },
        {
            "location": "modules/base_module/",
            "text": "Undefined. Add composure cite-about to shell script file (in /home/bsgt/sys_bashrc/modules/base_module.sh) Function Index 01 - del() del(): about : move files to hidden folder in tmp, that gets cleared on each reboot param : file or folder to be deleted example : del ./file.txt group : base function del() { mkdir -p /tmp/.trash && mv \"$@\" /tmp/.trash; } Function Calls: No functions called.",
            "title": "base_module"
        },
        {
            "location": "modules/base_module/#undefined-add-composure-cite-about-to-shell-script-file",
            "text": "(in /home/bsgt/sys_bashrc/modules/base_module.sh)",
            "title": "Undefined. Add composure cite-about to shell script file"
        },
        {
            "location": "modules/base_module/#function-index",
            "text": "01 - del()",
            "title": "Function Index"
        },
        {
            "location": "modules/base_module/#del",
            "text": "about : move files to hidden folder in tmp, that gets cleared on each reboot param : file or folder to be deleted example : del ./file.txt group : base function del() { mkdir -p /tmp/.trash && mv \"$@\" /tmp/.trash; }",
            "title": "del():"
        },
        {
            "location": "modules/base_module/#function-calls",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/composure/",
            "text": "Undefined. Add composure cite-about to shell script file (in /home/bsgt/sys_bashrc/modules/composure.sh) Aliases Alias Name Code Descripion cref reference",
            "title": "composure"
        },
        {
            "location": "modules/composure/#undefined-add-composure-cite-about-to-shell-script-file",
            "text": "(in /home/bsgt/sys_bashrc/modules/composure.sh)",
            "title": "Undefined. Add composure cite-about to shell script file"
        },
        {
            "location": "modules/composure/#aliases",
            "text": "Alias Name Code Descripion cref reference",
            "title": "Aliases"
        },
        {
            "location": "modules/docker-compose_module/",
            "text": "Helper functions for using docker-compose (in /home/bsgt/sys_bashrc/modules/docker-compose_module.sh) Function Index 01 - docker-compose-fresh() docker-compose-fresh(): about : Shut down, remove and start again the docker-compose setup, then tail the logs group : docker-compose param : 1: name of the docker-compose.yaml file to use (optional). Default: docker-compose.yaml example : docker-compose-fresh docker-compose-foo.yaml function docker-compose-fresh() { local DCO_FILE_PARAM=\"\" if [ -n \"$1\" ]; then echo \"Using docker-compose file: $1\" DCO_FILE_PARAM=\"--file $1\" fi docker-compose $DCO_FILE_PARAM stop docker-compose $DCO_FILE_PARAM rm -f docker-compose $DCO_FILE_PARAM up -d docker-compose $DCO_FILE_PARAM logs -f --tail 100 } Function Calls: No functions called.",
            "title": "docker-compose_module"
        },
        {
            "location": "modules/docker-compose_module/#helper-functions-for-using-docker-compose",
            "text": "(in /home/bsgt/sys_bashrc/modules/docker-compose_module.sh)",
            "title": "Helper functions for using docker-compose"
        },
        {
            "location": "modules/docker-compose_module/#function-index",
            "text": "01 - docker-compose-fresh()",
            "title": "Function Index"
        },
        {
            "location": "modules/docker-compose_module/#docker-compose-fresh",
            "text": "about : Shut down, remove and start again the docker-compose setup, then tail the logs group : docker-compose param : 1: name of the docker-compose.yaml file to use (optional). Default: docker-compose.yaml example : docker-compose-fresh docker-compose-foo.yaml function docker-compose-fresh() { local DCO_FILE_PARAM=\"\" if [ -n \"$1\" ]; then echo \"Using docker-compose file: $1\" DCO_FILE_PARAM=\"--file $1\" fi docker-compose $DCO_FILE_PARAM stop docker-compose $DCO_FILE_PARAM rm -f docker-compose $DCO_FILE_PARAM up -d docker-compose $DCO_FILE_PARAM logs -f --tail 100 }",
            "title": "docker-compose-fresh():"
        },
        {
            "location": "modules/docker-compose_module/#function-calls",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/docker_module/",
            "text": "Helpers to more easily work with Docker (in /home/bsgt/sys_bashrc/modules/docker_module.sh) Function Index 01 - docker-remove-most-recent-container() 02 - docker-remove-most-recent-image() 03 - docker-remove-stale-assets() 04 - docker-enter() 05 - docker-remove-images() 06 - docker-image-dependencies() 07 - docker-runtime-environment() 08 - docker-archive-content() docker-remove-most-recent-container(): about : attempt to remove the most recent container from docker ps -a group : docker function docker-remove-most-recent-container() { docker ps -ql | xargs docker rm } Function Calls: No functions called. docker-remove-most-recent-image(): about : attempt to remove the most recent image from docker images group : docker function docker-remove-most-recent-image() { docker images -q | head -1 | xargs docker rmi } Function Calls: No functions called. docker-remove-stale-assets(): about : attempt to remove exited containers and dangling images group : docker function docker-remove-stale-assets() { docker ps --filter status=exited -q | xargs docker rm --volumes docker images --filter dangling=true -q | xargs docker rmi } Function Calls: No functions called. docker-enter(): about : enter the specified docker container using bash group : docker param : 1: Name of the container to enter example : docker-enter oracle-xe function docker-enter() { docker exec -it \"$@\" /bin/bash; } Function Calls: No functions called. docker-remove-images(): about : attempt to remove images with supplied tags or all if no tags are supplied group : docker function docker-remove-images() { if [ -z \"$1\" ]; then docker rmi $(docker images -q) else DOCKER_IMAGES=\"\" for IMAGE_ID in $@; do DOCKER_IMAGES=\"$DOCKER_IMAGES\\|$IMAGE_ID\"; done ID_ARRAY=($(docker images | grep \"${DOCKER_IMAGES:2}\" | awk {'print $3'})) docker rmi $(echo ${ID_ARRAY[@]} | tr ' ' '\\n' | sort -u | tr '\\n' ' ') fi } Function Calls: No functions called. docker-image-dependencies(): about : attempt to create a Graphiz image of the supplied image ID dependencies group : docker function docker-image-dependencies() { if hash dot 2>/dev/null; then OUT=$(mktemp -t docker-viz-XXXX.png) docker images -viz | dot -Tpng > $OUT case $OSTYPE in linux*) xdg-open $OUT ;; darwin*) open $OUT ;; esac else >&2 echo \"Can't show dependencies; Graphiz is not installed\" fi } Function Calls: No functions called. docker-runtime-environment(): about : attempt to list the environmental variables of the supplied image ID group : docker function docker-runtime-environment() { docker run \"$@\" env } Function Calls: No functions called. docker-archive-content(): about : show the content of the provided Docker image archive group : docker param : 1: image archive name example : docker-archive-content images.tar.gz function docker-archive-content() { if [ -n \"$1\" ]; then tar -xzOf $1 manifest.json | jq '[.[] | .RepoTags] | add' fi } Function Calls: No functions called.",
            "title": "docker_module"
        },
        {
            "location": "modules/docker_module/#helpers-to-more-easily-work-with-docker",
            "text": "(in /home/bsgt/sys_bashrc/modules/docker_module.sh)",
            "title": "Helpers to more easily work with Docker"
        },
        {
            "location": "modules/docker_module/#function-index",
            "text": "01 - docker-remove-most-recent-container() 02 - docker-remove-most-recent-image() 03 - docker-remove-stale-assets() 04 - docker-enter() 05 - docker-remove-images() 06 - docker-image-dependencies() 07 - docker-runtime-environment() 08 - docker-archive-content()",
            "title": "Function Index"
        },
        {
            "location": "modules/docker_module/#docker-remove-most-recent-container",
            "text": "about : attempt to remove the most recent container from docker ps -a group : docker function docker-remove-most-recent-container() { docker ps -ql | xargs docker rm }",
            "title": "docker-remove-most-recent-container():"
        },
        {
            "location": "modules/docker_module/#function-calls",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/docker_module/#docker-remove-most-recent-image",
            "text": "about : attempt to remove the most recent image from docker images group : docker function docker-remove-most-recent-image() { docker images -q | head -1 | xargs docker rmi }",
            "title": "docker-remove-most-recent-image():"
        },
        {
            "location": "modules/docker_module/#function-calls_1",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/docker_module/#docker-remove-stale-assets",
            "text": "about : attempt to remove exited containers and dangling images group : docker function docker-remove-stale-assets() { docker ps --filter status=exited -q | xargs docker rm --volumes docker images --filter dangling=true -q | xargs docker rmi }",
            "title": "docker-remove-stale-assets():"
        },
        {
            "location": "modules/docker_module/#function-calls_2",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/docker_module/#docker-enter",
            "text": "about : enter the specified docker container using bash group : docker param : 1: Name of the container to enter example : docker-enter oracle-xe function docker-enter() { docker exec -it \"$@\" /bin/bash; }",
            "title": "docker-enter():"
        },
        {
            "location": "modules/docker_module/#function-calls_3",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/docker_module/#docker-remove-images",
            "text": "about : attempt to remove images with supplied tags or all if no tags are supplied group : docker function docker-remove-images() { if [ -z \"$1\" ]; then docker rmi $(docker images -q) else DOCKER_IMAGES=\"\" for IMAGE_ID in $@; do DOCKER_IMAGES=\"$DOCKER_IMAGES\\|$IMAGE_ID\"; done ID_ARRAY=($(docker images | grep \"${DOCKER_IMAGES:2}\" | awk {'print $3'})) docker rmi $(echo ${ID_ARRAY[@]} | tr ' ' '\\n' | sort -u | tr '\\n' ' ') fi }",
            "title": "docker-remove-images():"
        },
        {
            "location": "modules/docker_module/#function-calls_4",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/docker_module/#docker-image-dependencies",
            "text": "about : attempt to create a Graphiz image of the supplied image ID dependencies group : docker function docker-image-dependencies() { if hash dot 2>/dev/null; then OUT=$(mktemp -t docker-viz-XXXX.png) docker images -viz | dot -Tpng > $OUT case $OSTYPE in linux*) xdg-open $OUT ;; darwin*) open $OUT ;; esac else >&2 echo \"Can't show dependencies; Graphiz is not installed\" fi }",
            "title": "docker-image-dependencies():"
        },
        {
            "location": "modules/docker_module/#function-calls_5",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/docker_module/#docker-runtime-environment",
            "text": "about : attempt to list the environmental variables of the supplied image ID group : docker function docker-runtime-environment() { docker run \"$@\" env }",
            "title": "docker-runtime-environment():"
        },
        {
            "location": "modules/docker_module/#function-calls_6",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/docker_module/#docker-archive-content",
            "text": "about : show the content of the provided Docker image archive group : docker param : 1: image archive name example : docker-archive-content images.tar.gz function docker-archive-content() { if [ -n \"$1\" ]; then tar -xzOf $1 manifest.json | jq '[.[] | .RepoTags] | add' fi }",
            "title": "docker-archive-content():"
        },
        {
            "location": "modules/docker_module/#function-calls_7",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/extract/",
            "text": "one command to extract them all... (in /home/bsgt/sys_bashrc/modules/extract.sh)",
            "title": "extract"
        },
        {
            "location": "modules/extract/#one-command-to-extract-them-all",
            "text": "(in /home/bsgt/sys_bashrc/modules/extract.sh)",
            "title": "one command to extract them all..."
        },
        {
            "location": "modules/git_module/",
            "text": "git helper functions (in /home/bsgt/sys_bashrc/modules/git_module.sh) Function Index 01 - git_remote 02 - git_first_push 03 - git_pub() 04 - git_revert() 05 - git_rollback() 06 - git_remove_missing_files() 07 - local-ignore() 08 - git_info() 09 - git_stats 10 - gittowork() 11 - gitignore-reload() 12 - git_greedy_get() git_remote: about : adds remote $GIT_HOSTING:$1 to current repo group : git function git_remote { echo \"Running: git remote add origin ${GIT_HOSTING}:$1.git\" git remote add origin $GIT_HOSTING:$1.git } Function Calls: No functions called. git_first_push: about : push into origin refs/heads/master group : git function git_first_push { echo \"Running: git push origin master:refs/heads/master\" git push origin master:refs/heads/master } Function Calls: No functions called. git_pub(): about : publishes current branch to remote origin group : git function git_pub() { BRANCH=$(git rev-parse --abbrev-ref HEAD) echo \"Publishing ${BRANCH} to remote origin\" git push -u origin $BRANCH } Function Calls: No functions called. git_revert(): about : applies changes to HEAD that revert all changes after this commit group : git function git_revert() { git reset $1 git reset --soft HEAD@{1} git commit -m \"Revert to ${1}\" git reset --hard } Function Calls: No functions called. git_rollback(): about : resets the current HEAD to this commit group : git function git_rollback() { function is_clean() { if [[ $(git diff --shortstat 2> /dev/null | tail -n1) != \"\" ]]; then echo \"Your branch is dirty, please commit your changes\" kill -INT $$ fi } function commit_exists() { git rev-list --quiet $1 status=$? if [ $status -ne 0 ]; then echo \"Commit ${1} does not exist\" kill -INT $$ fi } function keep_changes() { while true do read -p \"Do you want to keep all changes from rolled back revisions in your working tree? [Y/N]\" RESP case $RESP in [yY]) echo \"Rolling back to commit ${1} with unstaged changes\" git reset $1 break ;; [nN]) echo \"Rolling back to commit ${1} with a clean working tree\" git reset --hard $1 break ;; *) echo \"Please enter Y or N\" esac done } if [ -n \"$(git symbolic-ref HEAD 2> /dev/null)\" ]; then is_clean commit_exists $1 while true do read -p \"WARNING: This will change your history and move the current HEAD back to commit ${1}, continue? [Y/N]\" RESP case $RESP in [yY]) keep_changes $1 break ;; [nN]) break ;; *) echo \"Please enter Y or N\" esac done else echo \"you're currently not in a git repository\" fi } Function Calls: No functions called. git_remove_missing_files(): group : git function git_remove_missing_files() { git ls-files -d -z | xargs -0 git update-index --remove } Function Calls: No functions called. local-ignore(): about : adds file or path to git exclude file param : 1: file or path fragment to ignore group : git function local-ignore() { echo \"$1\" >> .git/info/exclude } Function Calls: No functions called. git_info(): about : overview for your git repo group : git function git_info() { if [ -n \"$(git symbolic-ref HEAD 2> /dev/null)\" ]; then echo \"git repo overview\" echo \"-----------------\" echo for remote in $(git remote show); do echo $remote: git remote show $remote echo done echo \"status:\" if [ -n \"$(git status -s 2> /dev/null)\" ]; then git status -s else echo \"working directory is clean\" fi echo echo \"log:\" git log -5 --oneline echo else echo \"you're currently not in a git repository\" fi } Function Calls: No functions called. git_stats: about : display stats per author group : git function git_stats { if [ -n \"$(git symbolic-ref HEAD 2> /dev/null)\" ]; then echo \"Number of commits per author:\" git --no-pager shortlog -sn --all AUTHORS=$( git shortlog -sn --all | cut -f2 | cut -f1 -d' ') LOGOPTS=\"\" if [ \"$1\" == '-w' ]; then LOGOPTS=\"$LOGOPTS -w\" shift fi if [ \"$1\" == '-M' ]; then LOGOPTS=\"$LOGOPTS -M\" shift fi if [ \"$1\" == '-C' ]; then LOGOPTS=\"$LOGOPTS -C --find-copies-harder\" shift fi for a in $AUTHORS do echo '-------------------' echo \"Statistics for: $a\" echo -n \"Number of files changed: \" git log $LOGOPTS --all --numstat --format=\"%n\" --author=$a | cut -f3 | sort -iu | wc -l echo -n \"Number of lines added: \" git log $LOGOPTS --all --numstat --format=\"%n\" --author=$a | cut -f1 | awk '{s+=$1} END {print s}' echo -n \"Number of lines deleted: \" git log $LOGOPTS --all --numstat --format=\"%n\" --author=$a | cut -f2 | awk '{s+=$1} END {print s}' echo -n \"Number of merges: \" git log $LOGOPTS --all --merges --author=$a | grep -c '^commit' done else echo \"you're currently not in a git repository\" fi } Function Calls: No functions called. gittowork(): about : Places the latest .gitignore file for a given project type in the current directory, or concatenates onto an existing .gitignore group : git param : 1: the language/type of the project, used for determining the contents of the .gitignore file example : $ gittowork java function gittowork() { result=$(curl -L \"https://www.gitignore.io/api/$1\" 2>/dev/null) if [[ $result =~ ERROR ]]; then echo \"Query '$1' has no match. See a list of possible queries with 'gittowork list'\" elif [[ $1 = list ]]; then echo \"$result\" else if [[ -f .gitignore ]]; then result=`echo \"$result\" | grep -v \"# Created by http://www.gitignore.io\"` echo \".gitignore already exists, appending...\" echo \"$result\" >> .gitignore else echo \"$result\" > .gitignore fi fi } Function Calls: No functions called. gitignore-reload(): about : Empties the git cache, and readds all files not blacklisted by .gitignore group : git example : $ gitignore-reload function gitignore-reload() { git update-index -q --ignore-submodules --refresh err=0 if ! git diff-files --quiet --ignore-submodules -- then echo >&2 \"ERROR: Cannot reload .gitignore: Your index contains unstaged changes.\" git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2 err=1 fi if ! git diff-index --cached --quiet HEAD --ignore-submodules then echo >&2 \"ERROR: Cannot reload .gitignore: Your index contains uncommited changes.\" git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2 err=1 fi if [ $err = 1 ] then echo >&2 \"Please commit or stash them.\" fi if [ $err = 0 ]; then git rm -r --cached . echo >&2 \"Running git add .\" git add . echo >&2 \"Files readded. Commit your new changes now.\" fi } Function Calls: No functions called. git_greedy_get(): about : Pulls all existing remote brachches when executed in an existing git repo group : git example : $ git_greedy_get function git_greedy_get() { git branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done git fetch --all git pull --all } Function Calls: No functions called.",
            "title": "git_module"
        },
        {
            "location": "modules/git_module/#git-helper-functions",
            "text": "(in /home/bsgt/sys_bashrc/modules/git_module.sh)",
            "title": "git helper functions"
        },
        {
            "location": "modules/git_module/#function-index",
            "text": "01 - git_remote 02 - git_first_push 03 - git_pub() 04 - git_revert() 05 - git_rollback() 06 - git_remove_missing_files() 07 - local-ignore() 08 - git_info() 09 - git_stats 10 - gittowork() 11 - gitignore-reload() 12 - git_greedy_get()",
            "title": "Function Index"
        },
        {
            "location": "modules/git_module/#git_remote",
            "text": "about : adds remote $GIT_HOSTING:$1 to current repo group : git function git_remote { echo \"Running: git remote add origin ${GIT_HOSTING}:$1.git\" git remote add origin $GIT_HOSTING:$1.git }",
            "title": "git_remote:"
        },
        {
            "location": "modules/git_module/#function-calls",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/git_module/#git_first_push",
            "text": "about : push into origin refs/heads/master group : git function git_first_push { echo \"Running: git push origin master:refs/heads/master\" git push origin master:refs/heads/master }",
            "title": "git_first_push:"
        },
        {
            "location": "modules/git_module/#function-calls_1",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/git_module/#git_pub",
            "text": "about : publishes current branch to remote origin group : git function git_pub() { BRANCH=$(git rev-parse --abbrev-ref HEAD) echo \"Publishing ${BRANCH} to remote origin\" git push -u origin $BRANCH }",
            "title": "git_pub():"
        },
        {
            "location": "modules/git_module/#function-calls_2",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/git_module/#git_revert",
            "text": "about : applies changes to HEAD that revert all changes after this commit group : git function git_revert() { git reset $1 git reset --soft HEAD@{1} git commit -m \"Revert to ${1}\" git reset --hard }",
            "title": "git_revert():"
        },
        {
            "location": "modules/git_module/#function-calls_3",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/git_module/#git_rollback",
            "text": "about : resets the current HEAD to this commit group : git function git_rollback() { function is_clean() { if [[ $(git diff --shortstat 2> /dev/null | tail -n1) != \"\" ]]; then echo \"Your branch is dirty, please commit your changes\" kill -INT $$ fi } function commit_exists() { git rev-list --quiet $1 status=$? if [ $status -ne 0 ]; then echo \"Commit ${1} does not exist\" kill -INT $$ fi } function keep_changes() { while true do read -p \"Do you want to keep all changes from rolled back revisions in your working tree? [Y/N]\" RESP case $RESP in [yY]) echo \"Rolling back to commit ${1} with unstaged changes\" git reset $1 break ;; [nN]) echo \"Rolling back to commit ${1} with a clean working tree\" git reset --hard $1 break ;; *) echo \"Please enter Y or N\" esac done } if [ -n \"$(git symbolic-ref HEAD 2> /dev/null)\" ]; then is_clean commit_exists $1 while true do read -p \"WARNING: This will change your history and move the current HEAD back to commit ${1}, continue? [Y/N]\" RESP case $RESP in [yY]) keep_changes $1 break ;; [nN]) break ;; *) echo \"Please enter Y or N\" esac done else echo \"you're currently not in a git repository\" fi }",
            "title": "git_rollback():"
        },
        {
            "location": "modules/git_module/#function-calls_4",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/git_module/#git_remove_missing_files",
            "text": "group : git function git_remove_missing_files() { git ls-files -d -z | xargs -0 git update-index --remove }",
            "title": "git_remove_missing_files():"
        },
        {
            "location": "modules/git_module/#function-calls_5",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/git_module/#local-ignore",
            "text": "about : adds file or path to git exclude file param : 1: file or path fragment to ignore group : git function local-ignore() { echo \"$1\" >> .git/info/exclude }",
            "title": "local-ignore():"
        },
        {
            "location": "modules/git_module/#function-calls_6",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/git_module/#git_info",
            "text": "about : overview for your git repo group : git function git_info() { if [ -n \"$(git symbolic-ref HEAD 2> /dev/null)\" ]; then echo \"git repo overview\" echo \"-----------------\" echo for remote in $(git remote show); do echo $remote: git remote show $remote echo done echo \"status:\" if [ -n \"$(git status -s 2> /dev/null)\" ]; then git status -s else echo \"working directory is clean\" fi echo echo \"log:\" git log -5 --oneline echo else echo \"you're currently not in a git repository\" fi }",
            "title": "git_info():"
        },
        {
            "location": "modules/git_module/#function-calls_7",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/git_module/#git_stats",
            "text": "about : display stats per author group : git function git_stats { if [ -n \"$(git symbolic-ref HEAD 2> /dev/null)\" ]; then echo \"Number of commits per author:\" git --no-pager shortlog -sn --all AUTHORS=$( git shortlog -sn --all | cut -f2 | cut -f1 -d' ') LOGOPTS=\"\" if [ \"$1\" == '-w' ]; then LOGOPTS=\"$LOGOPTS -w\" shift fi if [ \"$1\" == '-M' ]; then LOGOPTS=\"$LOGOPTS -M\" shift fi if [ \"$1\" == '-C' ]; then LOGOPTS=\"$LOGOPTS -C --find-copies-harder\" shift fi for a in $AUTHORS do echo '-------------------' echo \"Statistics for: $a\" echo -n \"Number of files changed: \" git log $LOGOPTS --all --numstat --format=\"%n\" --author=$a | cut -f3 | sort -iu | wc -l echo -n \"Number of lines added: \" git log $LOGOPTS --all --numstat --format=\"%n\" --author=$a | cut -f1 | awk '{s+=$1} END {print s}' echo -n \"Number of lines deleted: \" git log $LOGOPTS --all --numstat --format=\"%n\" --author=$a | cut -f2 | awk '{s+=$1} END {print s}' echo -n \"Number of merges: \" git log $LOGOPTS --all --merges --author=$a | grep -c '^commit' done else echo \"you're currently not in a git repository\" fi }",
            "title": "git_stats:"
        },
        {
            "location": "modules/git_module/#function-calls_8",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/git_module/#gittowork",
            "text": "about : Places the latest .gitignore file for a given project type in the current directory, or concatenates onto an existing .gitignore group : git param : 1: the language/type of the project, used for determining the contents of the .gitignore file example : $ gittowork java function gittowork() { result=$(curl -L \"https://www.gitignore.io/api/$1\" 2>/dev/null) if [[ $result =~ ERROR ]]; then echo \"Query '$1' has no match. See a list of possible queries with 'gittowork list'\" elif [[ $1 = list ]]; then echo \"$result\" else if [[ -f .gitignore ]]; then result=`echo \"$result\" | grep -v \"# Created by http://www.gitignore.io\"` echo \".gitignore already exists, appending...\" echo \"$result\" >> .gitignore else echo \"$result\" > .gitignore fi fi }",
            "title": "gittowork():"
        },
        {
            "location": "modules/git_module/#function-calls_9",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/git_module/#gitignore-reload",
            "text": "about : Empties the git cache, and readds all files not blacklisted by .gitignore group : git example : $ gitignore-reload function gitignore-reload() { git update-index -q --ignore-submodules --refresh err=0 if ! git diff-files --quiet --ignore-submodules -- then echo >&2 \"ERROR: Cannot reload .gitignore: Your index contains unstaged changes.\" git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2 err=1 fi if ! git diff-index --cached --quiet HEAD --ignore-submodules then echo >&2 \"ERROR: Cannot reload .gitignore: Your index contains uncommited changes.\" git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2 err=1 fi if [ $err = 1 ] then echo >&2 \"Please commit or stash them.\" fi if [ $err = 0 ]; then git rm -r --cached . echo >&2 \"Running git add .\" git add . echo >&2 \"Files readded. Commit your new changes now.\" fi }",
            "title": "gitignore-reload():"
        },
        {
            "location": "modules/git_module/#function-calls_10",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/git_module/#git_greedy_get",
            "text": "about : Pulls all existing remote brachches when executed in an existing git repo group : git example : $ git_greedy_get function git_greedy_get() { git branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done git fetch --all git pull --all }",
            "title": "git_greedy_get():"
        },
        {
            "location": "modules/git_module/#function-calls_11",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/history_module/",
            "text": "History functions (in /home/bsgt/sys_bashrc/modules/history_module.sh) Function Index 01 - hist_nlines() 02 - grep_history() 03 - _chop_first_colum() 04 - _add_line_numbers() 05 - _top_ten() 06 - _unique_history() 07 - ghf() 08 - histdel() 09 - histdeln() hist_nlines(): about : Get last N entries from bash history. N default is 100 lines group : history param : 1: An integer corresponding to the number of history lines to tail example : $ hist_nlines 200 function hist_nlines() { if [ $# -eq 0 ]; then num_lines=100; else num_lines=$1; fi history | tail -n $num_lines; } Function Calls: No functions called. grep_history(): about : Grep bash history group : history example : $ grep_history ls function grep_history() { history | grep \"$1\" ; } Function Calls: No functions called. _chop_first_colum(): function _chop_first_colum() { awk '{for (i=2; i<NF; i++) printf $i \" \"; print $NF}' ; } Function Calls: No functions called. _add_line_numbers(): function _add_line_numbers() { awk '{print NR \" \" $0}' ; } Function Calls: No functions called. _top_ten(): function _top_ten() { sort | uniq -c | sort -r | head -n 10 ; } Function Calls: No functions called. _unique_history(): function _unique_history() { _chop_first_column | _top_ten | _chop_first_column | _add_line_numbers ; } Function Calls: No functions called. ghf(): about : Grep bash history Function group : history param : 1: With no args supplied, ghf returns the top 10 most used commands param : 2: With 1 search strings ghf returns top 10 uses for that term param : 3: With 2 search strings ghf executes a further search filter to the top10 example : $ grep_history mkdir function ghf() { if [ $# -eq 0 ]; then hist_nlines | _unique_history; fi if [ $# -eq 1 ]; then grep_history \"$1\" | _unique_history; fi if [ $# -eq 2 ]; then $(grep_history \"$1\" | _unique_history | grep ^$2 | _chop_first_column) fi } Function Calls: No functions called. histdel(): about : Delete lines of history between N -> N+n. Excluding histdel iteself. group : history param : 1: starting line to delete param : 2: ending line to delete example : $ histdel 1000 1033 function histdel() { for h in $(seq $1 $2 | tac); do history -d $h done history -d $(history 1 | awk '{print $1}') } Function Calls: No functions called. histdeln(): about : Delete last N lines of history including histdeln group : history param : 1: Number of lines to delete example : $ histdeln 10 function histdeln() { n=$(history 1 | awk '{print $1}') histdel $(( $n - $1 )) $(( $n - 1 )) } Function Calls: No functions called. Aliases Alias Name Code Descripion hist history' shows all history gh history | grep ' grep all history",
            "title": "history_module"
        },
        {
            "location": "modules/history_module/#history-functions",
            "text": "(in /home/bsgt/sys_bashrc/modules/history_module.sh)",
            "title": "History functions"
        },
        {
            "location": "modules/history_module/#function-index",
            "text": "01 - hist_nlines() 02 - grep_history() 03 - _chop_first_colum() 04 - _add_line_numbers() 05 - _top_ten() 06 - _unique_history() 07 - ghf() 08 - histdel() 09 - histdeln()",
            "title": "Function Index"
        },
        {
            "location": "modules/history_module/#hist_nlines",
            "text": "about : Get last N entries from bash history. N default is 100 lines group : history param : 1: An integer corresponding to the number of history lines to tail example : $ hist_nlines 200 function hist_nlines() { if [ $# -eq 0 ]; then num_lines=100; else num_lines=$1; fi history | tail -n $num_lines; }",
            "title": "hist_nlines():"
        },
        {
            "location": "modules/history_module/#function-calls",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/history_module/#grep_history",
            "text": "about : Grep bash history group : history example : $ grep_history ls function grep_history() { history | grep \"$1\" ; }",
            "title": "grep_history():"
        },
        {
            "location": "modules/history_module/#function-calls_1",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/history_module/#_chop_first_colum",
            "text": "function _chop_first_colum() { awk '{for (i=2; i<NF; i++) printf $i \" \"; print $NF}' ; }",
            "title": "_chop_first_colum():"
        },
        {
            "location": "modules/history_module/#function-calls_2",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/history_module/#_add_line_numbers",
            "text": "function _add_line_numbers() { awk '{print NR \" \" $0}' ; }",
            "title": "_add_line_numbers():"
        },
        {
            "location": "modules/history_module/#function-calls_3",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/history_module/#_top_ten",
            "text": "function _top_ten() { sort | uniq -c | sort -r | head -n 10 ; }",
            "title": "_top_ten():"
        },
        {
            "location": "modules/history_module/#function-calls_4",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/history_module/#_unique_history",
            "text": "function _unique_history() { _chop_first_column | _top_ten | _chop_first_column | _add_line_numbers ; }",
            "title": "_unique_history():"
        },
        {
            "location": "modules/history_module/#function-calls_5",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/history_module/#ghf",
            "text": "about : Grep bash history Function group : history param : 1: With no args supplied, ghf returns the top 10 most used commands param : 2: With 1 search strings ghf returns top 10 uses for that term param : 3: With 2 search strings ghf executes a further search filter to the top10 example : $ grep_history mkdir function ghf() { if [ $# -eq 0 ]; then hist_nlines | _unique_history; fi if [ $# -eq 1 ]; then grep_history \"$1\" | _unique_history; fi if [ $# -eq 2 ]; then $(grep_history \"$1\" | _unique_history | grep ^$2 | _chop_first_column) fi }",
            "title": "ghf():"
        },
        {
            "location": "modules/history_module/#function-calls_6",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/history_module/#histdel",
            "text": "about : Delete lines of history between N -> N+n. Excluding histdel iteself. group : history param : 1: starting line to delete param : 2: ending line to delete example : $ histdel 1000 1033 function histdel() { for h in $(seq $1 $2 | tac); do history -d $h done history -d $(history 1 | awk '{print $1}') }",
            "title": "histdel():"
        },
        {
            "location": "modules/history_module/#function-calls_7",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/history_module/#histdeln",
            "text": "about : Delete last N lines of history including histdeln group : history param : 1: Number of lines to delete example : $ histdeln 10 function histdeln() { n=$(history 1 | awk '{print $1}') histdel $(( $n - $1 )) $(( $n - 1 )) }",
            "title": "histdeln():"
        },
        {
            "location": "modules/history_module/#function-calls_8",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/history_module/#aliases",
            "text": "Alias Name Code Descripion hist history' shows all history gh history | grep ' grep all history",
            "title": "Aliases"
        },
        {
            "location": "modules/installer_module/",
            "text": "Install additional packages (in /home/bsgt/sys_bashrc/modules/installer_module.sh) Function Index 01 - get-latest-gh-release 02 - install-usr-local get-latest-gh-release: about : Download & extract the latest package release from gihub releases page to /tmp. Use install-usr-local() to install correct file group : installers param : 1: package name. This is used to search an internal dictionary for github connection details example : $ get-latest-gh-release ccat function get-latest-gh-release { local PACKAGE_NAME=$1 local GITHUB_USER=$(echo \"${GH_INSTALL_LIB[${PACKAGE_NAME}]}\" | cut -d, -f1) local GITHUB_REPO=$(echo \"${GH_INSTALL_LIB[${PACKAGE_NAME}]}\" | cut -d, -f2) local LNX_AMD64_RELEASE_URL=$(wget -q -nv -O- \"https://api.github.com/repos/$GITHUB_USER/$GITHUB_REPO/releases/latest\" 2>/dev/null | jq -r '.assets[] | select(.browser_download_url | contains(\"linux-amd64\")) | .browser_download_url') local REL_FILE=$(basename $LNX_AMD64_RELEASE_URL) echo \"Release file is: $REL_FILE\" wget -q -nv -O \"/tmp/${REL_FILE}\" $LNX_AMD64_RELEASE_URL if [ ! -f \"/tmp/${REL_FILE}\" ]; then echo -e \"\\nDidn't download $LNX_AMD64_RELEASE_URL properly. Where is /tmp/${REL_FILE}?\" exit 1 fi echo \"Now extracting $REL_FILE to /tmp\" cd /tmp extract $REL_FILE } Function Calls: No functions called. install-usr-local: about : Move program group : installers param : 1: Program file to move to /usr/local/bin. This function makes it executable example : $ install-usr-local ${SOME_PROG} function install-usr-local { MYPROG=$1 sudo mv -fv $MYPROG /usr/local/bin sudo chmod -v +x /usr/local/bin/$(basename $MYPROG) } Function Calls: No functions called.",
            "title": "installer_module"
        },
        {
            "location": "modules/installer_module/#install-additional-packages",
            "text": "(in /home/bsgt/sys_bashrc/modules/installer_module.sh)",
            "title": "Install additional packages"
        },
        {
            "location": "modules/installer_module/#function-index",
            "text": "01 - get-latest-gh-release 02 - install-usr-local",
            "title": "Function Index"
        },
        {
            "location": "modules/installer_module/#get-latest-gh-release",
            "text": "about : Download & extract the latest package release from gihub releases page to /tmp. Use install-usr-local() to install correct file group : installers param : 1: package name. This is used to search an internal dictionary for github connection details example : $ get-latest-gh-release ccat function get-latest-gh-release { local PACKAGE_NAME=$1 local GITHUB_USER=$(echo \"${GH_INSTALL_LIB[${PACKAGE_NAME}]}\" | cut -d, -f1) local GITHUB_REPO=$(echo \"${GH_INSTALL_LIB[${PACKAGE_NAME}]}\" | cut -d, -f2) local LNX_AMD64_RELEASE_URL=$(wget -q -nv -O- \"https://api.github.com/repos/$GITHUB_USER/$GITHUB_REPO/releases/latest\" 2>/dev/null | jq -r '.assets[] | select(.browser_download_url | contains(\"linux-amd64\")) | .browser_download_url') local REL_FILE=$(basename $LNX_AMD64_RELEASE_URL) echo \"Release file is: $REL_FILE\" wget -q -nv -O \"/tmp/${REL_FILE}\" $LNX_AMD64_RELEASE_URL if [ ! -f \"/tmp/${REL_FILE}\" ]; then echo -e \"\\nDidn't download $LNX_AMD64_RELEASE_URL properly. Where is /tmp/${REL_FILE}?\" exit 1 fi echo \"Now extracting $REL_FILE to /tmp\" cd /tmp extract $REL_FILE }",
            "title": "get-latest-gh-release:"
        },
        {
            "location": "modules/installer_module/#function-calls",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "modules/installer_module/#install-usr-local",
            "text": "about : Move program group : installers param : 1: Program file to move to /usr/local/bin. This function makes it executable example : $ install-usr-local ${SOME_PROG} function install-usr-local { MYPROG=$1 sudo mv -fv $MYPROG /usr/local/bin sudo chmod -v +x /usr/local/bin/$(basename $MYPROG) }",
            "title": "install-usr-local:"
        },
        {
            "location": "modules/installer_module/#function-calls_1",
            "text": "No functions called.",
            "title": "Function Calls:"
        },
        {
            "location": "undef/theme_settings/",
            "text": "Undefined. Add composure cite-about to shell script file (in /home/bsgt/sys_bashrc/theme_settings.sh)",
            "title": "Theme settings"
        },
        {
            "location": "undef/theme_settings/#undefined-add-composure-cite-about-to-shell-script-file",
            "text": "(in /home/bsgt/sys_bashrc/theme_settings.sh)",
            "title": "Undefined. Add composure cite-about to shell script file"
        }
    ]
}